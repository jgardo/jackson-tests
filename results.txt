
Using:

java: 8.0.232-open
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 394,821 ns/op
# Warmup Iteration   2: 365,711 ns/op
# Warmup Iteration   3: 370,511 ns/op
Iteration   1: 366,215 ns/op
Iteration   2: 366,347 ns/op
Iteration   3: 370,073 ns/op
Iteration   4: 376,138 ns/op
Iteration   5: 369,281 ns/op
Iteration   6: 366,502 ns/op
Iteration   7: 370,601 ns/op
Iteration   8: 371,937 ns/op
Iteration   9: 366,227 ns/op
Iteration  10: 377,998 ns/op
Iteration  11: 366,784 ns/op
Iteration  12: 366,028 ns/op
Iteration  13: 366,970 ns/op
Iteration  14: 366,848 ns/op
Iteration  15: 366,802 ns/op
Iteration  16: 368,886 ns/op
Iteration  17: 368,628 ns/op
Iteration  18: 367,242 ns/op
Iteration  19: 369,657 ns/op
Iteration  20: 366,291 ns/op
Iteration  21: 366,583 ns/op
Iteration  22: 380,835 ns/op
Iteration  23: 367,409 ns/op
Iteration  24: 373,318 ns/op
Iteration  25: 373,820 ns/op
Iteration  26: 371,943 ns/op
Iteration  27: 373,698 ns/op
Iteration  28: 367,128 ns/op
Iteration  29: 372,846 ns/op
Iteration  30: 367,810 ns/op
Iteration  31: 368,295 ns/op
Iteration  32: 368,779 ns/op
Iteration  33: 367,682 ns/op
Iteration  34: 374,163 ns/op
Iteration  35: 368,301 ns/op
Iteration  36: 366,520 ns/op
Iteration  37: 368,921 ns/op
Iteration  38: 366,432 ns/op
Iteration  39: 371,000 ns/op
Iteration  40: 369,776 ns/op
Iteration  41: 368,958 ns/op
Iteration  42: 368,010 ns/op
Iteration  43: 367,611 ns/op
Iteration  44: 371,885 ns/op
Iteration  45: 366,766 ns/op
Iteration  46: 370,435 ns/op
Iteration  47: 370,329 ns/op
Iteration  48: 368,680 ns/op
Iteration  49: 367,773 ns/op
Iteration  50: 370,122 ns/op
Iteration  51: 368,381 ns/op
Iteration  52: 368,409 ns/op
Iteration  53: 373,354 ns/op
Iteration  54: 371,238 ns/op
Iteration  55: 368,450 ns/op
Iteration  56: 371,675 ns/op
Iteration  57: 367,049 ns/op
Iteration  58: 367,213 ns/op
Iteration  59: 367,213 ns/op
Iteration  60: 366,410 ns/op
Iteration  61: 368,662 ns/op
Iteration  62: 375,577 ns/op
Iteration  63: 374,861 ns/op
Iteration  64: 368,918 ns/op
Iteration  65: 368,119 ns/op
Iteration  66: 366,516 ns/op
Iteration  67: 369,252 ns/op
Iteration  68: 368,306 ns/op
Iteration  69: 366,852 ns/op
Iteration  70: 366,684 ns/op
Iteration  71: 371,597 ns/op
Iteration  72: 366,496 ns/op
Iteration  73: 366,285 ns/op
Iteration  74: 367,600 ns/op
Iteration  75: 368,511 ns/op
Iteration  76: 369,217 ns/op
Iteration  77: 366,267 ns/op
Iteration  78: 368,580 ns/op
Iteration  79: 366,902 ns/op
Iteration  80: 370,104 ns/op
Iteration  81: 379,905 ns/op
Iteration  82: 369,335 ns/op
Iteration  83: 366,561 ns/op
Iteration  84: 367,103 ns/op
Iteration  85: 372,842 ns/op
Iteration  86: 368,485 ns/op
Iteration  87: 366,210 ns/op
Iteration  88: 369,024 ns/op
Iteration  89: 370,005 ns/op
Iteration  90: 367,159 ns/op
Iteration  91: 366,260 ns/op
Iteration  92: 368,332 ns/op
Iteration  93: 373,141 ns/op
Iteration  94: 370,458 ns/op
Iteration  95: 367,932 ns/op
Iteration  96: 369,169 ns/op
Iteration  97: 369,397 ns/op
Iteration  98: 369,249 ns/op
Iteration  99: 366,859 ns/op
Iteration 100: 367,424 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  369,208 ±(99.9%) 1,016 ns/op [Average]
  (min, avg, max) = (366,028, 369,208, 380,835), stdev = 2,997
  CI (99.9%): [368,192, 370,225] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                     (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-2.json  avgt  100  369,208 ± 1,016  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 827,726 ns/op
# Warmup Iteration   2: 788,174 ns/op
# Warmup Iteration   3: 790,746 ns/op
Iteration   1: 798,109 ns/op
Iteration   2: 787,483 ns/op
Iteration   3: 804,562 ns/op
Iteration   4: 787,910 ns/op
Iteration   5: 795,404 ns/op
Iteration   6: 799,326 ns/op
Iteration   7: 786,949 ns/op
Iteration   8: 790,918 ns/op
Iteration   9: 786,269 ns/op
Iteration  10: 800,233 ns/op
Iteration  11: 787,460 ns/op
Iteration  12: 790,802 ns/op
Iteration  13: 809,077 ns/op
Iteration  14: 786,209 ns/op
Iteration  15: 790,970 ns/op
Iteration  16: 791,423 ns/op
Iteration  17: 786,950 ns/op
Iteration  18: 789,382 ns/op
Iteration  19: 813,157 ns/op
Iteration  20: 790,869 ns/op
Iteration  21: 787,300 ns/op
Iteration  22: 789,777 ns/op
Iteration  23: 797,193 ns/op
Iteration  24: 787,098 ns/op
Iteration  25: 789,681 ns/op
Iteration  26: 796,251 ns/op
Iteration  27: 792,662 ns/op
Iteration  28: 786,857 ns/op
Iteration  29: 786,548 ns/op
Iteration  30: 804,337 ns/op
Iteration  31: 791,677 ns/op
Iteration  32: 789,950 ns/op
Iteration  33: 797,611 ns/op
Iteration  34: 788,966 ns/op
Iteration  35: 786,913 ns/op
Iteration  36: 788,950 ns/op
Iteration  37: 798,685 ns/op
Iteration  38: 808,662 ns/op
Iteration  39: 800,078 ns/op
Iteration  40: 788,162 ns/op
Iteration  41: 791,786 ns/op
Iteration  42: 792,006 ns/op
Iteration  43: 785,762 ns/op
Iteration  44: 788,762 ns/op
Iteration  45: 799,180 ns/op
Iteration  46: 799,558 ns/op
Iteration  47: 791,554 ns/op
Iteration  48: 795,295 ns/op
Iteration  49: 789,118 ns/op
Iteration  50: 788,847 ns/op
Iteration  51: 785,403 ns/op
Iteration  52: 795,432 ns/op
Iteration  53: 786,459 ns/op
Iteration  54: 792,785 ns/op
Iteration  55: 788,053 ns/op
Iteration  56: 787,426 ns/op
Iteration  57: 788,662 ns/op
Iteration  58: 787,613 ns/op
Iteration  59: 806,632 ns/op
Iteration  60: 790,966 ns/op
Iteration  61: 791,195 ns/op
Iteration  62: 792,376 ns/op
Iteration  63: 793,483 ns/op
Iteration  64: 791,678 ns/op
Iteration  65: 787,838 ns/op
Iteration  66: 805,322 ns/op
Iteration  67: 793,179 ns/op
Iteration  68: 790,140 ns/op
Iteration  69: 808,161 ns/op
Iteration  70: 789,135 ns/op
Iteration  71: 791,627 ns/op
Iteration  72: 787,884 ns/op
Iteration  73: 795,040 ns/op
Iteration  74: 786,855 ns/op
Iteration  75: 791,538 ns/op
Iteration  76: 799,498 ns/op
Iteration  77: 787,168 ns/op
Iteration  78: 795,410 ns/op
Iteration  79: 790,174 ns/op
Iteration  80: 796,434 ns/op
Iteration  81: 797,767 ns/op
Iteration  82: 786,490 ns/op
Iteration  83: 787,821 ns/op
Iteration  84: 801,711 ns/op
Iteration  85: 787,710 ns/op
Iteration  86: 790,654 ns/op
Iteration  87: 795,595 ns/op
Iteration  88: 790,648 ns/op
Iteration  89: 788,559 ns/op
Iteration  90: 789,490 ns/op
Iteration  91: 786,537 ns/op
Iteration  92: 787,752 ns/op
Iteration  93: 794,034 ns/op
Iteration  94: 796,647 ns/op
Iteration  95: 788,456 ns/op
Iteration  96: 788,600 ns/op
Iteration  97: 785,968 ns/op
Iteration  98: 791,440 ns/op
Iteration  99: 787,051 ns/op
Iteration 100: 792,723 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  792,419 ±(99.9%) 2,049 ns/op [Average]
  (min, avg, max) = (785,403, 792,419, 813,157), stdev = 6,041
  CI (99.9%): [790,370, 794,468] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                     (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-6.json  avgt  100  792,419 ± 2,049  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1408,701 ns/op
# Warmup Iteration   2: 1308,412 ns/op
# Warmup Iteration   3: 1311,913 ns/op
Iteration   1: 1308,225 ns/op
Iteration   2: 1301,572 ns/op
Iteration   3: 1306,326 ns/op
Iteration   4: 1310,921 ns/op
Iteration   5: 1302,425 ns/op
Iteration   6: 1320,581 ns/op
Iteration   7: 1306,615 ns/op
Iteration   8: 1308,020 ns/op
Iteration   9: 1305,323 ns/op
Iteration  10: 1306,537 ns/op
Iteration  11: 1306,008 ns/op
Iteration  12: 1298,065 ns/op
Iteration  13: 1303,681 ns/op
Iteration  14: 1315,339 ns/op
Iteration  15: 1318,830 ns/op
Iteration  16: 1311,670 ns/op
Iteration  17: 1346,464 ns/op
Iteration  18: 1358,816 ns/op
Iteration  19: 1314,627 ns/op
Iteration  20: 1329,933 ns/op
Iteration  21: 1320,346 ns/op
Iteration  22: 1325,041 ns/op
Iteration  23: 1317,797 ns/op
Iteration  24: 1316,950 ns/op
Iteration  25: 1339,820 ns/op
Iteration  26: 1323,982 ns/op
Iteration  27: 1312,393 ns/op
Iteration  28: 1322,991 ns/op
Iteration  29: 1326,557 ns/op
Iteration  30: 1344,096 ns/op
Iteration  31: 1314,753 ns/op
Iteration  32: 1340,759 ns/op
Iteration  33: 1341,455 ns/op
Iteration  34: 1314,653 ns/op
Iteration  35: 1316,876 ns/op
Iteration  36: 1322,571 ns/op
Iteration  37: 1330,522 ns/op
Iteration  38: 1321,827 ns/op
Iteration  39: 1318,032 ns/op
Iteration  40: 1317,558 ns/op
Iteration  41: 1339,217 ns/op
Iteration  42: 1325,564 ns/op
Iteration  43: 1328,141 ns/op
Iteration  44: 1327,533 ns/op
Iteration  45: 1332,266 ns/op
Iteration  46: 1341,152 ns/op
Iteration  47: 1328,767 ns/op
Iteration  48: 1314,494 ns/op
Iteration  49: 1318,759 ns/op
Iteration  50: 1314,140 ns/op
Iteration  51: 1313,831 ns/op
Iteration  52: 1322,680 ns/op
Iteration  53: 1316,509 ns/op
Iteration  54: 1325,996 ns/op
Iteration  55: 1319,973 ns/op
Iteration  56: 1310,503 ns/op
Iteration  57: 1321,382 ns/op
Iteration  58: 1317,973 ns/op
Iteration  59: 1319,177 ns/op
Iteration  60: 1326,017 ns/op
Iteration  61: 1320,850 ns/op
Iteration  62: 1321,413 ns/op
Iteration  63: 1330,190 ns/op
Iteration  64: 1330,997 ns/op
Iteration  65: 1327,727 ns/op
Iteration  66: 1312,594 ns/op
Iteration  67: 1327,631 ns/op
Iteration  68: 1325,940 ns/op
Iteration  69: 1323,454 ns/op
Iteration  70: 1352,235 ns/op
Iteration  71: 1315,741 ns/op
Iteration  72: 1322,158 ns/op
Iteration  73: 1320,904 ns/op
Iteration  74: 1311,816 ns/op
Iteration  75: 1340,778 ns/op
Iteration  76: 1321,225 ns/op
Iteration  77: 1320,867 ns/op
Iteration  78: 1340,076 ns/op
Iteration  79: 1323,495 ns/op
Iteration  80: 1311,910 ns/op
Iteration  81: 1328,547 ns/op
Iteration  82: 1318,563 ns/op
Iteration  83: 1324,052 ns/op
Iteration  84: 1321,214 ns/op
Iteration  85: 1318,292 ns/op
Iteration  86: 1313,671 ns/op
Iteration  87: 1324,556 ns/op
Iteration  88: 1316,478 ns/op
Iteration  89: 1324,108 ns/op
Iteration  90: 1322,475 ns/op
Iteration  91: 1309,915 ns/op
Iteration  92: 1314,695 ns/op
Iteration  93: 1321,746 ns/op
Iteration  94: 1318,784 ns/op
Iteration  95: 1316,127 ns/op
Iteration  96: 1322,315 ns/op
Iteration  97: 1322,583 ns/op
Iteration  98: 1320,934 ns/op
Iteration  99: 1317,202 ns/op
Iteration 100: 1329,941 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  1321,412 ±(99.9%) 3,674 ns/op [Average]
  (min, avg, max) = (1298,065, 1321,412, 1358,816), stdev = 10,833
  CI (99.9%): [1317,738, 1325,086] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                      (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-10.json  avgt  100  1321,412 ± 3,674  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 3472,214 ns/op
# Warmup Iteration   2: 3205,291 ns/op
# Warmup Iteration   3: 3191,157 ns/op
Iteration   1: 3182,634 ns/op
Iteration   2: 3180,650 ns/op
Iteration   3: 3228,529 ns/op
Iteration   4: 3195,816 ns/op
Iteration   5: 3174,381 ns/op
Iteration   6: 3187,509 ns/op
Iteration   7: 3183,673 ns/op
Iteration   8: 3213,365 ns/op
Iteration   9: 3219,786 ns/op
Iteration  10: 3194,771 ns/op
Iteration  11: 3166,501 ns/op
Iteration  12: 3182,547 ns/op
Iteration  13: 3187,871 ns/op
Iteration  14: 3173,405 ns/op
Iteration  15: 3214,374 ns/op
Iteration  16: 3174,266 ns/op
Iteration  17: 3172,085 ns/op
Iteration  18: 3209,335 ns/op
Iteration  19: 3199,863 ns/op
Iteration  20: 3196,801 ns/op
Iteration  21: 3159,404 ns/op
Iteration  22: 3170,590 ns/op
Iteration  23: 3164,258 ns/op
Iteration  24: 3163,876 ns/op
Iteration  25: 3183,299 ns/op
Iteration  26: 3172,788 ns/op
Iteration  27: 3197,768 ns/op
Iteration  28: 3188,242 ns/op
Iteration  29: 3192,586 ns/op
Iteration  30: 3169,768 ns/op
Iteration  31: 3163,437 ns/op
Iteration  32: 3165,153 ns/op
Iteration  33: 3179,830 ns/op
Iteration  34: 3188,446 ns/op
Iteration  35: 3165,935 ns/op
Iteration  36: 3169,204 ns/op
Iteration  37: 3236,194 ns/op
Iteration  38: 3219,557 ns/op
Iteration  39: 3168,731 ns/op
Iteration  40: 3166,003 ns/op
Iteration  41: 3178,083 ns/op
Iteration  42: 3169,160 ns/op
Iteration  43: 3187,144 ns/op
Iteration  44: 3205,139 ns/op
Iteration  45: 3196,099 ns/op
Iteration  46: 3219,114 ns/op
Iteration  47: 3273,845 ns/op
Iteration  48: 3209,005 ns/op
Iteration  49: 3194,639 ns/op
Iteration  50: 3222,132 ns/op
Iteration  51: 3237,934 ns/op
Iteration  52: 3193,931 ns/op
Iteration  53: 3200,141 ns/op
Iteration  54: 3195,171 ns/op
Iteration  55: 3194,642 ns/op
Iteration  56: 3178,492 ns/op
Iteration  57: 3201,388 ns/op
Iteration  58: 3192,240 ns/op
Iteration  59: 3203,091 ns/op
Iteration  60: 3186,957 ns/op
Iteration  61: 3184,900 ns/op
Iteration  62: 3217,233 ns/op
Iteration  63: 3189,172 ns/op
Iteration  64: 3188,136 ns/op
Iteration  65: 3188,870 ns/op
Iteration  66: 3201,872 ns/op
Iteration  67: 3218,483 ns/op
Iteration  68: 3182,212 ns/op
Iteration  69: 3206,820 ns/op
Iteration  70: 3186,899 ns/op
Iteration  71: 3184,615 ns/op
Iteration  72: 3183,702 ns/op
Iteration  73: 3185,484 ns/op
Iteration  74: 3200,295 ns/op
Iteration  75: 3184,280 ns/op
Iteration  76: 3219,061 ns/op
Iteration  77: 3191,394 ns/op
Iteration  78: 3250,007 ns/op
Iteration  79: 3190,525 ns/op
Iteration  80: 3193,389 ns/op
Iteration  81: 3184,701 ns/op
Iteration  82: 3209,501 ns/op
Iteration  83: 3214,813 ns/op
Iteration  84: 3198,420 ns/op
Iteration  85: 3203,360 ns/op
Iteration  86: 3230,642 ns/op
Iteration  87: 3214,892 ns/op
Iteration  88: 3207,728 ns/op
Iteration  89: 3227,168 ns/op
Iteration  90: 3197,923 ns/op
Iteration  91: 3196,747 ns/op
Iteration  92: 3222,334 ns/op
Iteration  93: 3196,802 ns/op
Iteration  94: 3213,351 ns/op
Iteration  95: 3208,630 ns/op
Iteration  96: 3191,808 ns/op
Iteration  97: 3196,138 ns/op
Iteration  98: 3221,845 ns/op
Iteration  99: 3240,746 ns/op
Iteration 100: 3196,641 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  3195,831 ±(99.9%) 7,097 ns/op [Average]
  (min, avg, max) = (3159,404, 3195,831, 3273,845), stdev = 20,927
  CI (99.9%): [3188,734, 3202,929] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                      (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-20.json  avgt  100  3195,831 ± 7,097  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 401,541 ns/op
# Warmup Iteration   2: 380,027 ns/op
# Warmup Iteration   3: 377,366 ns/op
Iteration   1: 381,277 ns/op
Iteration   2: 382,003 ns/op
Iteration   3: 376,640 ns/op
Iteration   4: 375,939 ns/op
Iteration   5: 375,333 ns/op
Iteration   6: 378,927 ns/op
Iteration   7: 377,550 ns/op
Iteration   8: 382,452 ns/op
Iteration   9: 374,926 ns/op
Iteration  10: 376,612 ns/op
Iteration  11: 375,380 ns/op
Iteration  12: 376,267 ns/op
Iteration  13: 377,410 ns/op
Iteration  14: 376,575 ns/op
Iteration  15: 376,277 ns/op
Iteration  16: 376,296 ns/op
Iteration  17: 378,223 ns/op
Iteration  18: 378,351 ns/op
Iteration  19: 380,247 ns/op
Iteration  20: 377,260 ns/op
Iteration  21: 378,590 ns/op
Iteration  22: 379,065 ns/op
Iteration  23: 376,646 ns/op
Iteration  24: 375,930 ns/op
Iteration  25: 380,925 ns/op
Iteration  26: 377,534 ns/op
Iteration  27: 376,611 ns/op
Iteration  28: 377,014 ns/op
Iteration  29: 380,702 ns/op
Iteration  30: 377,435 ns/op
Iteration  31: 376,316 ns/op
Iteration  32: 375,962 ns/op
Iteration  33: 376,848 ns/op
Iteration  34: 380,113 ns/op
Iteration  35: 378,284 ns/op
Iteration  36: 379,680 ns/op
Iteration  37: 379,650 ns/op
Iteration  38: 385,372 ns/op
Iteration  39: 380,343 ns/op
Iteration  40: 378,172 ns/op
Iteration  41: 377,531 ns/op
Iteration  42: 377,234 ns/op
Iteration  43: 377,441 ns/op
Iteration  44: 387,274 ns/op
Iteration  45: 378,747 ns/op
Iteration  46: 382,169 ns/op
Iteration  47: 380,403 ns/op
Iteration  48: 379,403 ns/op
Iteration  49: 379,880 ns/op
Iteration  50: 378,054 ns/op
Iteration  51: 378,738 ns/op
Iteration  52: 377,490 ns/op
Iteration  53: 382,895 ns/op
Iteration  54: 378,640 ns/op
Iteration  55: 380,900 ns/op
Iteration  56: 377,547 ns/op
Iteration  57: 379,545 ns/op
Iteration  58: 377,870 ns/op
Iteration  59: 378,261 ns/op
Iteration  60: 382,670 ns/op
Iteration  61: 377,476 ns/op
Iteration  62: 380,396 ns/op
Iteration  63: 378,538 ns/op
Iteration  64: 378,674 ns/op
Iteration  65: 377,373 ns/op
Iteration  66: 380,180 ns/op
Iteration  67: 382,577 ns/op
Iteration  68: 379,946 ns/op
Iteration  69: 380,001 ns/op
Iteration  70: 378,531 ns/op
Iteration  71: 376,495 ns/op
Iteration  72: 375,762 ns/op
Iteration  73: 377,737 ns/op
Iteration  74: 378,353 ns/op
Iteration  75: 377,310 ns/op
Iteration  76: 376,416 ns/op
Iteration  77: 379,140 ns/op
Iteration  78: 386,980 ns/op
Iteration  79: 378,560 ns/op
Iteration  80: 376,244 ns/op
Iteration  81: 376,199 ns/op
Iteration  82: 377,893 ns/op
Iteration  83: 378,122 ns/op
Iteration  84: 380,388 ns/op
Iteration  85: 377,883 ns/op
Iteration  86: 379,097 ns/op
Iteration  87: 376,852 ns/op
Iteration  88: 378,014 ns/op
Iteration  89: 382,299 ns/op
Iteration  90: 376,220 ns/op
Iteration  91: 377,248 ns/op
Iteration  92: 379,061 ns/op
Iteration  93: 377,902 ns/op
Iteration  94: 381,719 ns/op
Iteration  95: 375,765 ns/op
Iteration  96: 380,529 ns/op
Iteration  97: 378,074 ns/op
Iteration  98: 377,826 ns/op
Iteration  99: 377,934 ns/op
Iteration 100: 375,740 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  378,593 ±(99.9%) 0,794 ns/op [Average]
  (min, avg, max) = (374,926, 378,593, 387,274), stdev = 2,341
  CI (99.9%): [377,799, 379,387] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)               (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-2.json  avgt  100  378,593 ± 0,794  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 934,344 ns/op
# Warmup Iteration   2: 872,793 ns/op
# Warmup Iteration   3: 880,778 ns/op
Iteration   1: 876,435 ns/op
Iteration   2: 875,245 ns/op
Iteration   3: 875,858 ns/op
Iteration   4: 877,285 ns/op
Iteration   5: 876,567 ns/op
Iteration   6: 876,492 ns/op
Iteration   7: 881,919 ns/op
Iteration   8: 876,209 ns/op
Iteration   9: 875,438 ns/op
Iteration  10: 875,497 ns/op
Iteration  11: 878,231 ns/op
Iteration  12: 876,671 ns/op
Iteration  13: 875,950 ns/op
Iteration  14: 886,038 ns/op
Iteration  15: 888,984 ns/op
Iteration  16: 887,498 ns/op
Iteration  17: 886,411 ns/op
Iteration  18: 883,184 ns/op
Iteration  19: 882,900 ns/op
Iteration  20: 893,304 ns/op
Iteration  21: 899,473 ns/op
Iteration  22: 894,903 ns/op
Iteration  23: 887,286 ns/op
Iteration  24: 888,251 ns/op
Iteration  25: 898,949 ns/op
Iteration  26: 896,469 ns/op
Iteration  27: 889,105 ns/op
Iteration  28: 888,993 ns/op
Iteration  29: 887,614 ns/op
Iteration  30: 903,218 ns/op
Iteration  31: 888,409 ns/op
Iteration  32: 892,240 ns/op
Iteration  33: 886,306 ns/op
Iteration  34: 883,704 ns/op
Iteration  35: 887,760 ns/op
Iteration  36: 887,998 ns/op
Iteration  37: 891,642 ns/op
Iteration  38: 889,655 ns/op
Iteration  39: 882,914 ns/op
Iteration  40: 903,333 ns/op
Iteration  41: 897,595 ns/op
Iteration  42: 886,606 ns/op
Iteration  43: 882,758 ns/op
Iteration  44: 896,034 ns/op
Iteration  45: 887,524 ns/op
Iteration  46: 884,986 ns/op
Iteration  47: 883,592 ns/op
Iteration  48: 886,051 ns/op
Iteration  49: 894,753 ns/op
Iteration  50: 884,799 ns/op
Iteration  51: 895,626 ns/op
Iteration  52: 894,906 ns/op
Iteration  53: 893,453 ns/op
Iteration  54: 890,478 ns/op
Iteration  55: 890,780 ns/op
Iteration  56: 910,288 ns/op
Iteration  57: 889,704 ns/op
Iteration  58: 883,695 ns/op
Iteration  59: 884,616 ns/op
Iteration  60: 887,208 ns/op
Iteration  61: 888,787 ns/op
Iteration  62: 883,570 ns/op
Iteration  63: 884,332 ns/op
Iteration  64: 902,142 ns/op
Iteration  65: 892,974 ns/op
Iteration  66: 885,660 ns/op
Iteration  67: 887,230 ns/op
Iteration  68: 892,656 ns/op
Iteration  69: 888,714 ns/op
Iteration  70: 885,252 ns/op
Iteration  71: 883,841 ns/op
Iteration  72: 885,592 ns/op
Iteration  73: 883,545 ns/op
Iteration  74: 889,835 ns/op
Iteration  75: 888,318 ns/op
Iteration  76: 885,201 ns/op
Iteration  77: 884,262 ns/op
Iteration  78: 895,522 ns/op
Iteration  79: 888,197 ns/op
Iteration  80: 903,809 ns/op
Iteration  81: 883,006 ns/op
Iteration  82: 884,567 ns/op
Iteration  83: 887,038 ns/op
Iteration  84: 887,208 ns/op
Iteration  85: 890,782 ns/op
Iteration  86: 888,603 ns/op
Iteration  87: 888,567 ns/op
Iteration  88: 885,488 ns/op
Iteration  89: 883,581 ns/op
Iteration  90: 889,065 ns/op
Iteration  91: 900,173 ns/op
Iteration  92: 894,485 ns/op
Iteration  93: 883,422 ns/op
Iteration  94: 884,674 ns/op
Iteration  95: 884,322 ns/op
Iteration  96: 887,139 ns/op
Iteration  97: 883,423 ns/op
Iteration  98: 884,095 ns/op
Iteration  99: 890,234 ns/op
Iteration 100: 885,106 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  887,642 ±(99.9%) 2,326 ns/op [Average]
  (min, avg, max) = (875,245, 887,642, 910,288), stdev = 6,859
  CI (99.9%): [885,316, 889,968] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)               (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-6.json  avgt  100  887,642 ± 2,326  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1408,408 ns/op
# Warmup Iteration   2: 1339,653 ns/op
# Warmup Iteration   3: 1343,405 ns/op
Iteration   1: 1336,411 ns/op
Iteration   2: 1335,595 ns/op
Iteration   3: 1339,769 ns/op
Iteration   4: 1344,862 ns/op
Iteration   5: 1337,985 ns/op
Iteration   6: 1338,773 ns/op
Iteration   7: 1369,766 ns/op
Iteration   8: 1342,677 ns/op
Iteration   9: 1354,346 ns/op
Iteration  10: 1336,061 ns/op
Iteration  11: 1337,314 ns/op
Iteration  12: 1371,092 ns/op
Iteration  13: 1336,354 ns/op
Iteration  14: 1343,592 ns/op
Iteration  15: 1344,492 ns/op
Iteration  16: 1343,975 ns/op
Iteration  17: 1362,101 ns/op
Iteration  18: 1341,049 ns/op
Iteration  19: 1347,983 ns/op
Iteration  20: 1356,145 ns/op
Iteration  21: 1345,898 ns/op
Iteration  22: 1351,555 ns/op
Iteration  23: 1347,470 ns/op
Iteration  24: 1346,858 ns/op
Iteration  25: 1343,417 ns/op
Iteration  26: 1361,668 ns/op
Iteration  27: 1358,469 ns/op
Iteration  28: 1366,617 ns/op
Iteration  29: 1352,647 ns/op
Iteration  30: 1368,640 ns/op
Iteration  31: 1345,775 ns/op
Iteration  32: 1347,557 ns/op
Iteration  33: 1347,077 ns/op
Iteration  34: 1344,936 ns/op
Iteration  35: 1348,871 ns/op
Iteration  36: 1344,513 ns/op
Iteration  37: 1345,323 ns/op
Iteration  38: 1348,854 ns/op
Iteration  39: 1358,193 ns/op
Iteration  40: 1358,879 ns/op
Iteration  41: 1345,923 ns/op
Iteration  42: 1346,779 ns/op
Iteration  43: 1376,583 ns/op
Iteration  44: 1345,750 ns/op
Iteration  45: 1345,320 ns/op
Iteration  46: 1343,427 ns/op
Iteration  47: 1342,597 ns/op
Iteration  48: 1350,142 ns/op
Iteration  49: 1341,044 ns/op
Iteration  50: 1344,767 ns/op
Iteration  51: 1353,249 ns/op
Iteration  52: 1343,084 ns/op
Iteration  53: 1355,613 ns/op
Iteration  54: 1345,329 ns/op
Iteration  55: 1343,977 ns/op
Iteration  56: 1356,200 ns/op
Iteration  57: 1352,335 ns/op
Iteration  58: 1366,876 ns/op
Iteration  59: 1365,430 ns/op
Iteration  60: 1343,047 ns/op
Iteration  61: 1359,695 ns/op
Iteration  62: 1363,272 ns/op
Iteration  63: 1342,705 ns/op
Iteration  64: 1346,040 ns/op
Iteration  65: 1356,863 ns/op
Iteration  66: 1354,069 ns/op
Iteration  67: 1354,488 ns/op
Iteration  68: 1347,445 ns/op
Iteration  69: 1350,772 ns/op
Iteration  70: 1352,409 ns/op
Iteration  71: 1363,398 ns/op
Iteration  72: 1346,625 ns/op
Iteration  73: 1341,220 ns/op
Iteration  74: 1352,244 ns/op
Iteration  75: 1343,935 ns/op
Iteration  76: 1372,555 ns/op
Iteration  77: 1357,210 ns/op
Iteration  78: 1344,543 ns/op
Iteration  79: 1343,890 ns/op
Iteration  80: 1371,299 ns/op
Iteration  81: 1352,034 ns/op
Iteration  82: 1354,625 ns/op
Iteration  83: 1346,176 ns/op
Iteration  84: 1340,276 ns/op
Iteration  85: 1351,168 ns/op
Iteration  86: 1339,363 ns/op
Iteration  87: 1375,426 ns/op
Iteration  88: 1353,297 ns/op
Iteration  89: 1345,204 ns/op
Iteration  90: 1344,513 ns/op
Iteration  91: 1351,395 ns/op
Iteration  92: 1357,503 ns/op
Iteration  93: 1344,450 ns/op
Iteration  94: 1345,378 ns/op
Iteration  95: 1344,643 ns/op
Iteration  96: 1344,800 ns/op
Iteration  97: 1358,592 ns/op
Iteration  98: 1350,113 ns/op
Iteration  99: 1380,087 ns/op
Iteration 100: 1351,228 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  1350,560 ±(99.9%) 3,312 ns/op [Average]
  (min, avg, max) = (1335,595, 1350,560, 1380,087), stdev = 9,765
  CI (99.9%): [1347,248, 1353,872] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-10.json  avgt  100  1350,560 ± 3,312  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 2875,231 ns/op
# Warmup Iteration   2: 2725,156 ns/op
# Warmup Iteration   3: 2761,734 ns/op
Iteration   1: 2773,915 ns/op
Iteration   2: 2744,563 ns/op
Iteration   3: 2763,713 ns/op
Iteration   4: 2745,601 ns/op
Iteration   5: 2753,531 ns/op
Iteration   6: 2748,411 ns/op
Iteration   7: 2750,701 ns/op
Iteration   8: 2744,582 ns/op
Iteration   9: 2761,817 ns/op
Iteration  10: 2762,378 ns/op
Iteration  11: 2749,155 ns/op
Iteration  12: 2752,557 ns/op
Iteration  13: 2747,024 ns/op
Iteration  14: 2737,449 ns/op
Iteration  15: 2736,070 ns/op
Iteration  16: 2739,420 ns/op
Iteration  17: 2755,746 ns/op
Iteration  18: 2771,910 ns/op
Iteration  19: 2743,845 ns/op
Iteration  20: 2738,078 ns/op
Iteration  21: 2732,485 ns/op
Iteration  22: 2745,486 ns/op
Iteration  23: 2733,238 ns/op
Iteration  24: 2737,156 ns/op
Iteration  25: 2743,857 ns/op
Iteration  26: 2737,331 ns/op
Iteration  27: 2739,050 ns/op
Iteration  28: 2734,244 ns/op
Iteration  29: 2748,259 ns/op
Iteration  30: 2734,594 ns/op
Iteration  31: 2735,888 ns/op
Iteration  32: 2736,470 ns/op
Iteration  33: 2747,052 ns/op
Iteration  34: 2736,762 ns/op
Iteration  35: 2741,663 ns/op
Iteration  36: 2735,679 ns/op
Iteration  37: 2748,853 ns/op
Iteration  38: 2748,659 ns/op
Iteration  39: 2772,001 ns/op
Iteration  40: 2744,024 ns/op
Iteration  41: 2745,412 ns/op
Iteration  42: 2735,124 ns/op
Iteration  43: 2742,068 ns/op
Iteration  44: 2733,912 ns/op
Iteration  45: 2750,815 ns/op
Iteration  46: 2735,931 ns/op
Iteration  47: 2742,238 ns/op
Iteration  48: 2742,183 ns/op
Iteration  49: 2734,385 ns/op
Iteration  50: 2745,444 ns/op
Iteration  51: 2734,015 ns/op
Iteration  52: 2769,950 ns/op
Iteration  53: 2749,141 ns/op
Iteration  54: 2752,914 ns/op
Iteration  55: 2737,359 ns/op
Iteration  56: 2752,029 ns/op
Iteration  57: 2748,228 ns/op
Iteration  58: 2732,018 ns/op
Iteration  59: 2754,858 ns/op
Iteration  60: 2748,146 ns/op
Iteration  61: 2746,661 ns/op
Iteration  62: 2749,755 ns/op
Iteration  63: 2738,608 ns/op
Iteration  64: 2734,354 ns/op
Iteration  65: 2755,446 ns/op
Iteration  66: 2755,094 ns/op
Iteration  67: 2755,218 ns/op
Iteration  68: 2730,706 ns/op
Iteration  69: 2781,341 ns/op
Iteration  70: 2740,258 ns/op
Iteration  71: 2763,825 ns/op
Iteration  72: 2752,339 ns/op
Iteration  73: 2740,369 ns/op
Iteration  74: 2732,841 ns/op
Iteration  75: 2752,108 ns/op
Iteration  76: 2752,636 ns/op
Iteration  77: 2738,237 ns/op
Iteration  78: 2739,385 ns/op
Iteration  79: 2733,602 ns/op
Iteration  80: 2737,208 ns/op
Iteration  81: 2731,337 ns/op
Iteration  82: 2733,427 ns/op
Iteration  83: 2742,691 ns/op
Iteration  84: 2746,352 ns/op
Iteration  85: 2738,492 ns/op
Iteration  86: 2754,724 ns/op
Iteration  87: 2737,205 ns/op
Iteration  88: 2736,017 ns/op
Iteration  89: 2735,607 ns/op
Iteration  90: 2750,949 ns/op
Iteration  91: 2736,786 ns/op
Iteration  92: 2749,428 ns/op
Iteration  93: 2735,934 ns/op
Iteration  94: 2732,766 ns/op
Iteration  95: 2747,645 ns/op
Iteration  96: 2735,345 ns/op
Iteration  97: 2730,179 ns/op
Iteration  98: 2733,426 ns/op
Iteration  99: 2749,098 ns/op
Iteration 100: 2741,089 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  2744,679 ±(99.9%) 3,576 ns/op [Average]
  (min, avg, max) = (2730,179, 2744,679, 2781,341), stdev = 10,544
  CI (99.9%): [2741,103, 2748,255] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-20.json  avgt  100  2744,679 ± 3,576  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 415,324 ns/op
# Warmup Iteration   2: 381,830 ns/op
# Warmup Iteration   3: 380,029 ns/op
Iteration   1: 378,166 ns/op
Iteration   2: 378,960 ns/op
Iteration   3: 380,698 ns/op
Iteration   4: 380,134 ns/op
Iteration   5: 381,988 ns/op
Iteration   6: 382,215 ns/op
Iteration   7: 379,907 ns/op
Iteration   8: 378,259 ns/op
Iteration   9: 380,828 ns/op
Iteration  10: 378,334 ns/op
Iteration  11: 379,877 ns/op
Iteration  12: 378,543 ns/op
Iteration  13: 379,457 ns/op
Iteration  14: 379,511 ns/op
Iteration  15: 379,765 ns/op
Iteration  16: 380,833 ns/op
Iteration  17: 379,586 ns/op
Iteration  18: 380,351 ns/op
Iteration  19: 379,506 ns/op
Iteration  20: 381,500 ns/op
Iteration  21: 380,398 ns/op
Iteration  22: 380,298 ns/op
Iteration  23: 382,839 ns/op
Iteration  24: 381,877 ns/op
Iteration  25: 379,463 ns/op
Iteration  26: 386,873 ns/op
Iteration  27: 382,947 ns/op
Iteration  28: 381,094 ns/op
Iteration  29: 384,523 ns/op
Iteration  30: 385,026 ns/op
Iteration  31: 382,694 ns/op
Iteration  32: 381,631 ns/op
Iteration  33: 382,566 ns/op
Iteration  34: 379,616 ns/op
Iteration  35: 380,640 ns/op
Iteration  36: 379,854 ns/op
Iteration  37: 381,269 ns/op
Iteration  38: 382,466 ns/op
Iteration  39: 383,244 ns/op
Iteration  40: 380,770 ns/op
Iteration  41: 379,858 ns/op
Iteration  42: 379,470 ns/op
Iteration  43: 380,331 ns/op
Iteration  44: 379,332 ns/op
Iteration  45: 379,949 ns/op
Iteration  46: 383,771 ns/op
Iteration  47: 383,883 ns/op
Iteration  48: 388,565 ns/op
Iteration  49: 379,635 ns/op
Iteration  50: 383,262 ns/op
Iteration  51: 379,479 ns/op
Iteration  52: 379,681 ns/op
Iteration  53: 381,802 ns/op
Iteration  54: 380,597 ns/op
Iteration  55: 379,554 ns/op
Iteration  56: 379,967 ns/op
Iteration  57: 379,914 ns/op
Iteration  58: 379,793 ns/op
Iteration  59: 380,520 ns/op
Iteration  60: 379,514 ns/op
Iteration  61: 381,592 ns/op
Iteration  62: 382,043 ns/op
Iteration  63: 380,701 ns/op
Iteration  64: 381,628 ns/op
Iteration  65: 379,596 ns/op
Iteration  66: 381,457 ns/op
Iteration  67: 380,591 ns/op
Iteration  68: 390,195 ns/op
Iteration  69: 380,340 ns/op
Iteration  70: 379,029 ns/op
Iteration  71: 380,158 ns/op
Iteration  72: 381,984 ns/op
Iteration  73: 377,209 ns/op
Iteration  74: 378,914 ns/op
Iteration  75: 379,298 ns/op
Iteration  76: 382,689 ns/op
Iteration  77: 383,449 ns/op
Iteration  78: 381,300 ns/op
Iteration  79: 381,502 ns/op
Iteration  80: 378,851 ns/op
Iteration  81: 379,438 ns/op
Iteration  82: 380,345 ns/op
Iteration  83: 382,071 ns/op
Iteration  84: 381,158 ns/op
Iteration  85: 379,231 ns/op
Iteration  86: 379,757 ns/op
Iteration  87: 379,906 ns/op
Iteration  88: 379,058 ns/op
Iteration  89: 379,396 ns/op
Iteration  90: 383,259 ns/op
Iteration  91: 382,126 ns/op
Iteration  92: 379,548 ns/op
Iteration  93: 378,781 ns/op
Iteration  94: 379,924 ns/op
Iteration  95: 380,922 ns/op
Iteration  96: 382,201 ns/op
Iteration  97: 379,282 ns/op
Iteration  98: 379,367 ns/op
Iteration  99: 377,835 ns/op
Iteration 100: 379,257 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  380,828 ±(99.9%) 0,698 ns/op [Average]
  (min, avg, max) = (377,209, 380,828, 390,195), stdev = 2,059
  CI (99.9%): [380,129, 381,526] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)           (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-2.json  avgt  100  380,828 ± 0,698  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 915,668 ns/op
# Warmup Iteration   2: 838,053 ns/op
# Warmup Iteration   3: 845,047 ns/op
Iteration   1: 847,124 ns/op
Iteration   2: 846,890 ns/op
Iteration   3: 848,913 ns/op
Iteration   4: 851,207 ns/op
Iteration   5: 847,914 ns/op
Iteration   6: 851,414 ns/op
Iteration   7: 843,139 ns/op
Iteration   8: 843,009 ns/op
Iteration   9: 847,698 ns/op
Iteration  10: 842,650 ns/op
Iteration  11: 845,764 ns/op
Iteration  12: 843,255 ns/op
Iteration  13: 847,037 ns/op
Iteration  14: 857,635 ns/op
Iteration  15: 844,435 ns/op
Iteration  16: 844,678 ns/op
Iteration  17: 845,004 ns/op
Iteration  18: 847,025 ns/op
Iteration  19: 848,659 ns/op
Iteration  20: 845,660 ns/op
Iteration  21: 854,721 ns/op
Iteration  22: 849,926 ns/op
Iteration  23: 850,919 ns/op
Iteration  24: 843,584 ns/op
Iteration  25: 843,892 ns/op
Iteration  26: 845,499 ns/op
Iteration  27: 842,475 ns/op
Iteration  28: 847,006 ns/op
Iteration  29: 847,156 ns/op
Iteration  30: 842,425 ns/op
Iteration  31: 844,469 ns/op
Iteration  32: 843,720 ns/op
Iteration  33: 845,760 ns/op
Iteration  34: 846,135 ns/op
Iteration  35: 844,993 ns/op
Iteration  36: 844,534 ns/op
Iteration  37: 843,008 ns/op
Iteration  38: 843,715 ns/op
Iteration  39: 852,927 ns/op
Iteration  40: 850,971 ns/op
Iteration  41: 846,145 ns/op
Iteration  42: 847,466 ns/op
Iteration  43: 848,191 ns/op
Iteration  44: 859,571 ns/op
Iteration  45: 852,851 ns/op
Iteration  46: 844,860 ns/op
Iteration  47: 842,394 ns/op
Iteration  48: 843,554 ns/op
Iteration  49: 847,909 ns/op
Iteration  50: 844,893 ns/op
Iteration  51: 856,525 ns/op
Iteration  52: 845,957 ns/op
Iteration  53: 844,889 ns/op
Iteration  54: 846,548 ns/op
Iteration  55: 847,004 ns/op
Iteration  56: 844,673 ns/op
Iteration  57: 845,473 ns/op
Iteration  58: 850,497 ns/op
Iteration  59: 851,817 ns/op
Iteration  60: 845,327 ns/op
Iteration  61: 844,150 ns/op
Iteration  62: 847,515 ns/op
Iteration  63: 849,516 ns/op
Iteration  64: 846,175 ns/op
Iteration  65: 841,974 ns/op
Iteration  66: 849,432 ns/op
Iteration  67: 844,633 ns/op
Iteration  68: 857,875 ns/op
Iteration  69: 843,847 ns/op
Iteration  70: 846,040 ns/op
Iteration  71: 850,018 ns/op
Iteration  72: 847,494 ns/op
Iteration  73: 846,503 ns/op
Iteration  74: 855,310 ns/op
Iteration  75: 847,943 ns/op
Iteration  76: 847,264 ns/op
Iteration  77: 847,766 ns/op
Iteration  78: 843,105 ns/op
Iteration  79: 843,222 ns/op
Iteration  80: 844,371 ns/op
Iteration  81: 847,688 ns/op
Iteration  82: 844,097 ns/op
Iteration  83: 845,276 ns/op
Iteration  84: 859,363 ns/op
Iteration  85: 844,779 ns/op
Iteration  86: 843,675 ns/op
Iteration  87: 843,428 ns/op
Iteration  88: 847,378 ns/op
Iteration  89: 849,607 ns/op
Iteration  90: 845,113 ns/op
Iteration  91: 844,586 ns/op
Iteration  92: 843,601 ns/op
Iteration  93: 844,191 ns/op
Iteration  94: 843,297 ns/op
Iteration  95: 848,864 ns/op
Iteration  96: 860,057 ns/op
Iteration  97: 844,238 ns/op
Iteration  98: 845,548 ns/op
Iteration  99: 843,303 ns/op
Iteration 100: 853,904 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  847,096 ±(99.9%) 1,390 ns/op [Average]
  (min, avg, max) = (841,974, 847,096, 860,057), stdev = 4,097
  CI (99.9%): [845,707, 848,486] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)           (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-6.json  avgt  100  847,096 ± 1,390  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1448,595 ns/op
# Warmup Iteration   2: 1347,038 ns/op
# Warmup Iteration   3: 1352,546 ns/op
Iteration   1: 1348,783 ns/op
Iteration   2: 1348,616 ns/op
Iteration   3: 1344,163 ns/op
Iteration   4: 1358,639 ns/op
Iteration   5: 1357,384 ns/op
Iteration   6: 1343,969 ns/op
Iteration   7: 1345,576 ns/op
Iteration   8: 1366,812 ns/op
Iteration   9: 1354,294 ns/op
Iteration  10: 1344,998 ns/op
Iteration  11: 1372,102 ns/op
Iteration  12: 1346,658 ns/op
Iteration  13: 1349,084 ns/op
Iteration  14: 1344,205 ns/op
Iteration  15: 1342,330 ns/op
Iteration  16: 1345,875 ns/op
Iteration  17: 1346,830 ns/op
Iteration  18: 1351,116 ns/op
Iteration  19: 1351,670 ns/op
Iteration  20: 1350,322 ns/op
Iteration  21: 1357,291 ns/op
Iteration  22: 1354,134 ns/op
Iteration  23: 1346,494 ns/op
Iteration  24: 1346,305 ns/op
Iteration  25: 1356,233 ns/op
Iteration  26: 1352,572 ns/op
Iteration  27: 1346,787 ns/op
Iteration  28: 1340,955 ns/op
Iteration  29: 1351,648 ns/op
Iteration  30: 1350,765 ns/op
Iteration  31: 1347,531 ns/op
Iteration  32: 1365,235 ns/op
Iteration  33: 1344,702 ns/op
Iteration  34: 1354,734 ns/op
Iteration  35: 1347,283 ns/op
Iteration  36: 1348,628 ns/op
Iteration  37: 1346,939 ns/op
Iteration  38: 1348,773 ns/op
Iteration  39: 1358,331 ns/op
Iteration  40: 1359,184 ns/op
Iteration  41: 1344,514 ns/op
Iteration  42: 1348,922 ns/op
Iteration  43: 1346,237 ns/op
Iteration  44: 1346,977 ns/op
Iteration  45: 1350,473 ns/op
Iteration  46: 1341,180 ns/op
Iteration  47: 1347,855 ns/op
Iteration  48: 1350,391 ns/op
Iteration  49: 1351,328 ns/op
Iteration  50: 1351,989 ns/op
Iteration  51: 1347,251 ns/op
Iteration  52: 1354,794 ns/op
Iteration  53: 1353,117 ns/op
Iteration  54: 1352,530 ns/op
Iteration  55: 1342,679 ns/op
Iteration  56: 1359,442 ns/op
Iteration  57: 1344,373 ns/op
Iteration  58: 1347,075 ns/op
Iteration  59: 1352,091 ns/op
Iteration  60: 1350,822 ns/op
Iteration  61: 1354,977 ns/op
Iteration  62: 1348,287 ns/op
Iteration  63: 1356,610 ns/op
Iteration  64: 1353,607 ns/op
Iteration  65: 1361,438 ns/op
Iteration  66: 1354,614 ns/op
Iteration  67: 1356,796 ns/op
Iteration  68: 1344,880 ns/op
Iteration  69: 1352,539 ns/op
Iteration  70: 1355,670 ns/op
Iteration  71: 1346,061 ns/op
Iteration  72: 1347,524 ns/op
Iteration  73: 1358,892 ns/op
Iteration  74: 1352,480 ns/op
Iteration  75: 1357,000 ns/op
Iteration  76: 1363,328 ns/op
Iteration  77: 1346,029 ns/op
Iteration  78: 1345,528 ns/op
Iteration  79: 1343,955 ns/op
Iteration  80: 1344,763 ns/op
Iteration  81: 1342,420 ns/op
Iteration  82: 1345,984 ns/op
Iteration  83: 1346,013 ns/op
Iteration  84: 1355,634 ns/op
Iteration  85: 1338,930 ns/op
Iteration  86: 1347,599 ns/op
Iteration  87: 1356,680 ns/op
Iteration  88: 1373,603 ns/op
Iteration  89: 1341,330 ns/op
Iteration  90: 1343,956 ns/op
Iteration  91: 1355,398 ns/op
Iteration  92: 1349,891 ns/op
Iteration  93: 1350,450 ns/op
Iteration  94: 1354,917 ns/op
Iteration  95: 1353,092 ns/op
Iteration  96: 1342,941 ns/op
Iteration  97: 1348,185 ns/op
Iteration  98: 1362,601 ns/op
Iteration  99: 1350,410 ns/op
Iteration 100: 1347,771 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  1350,748 ±(99.9%) 2,214 ns/op [Average]
  (min, avg, max) = (1338,930, 1350,748, 1373,603), stdev = 6,527
  CI (99.9%): [1348,534, 1352,962] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)            (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-10.json  avgt  100  1350,748 ± 2,214  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 3442,624 ns/op
# Warmup Iteration   2: 3164,647 ns/op
# Warmup Iteration   3: 3216,816 ns/op
Iteration   1: 3220,966 ns/op
Iteration   2: 3218,482 ns/op
Iteration   3: 3220,888 ns/op
Iteration   4: 3194,089 ns/op
Iteration   5: 3199,086 ns/op
Iteration   6: 3215,708 ns/op
Iteration   7: 3243,555 ns/op
Iteration   8: 3234,870 ns/op
Iteration   9: 3213,718 ns/op
Iteration  10: 3202,822 ns/op
Iteration  11: 3208,427 ns/op
Iteration  12: 3202,446 ns/op
Iteration  13: 3209,000 ns/op
Iteration  14: 3207,118 ns/op
Iteration  15: 3243,584 ns/op
Iteration  16: 3221,365 ns/op
Iteration  17: 3243,174 ns/op
Iteration  18: 3270,952 ns/op
Iteration  19: 3237,537 ns/op
Iteration  20: 3223,639 ns/op
Iteration  21: 3208,486 ns/op
Iteration  22: 3220,025 ns/op
Iteration  23: 3226,440 ns/op
Iteration  24: 3226,613 ns/op
Iteration  25: 3211,386 ns/op
Iteration  26: 3218,775 ns/op
Iteration  27: 3209,458 ns/op
Iteration  28: 3204,573 ns/op
Iteration  29: 3210,932 ns/op
Iteration  30: 3234,495 ns/op
Iteration  31: 3216,292 ns/op
Iteration  32: 3281,045 ns/op
Iteration  33: 3233,684 ns/op
Iteration  34: 3286,681 ns/op
Iteration  35: 3248,915 ns/op
Iteration  36: 3229,012 ns/op
Iteration  37: 3218,788 ns/op
Iteration  38: 3264,778 ns/op
Iteration  39: 3252,425 ns/op
Iteration  40: 3211,639 ns/op
Iteration  41: 3228,942 ns/op
Iteration  42: 3333,912 ns/op
Iteration  43: 3208,167 ns/op
Iteration  44: 3220,087 ns/op
Iteration  45: 3217,884 ns/op
Iteration  46: 3218,971 ns/op
Iteration  47: 3216,672 ns/op
Iteration  48: 3211,869 ns/op
Iteration  49: 3211,750 ns/op
Iteration  50: 3233,095 ns/op
Iteration  51: 3277,491 ns/op
Iteration  52: 3227,904 ns/op
Iteration  53: 3263,575 ns/op
Iteration  54: 3216,649 ns/op
Iteration  55: 3245,756 ns/op
Iteration  56: 3206,868 ns/op
Iteration  57: 3214,517 ns/op
Iteration  58: 3213,039 ns/op
Iteration  59: 3229,691 ns/op
Iteration  60: 3260,465 ns/op
Iteration  61: 3227,029 ns/op
Iteration  62: 3227,037 ns/op
Iteration  63: 3209,300 ns/op
Iteration  64: 3259,016 ns/op
Iteration  65: 3208,629 ns/op
Iteration  66: 3229,020 ns/op
Iteration  67: 3216,630 ns/op
Iteration  68: 3216,851 ns/op
Iteration  69: 3214,329 ns/op
Iteration  70: 3307,999 ns/op
Iteration  71: 3265,260 ns/op
Iteration  72: 3215,780 ns/op
Iteration  73: 3212,978 ns/op
Iteration  74: 3218,426 ns/op
Iteration  75: 3216,880 ns/op
Iteration  76: 3265,849 ns/op
Iteration  77: 3247,977 ns/op
Iteration  78: 3211,756 ns/op
Iteration  79: 3214,144 ns/op
Iteration  80: 3223,284 ns/op
Iteration  81: 3226,604 ns/op
Iteration  82: 3229,650 ns/op
Iteration  83: 3213,619 ns/op
Iteration  84: 3228,473 ns/op
Iteration  85: 3213,534 ns/op
Iteration  86: 3213,759 ns/op
Iteration  87: 3217,188 ns/op
Iteration  88: 3225,570 ns/op
Iteration  89: 3223,354 ns/op
Iteration  90: 3306,337 ns/op
Iteration  91: 3207,890 ns/op
Iteration  92: 3260,688 ns/op
Iteration  93: 3236,068 ns/op
Iteration  94: 3250,757 ns/op
Iteration  95: 3229,069 ns/op
Iteration  96: 3221,024 ns/op
Iteration  97: 3219,374 ns/op
Iteration  98: 3218,997 ns/op
Iteration  99: 3229,514 ns/op
Iteration 100: 3217,595 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  3229,004 ±(99.9%) 8,319 ns/op [Average]
  (min, avg, max) = (3194,089, 3229,004, 3333,912), stdev = 24,528
  CI (99.9%): [3220,685, 3237,323] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)            (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-20.json  avgt  100  3229,004 ± 8,319  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 377,315 ns/op
# Warmup Iteration   2: 359,482 ns/op
# Warmup Iteration   3: 357,579 ns/op
Iteration   1: 354,898 ns/op
Iteration   2: 355,322 ns/op
Iteration   3: 354,775 ns/op
Iteration   4: 354,535 ns/op
Iteration   5: 356,757 ns/op
Iteration   6: 355,321 ns/op
Iteration   7: 359,703 ns/op
Iteration   8: 355,468 ns/op
Iteration   9: 354,535 ns/op
Iteration  10: 356,793 ns/op
Iteration  11: 354,809 ns/op
Iteration  12: 359,086 ns/op
Iteration  13: 358,079 ns/op
Iteration  14: 358,303 ns/op
Iteration  15: 353,699 ns/op
Iteration  16: 355,119 ns/op
Iteration  17: 357,134 ns/op
Iteration  18: 354,070 ns/op
Iteration  19: 355,210 ns/op
Iteration  20: 359,055 ns/op
Iteration  21: 354,094 ns/op
Iteration  22: 354,519 ns/op
Iteration  23: 355,849 ns/op
Iteration  24: 355,818 ns/op
Iteration  25: 354,058 ns/op
Iteration  26: 355,270 ns/op
Iteration  27: 354,513 ns/op
Iteration  28: 356,572 ns/op
Iteration  29: 356,218 ns/op
Iteration  30: 360,228 ns/op
Iteration  31: 353,925 ns/op
Iteration  32: 358,193 ns/op
Iteration  33: 354,689 ns/op
Iteration  34: 354,093 ns/op
Iteration  35: 354,379 ns/op
Iteration  36: 356,279 ns/op
Iteration  37: 355,134 ns/op
Iteration  38: 354,110 ns/op
Iteration  39: 356,893 ns/op
Iteration  40: 356,794 ns/op
Iteration  41: 357,141 ns/op
Iteration  42: 354,091 ns/op
Iteration  43: 357,916 ns/op
Iteration  44: 357,925 ns/op
Iteration  45: 359,689 ns/op
Iteration  46: 354,633 ns/op
Iteration  47: 354,281 ns/op
Iteration  48: 367,688 ns/op
Iteration  49: 356,981 ns/op
Iteration  50: 354,341 ns/op
Iteration  51: 356,453 ns/op
Iteration  52: 364,304 ns/op
Iteration  53: 354,175 ns/op
Iteration  54: 356,040 ns/op
Iteration  55: 357,949 ns/op
Iteration  56: 354,135 ns/op
Iteration  57: 365,584 ns/op
Iteration  58: 360,270 ns/op
Iteration  59: 354,514 ns/op
Iteration  60: 355,750 ns/op
Iteration  61: 357,845 ns/op
Iteration  62: 356,478 ns/op
Iteration  63: 355,565 ns/op
Iteration  64: 353,946 ns/op
Iteration  65: 353,962 ns/op
Iteration  66: 358,500 ns/op
Iteration  67: 356,213 ns/op
Iteration  68: 356,225 ns/op
Iteration  69: 355,236 ns/op
Iteration  70: 354,688 ns/op
Iteration  71: 354,331 ns/op
Iteration  72: 357,521 ns/op
Iteration  73: 356,540 ns/op
Iteration  74: 355,857 ns/op
Iteration  75: 354,409 ns/op
Iteration  76: 354,247 ns/op
Iteration  77: 358,167 ns/op
Iteration  78: 361,916 ns/op
Iteration  79: 353,995 ns/op
Iteration  80: 353,847 ns/op
Iteration  81: 356,014 ns/op
Iteration  82: 355,939 ns/op
Iteration  83: 355,298 ns/op
Iteration  84: 356,466 ns/op
Iteration  85: 354,291 ns/op
Iteration  86: 355,709 ns/op
Iteration  87: 353,996 ns/op
Iteration  88: 354,667 ns/op
Iteration  89: 354,222 ns/op
Iteration  90: 354,137 ns/op
Iteration  91: 354,398 ns/op
Iteration  92: 353,779 ns/op
Iteration  93: 356,228 ns/op
Iteration  94: 357,272 ns/op
Iteration  95: 357,256 ns/op
Iteration  96: 354,679 ns/op
Iteration  97: 354,409 ns/op
Iteration  98: 354,223 ns/op
Iteration  99: 356,056 ns/op
Iteration 100: 353,827 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  356,105 ±(99.9%) 0,835 ns/op [Average]
  (min, avg, max) = (353,699, 356,105, 367,688), stdev = 2,461
  CI (99.9%): [355,270, 356,940] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                     (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-2.json  avgt  100  356,105 ± 0,835  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 863,786 ns/op
# Warmup Iteration   2: 819,653 ns/op
# Warmup Iteration   3: 823,400 ns/op
Iteration   1: 820,575 ns/op
Iteration   2: 824,154 ns/op
Iteration   3: 830,606 ns/op
Iteration   4: 825,494 ns/op
Iteration   5: 823,143 ns/op
Iteration   6: 825,430 ns/op
Iteration   7: 826,253 ns/op
Iteration   8: 823,730 ns/op
Iteration   9: 822,760 ns/op
Iteration  10: 832,190 ns/op
Iteration  11: 823,078 ns/op
Iteration  12: 817,040 ns/op
Iteration  13: 820,896 ns/op
Iteration  14: 820,305 ns/op
Iteration  15: 820,557 ns/op
Iteration  16: 820,544 ns/op
Iteration  17: 827,359 ns/op
Iteration  18: 828,333 ns/op
Iteration  19: 826,999 ns/op
Iteration  20: 834,598 ns/op
Iteration  21: 821,726 ns/op
Iteration  22: 821,232 ns/op
Iteration  23: 819,948 ns/op
Iteration  24: 820,437 ns/op
Iteration  25: 825,293 ns/op
Iteration  26: 821,179 ns/op
Iteration  27: 821,009 ns/op
Iteration  28: 820,623 ns/op
Iteration  29: 819,082 ns/op
Iteration  30: 827,024 ns/op
Iteration  31: 822,291 ns/op
Iteration  32: 820,506 ns/op
Iteration  33: 834,083 ns/op
Iteration  34: 820,735 ns/op
Iteration  35: 820,688 ns/op
Iteration  36: 825,670 ns/op
Iteration  37: 834,740 ns/op
Iteration  38: 821,558 ns/op
Iteration  39: 824,726 ns/op
Iteration  40: 820,830 ns/op
Iteration  41: 821,416 ns/op
Iteration  42: 824,974 ns/op
Iteration  43: 822,201 ns/op
Iteration  44: 830,373 ns/op
Iteration  45: 821,115 ns/op
Iteration  46: 824,516 ns/op
Iteration  47: 827,133 ns/op
Iteration  48: 827,264 ns/op
Iteration  49: 820,642 ns/op
Iteration  50: 827,901 ns/op
Iteration  51: 819,325 ns/op
Iteration  52: 822,350 ns/op
Iteration  53: 824,262 ns/op
Iteration  54: 823,643 ns/op
Iteration  55: 830,026 ns/op
Iteration  56: 821,214 ns/op
Iteration  57: 829,614 ns/op
Iteration  58: 821,547 ns/op
Iteration  59: 827,660 ns/op
Iteration  60: 825,923 ns/op
Iteration  61: 820,840 ns/op
Iteration  62: 823,756 ns/op
Iteration  63: 820,612 ns/op
Iteration  64: 825,976 ns/op
Iteration  65: 820,898 ns/op
Iteration  66: 819,637 ns/op
Iteration  67: 823,372 ns/op
Iteration  68: 820,370 ns/op
Iteration  69: 822,078 ns/op
Iteration  70: 830,618 ns/op
Iteration  71: 820,824 ns/op
Iteration  72: 824,173 ns/op
Iteration  73: 821,098 ns/op
Iteration  74: 821,104 ns/op
Iteration  75: 823,989 ns/op
Iteration  76: 825,099 ns/op
Iteration  77: 821,366 ns/op
Iteration  78: 822,660 ns/op
Iteration  79: 831,137 ns/op
Iteration  80: 819,806 ns/op
Iteration  81: 820,278 ns/op
Iteration  82: 833,635 ns/op
Iteration  83: 821,822 ns/op
Iteration  84: 822,770 ns/op
Iteration  85: 821,336 ns/op
Iteration  86: 819,987 ns/op
Iteration  87: 819,684 ns/op
Iteration  88: 845,649 ns/op
Iteration  89: 825,533 ns/op
Iteration  90: 822,435 ns/op
Iteration  91: 831,147 ns/op
Iteration  92: 820,275 ns/op
Iteration  93: 821,083 ns/op
Iteration  94: 826,133 ns/op
Iteration  95: 820,833 ns/op
Iteration  96: 821,385 ns/op
Iteration  97: 828,260 ns/op
Iteration  98: 824,428 ns/op
Iteration  99: 825,024 ns/op
Iteration 100: 825,231 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  824,069 ±(99.9%) 1,507 ns/op [Average]
  (min, avg, max) = (817,040, 824,069, 845,649), stdev = 4,444
  CI (99.9%): [822,562, 825,576] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                     (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-6.json  avgt  100  824,069 ± 1,507  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1424,376 ns/op
# Warmup Iteration   2: 1350,963 ns/op
# Warmup Iteration   3: 1357,131 ns/op
Iteration   1: 1339,367 ns/op
Iteration   2: 1341,264 ns/op
Iteration   3: 1342,030 ns/op
Iteration   4: 1367,024 ns/op
Iteration   5: 1345,068 ns/op
Iteration   6: 1344,500 ns/op
Iteration   7: 1352,595 ns/op
Iteration   8: 1372,323 ns/op
Iteration   9: 1368,929 ns/op
Iteration  10: 1343,431 ns/op
Iteration  11: 1337,580 ns/op
Iteration  12: 1345,311 ns/op
Iteration  13: 1349,342 ns/op
Iteration  14: 1348,119 ns/op
Iteration  15: 1341,610 ns/op
Iteration  16: 1348,014 ns/op
Iteration  17: 1346,327 ns/op
Iteration  18: 1365,826 ns/op
Iteration  19: 1343,947 ns/op
Iteration  20: 1333,207 ns/op
Iteration  21: 1352,830 ns/op
Iteration  22: 1339,782 ns/op
Iteration  23: 1356,524 ns/op
Iteration  24: 1341,911 ns/op
Iteration  25: 1345,531 ns/op
Iteration  26: 1351,456 ns/op
Iteration  27: 1339,600 ns/op
Iteration  28: 1349,509 ns/op
Iteration  29: 1362,607 ns/op
Iteration  30: 1346,286 ns/op
Iteration  31: 1337,251 ns/op
Iteration  32: 1338,164 ns/op
Iteration  33: 1340,785 ns/op
Iteration  34: 1341,150 ns/op
Iteration  35: 1342,906 ns/op
Iteration  36: 1348,248 ns/op
Iteration  37: 1356,417 ns/op
Iteration  38: 1339,975 ns/op
Iteration  39: 1342,159 ns/op
Iteration  40: 1339,418 ns/op
Iteration  41: 1345,858 ns/op
Iteration  42: 1339,996 ns/op
Iteration  43: 1337,779 ns/op
Iteration  44: 1364,173 ns/op
Iteration  45: 1345,151 ns/op
Iteration  46: 1360,231 ns/op
Iteration  47: 1357,584 ns/op
Iteration  48: 1357,923 ns/op
Iteration  49: 1348,756 ns/op
Iteration  50: 1362,258 ns/op
Iteration  51: 1356,989 ns/op
Iteration  52: 1340,684 ns/op
Iteration  53: 1343,261 ns/op
Iteration  54: 1354,730 ns/op
Iteration  55: 1347,186 ns/op
Iteration  56: 1341,953 ns/op
Iteration  57: 1346,876 ns/op
Iteration  58: 1364,830 ns/op
Iteration  59: 1347,967 ns/op
Iteration  60: 1362,353 ns/op
Iteration  61: 1360,879 ns/op
Iteration  62: 1354,397 ns/op
Iteration  63: 1347,605 ns/op
Iteration  64: 1354,002 ns/op
Iteration  65: 1353,815 ns/op
Iteration  66: 1359,419 ns/op
Iteration  67: 1347,353 ns/op
Iteration  68: 1352,980 ns/op
Iteration  69: 1344,832 ns/op
Iteration  70: 1334,589 ns/op
Iteration  71: 1343,495 ns/op
Iteration  72: 1344,303 ns/op
Iteration  73: 1331,241 ns/op
Iteration  74: 1343,480 ns/op
Iteration  75: 1345,328 ns/op
Iteration  76: 1340,864 ns/op
Iteration  77: 1352,626 ns/op
Iteration  78: 1346,933 ns/op
Iteration  79: 1347,355 ns/op
Iteration  80: 1356,109 ns/op
Iteration  81: 1338,288 ns/op
Iteration  82: 1343,921 ns/op
Iteration  83: 1355,655 ns/op
Iteration  84: 1336,932 ns/op
Iteration  85: 1345,081 ns/op
Iteration  86: 1342,276 ns/op
Iteration  87: 1348,680 ns/op
Iteration  88: 1337,788 ns/op
Iteration  89: 1333,441 ns/op
Iteration  90: 1351,257 ns/op
Iteration  91: 1354,406 ns/op
Iteration  92: 1363,732 ns/op
Iteration  93: 1348,578 ns/op
Iteration  94: 1337,015 ns/op
Iteration  95: 1360,632 ns/op
Iteration  96: 1335,350 ns/op
Iteration  97: 1346,739 ns/op
Iteration  98: 1356,106 ns/op
Iteration  99: 1342,085 ns/op
Iteration 100: 1360,332 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  1348,148 ±(99.9%) 3,025 ns/op [Average]
  (min, avg, max) = (1331,241, 1348,148, 1372,323), stdev = 8,919
  CI (99.9%): [1345,123, 1351,172] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                      (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-10.json  avgt  100  1348,148 ± 3,025  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 3485,011 ns/op
# Warmup Iteration   2: 3274,149 ns/op
# Warmup Iteration   3: 3297,866 ns/op
Iteration   1: 3308,310 ns/op
Iteration   2: 3292,961 ns/op
Iteration   3: 3356,429 ns/op
Iteration   4: 3288,412 ns/op
Iteration   5: 3285,418 ns/op
Iteration   6: 3357,393 ns/op
Iteration   7: 3312,765 ns/op
Iteration   8: 3290,736 ns/op
Iteration   9: 3290,331 ns/op
Iteration  10: 3281,405 ns/op
Iteration  11: 3305,174 ns/op
Iteration  12: 3289,611 ns/op
Iteration  13: 3284,602 ns/op
Iteration  14: 3382,110 ns/op
Iteration  15: 3319,538 ns/op
Iteration  16: 3292,213 ns/op
Iteration  17: 3320,774 ns/op
Iteration  18: 3314,156 ns/op
Iteration  19: 3347,381 ns/op
Iteration  20: 3341,760 ns/op
Iteration  21: 3308,051 ns/op
Iteration  22: 3292,694 ns/op
Iteration  23: 3285,624 ns/op
Iteration  24: 3316,758 ns/op
Iteration  25: 3418,097 ns/op
Iteration  26: 3308,594 ns/op
Iteration  27: 3290,275 ns/op
Iteration  28: 3291,581 ns/op
Iteration  29: 3311,083 ns/op
Iteration  30: 3285,680 ns/op
Iteration  31: 3280,721 ns/op
Iteration  32: 3291,964 ns/op
Iteration  33: 3300,175 ns/op
Iteration  34: 3297,620 ns/op
Iteration  35: 3289,434 ns/op
Iteration  36: 3308,442 ns/op
Iteration  37: 3308,643 ns/op
Iteration  38: 3305,370 ns/op
Iteration  39: 3354,054 ns/op
Iteration  40: 3291,753 ns/op
Iteration  41: 3340,622 ns/op
Iteration  42: 3286,054 ns/op
Iteration  43: 3306,320 ns/op
Iteration  44: 3310,199 ns/op
Iteration  45: 3308,076 ns/op
Iteration  46: 3322,258 ns/op
Iteration  47: 3326,161 ns/op
Iteration  48: 3291,671 ns/op
Iteration  49: 3310,865 ns/op
Iteration  50: 3332,021 ns/op
Iteration  51: 3284,430 ns/op
Iteration  52: 3303,544 ns/op
Iteration  53: 3295,204 ns/op
Iteration  54: 3357,559 ns/op
Iteration  55: 3326,553 ns/op
Iteration  56: 3285,589 ns/op
Iteration  57: 3309,007 ns/op
Iteration  58: 3290,849 ns/op
Iteration  59: 3287,207 ns/op
Iteration  60: 3287,512 ns/op
Iteration  61: 3303,923 ns/op
Iteration  62: 3312,225 ns/op
Iteration  63: 3286,917 ns/op
Iteration  64: 3304,377 ns/op
Iteration  65: 3347,431 ns/op
Iteration  66: 3316,870 ns/op
Iteration  67: 3319,030 ns/op
Iteration  68: 3357,820 ns/op
Iteration  69: 3342,776 ns/op
Iteration  70: 3289,011 ns/op
Iteration  71: 3292,143 ns/op
Iteration  72: 3282,925 ns/op
Iteration  73: 3311,910 ns/op
Iteration  74: 3306,244 ns/op
Iteration  75: 3294,948 ns/op
Iteration  76: 3292,917 ns/op
Iteration  77: 3279,540 ns/op
Iteration  78: 3295,215 ns/op
Iteration  79: 3288,656 ns/op
Iteration  80: 3291,851 ns/op
Iteration  81: 3287,637 ns/op
Iteration  82: 3314,242 ns/op
Iteration  83: 3297,629 ns/op
Iteration  84: 3312,993 ns/op
Iteration  85: 3284,874 ns/op
Iteration  86: 3286,700 ns/op
Iteration  87: 3305,323 ns/op
Iteration  88: 3291,034 ns/op
Iteration  89: 3287,246 ns/op
Iteration  90: 3285,026 ns/op
Iteration  91: 3286,548 ns/op
Iteration  92: 3312,530 ns/op
Iteration  93: 3302,429 ns/op
Iteration  94: 3288,743 ns/op
Iteration  95: 3293,251 ns/op
Iteration  96: 3303,314 ns/op
Iteration  97: 3306,359 ns/op
Iteration  98: 3304,867 ns/op
Iteration  99: 3283,175 ns/op
Iteration 100: 3346,393 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  3306,568 ±(99.9%) 8,210 ns/op [Average]
  (min, avg, max) = (3279,540, 3306,568, 3418,097), stdev = 24,208
  CI (99.9%): [3298,358, 3314,779] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                      (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-20.json  avgt  100  3306,568 ± 8,210  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 401,457 ns/op
# Warmup Iteration   2: 375,492 ns/op
# Warmup Iteration   3: 375,650 ns/op
Iteration   1: 374,706 ns/op
Iteration   2: 379,205 ns/op
Iteration   3: 381,580 ns/op
Iteration   4: 377,522 ns/op
Iteration   5: 376,335 ns/op
Iteration   6: 375,611 ns/op
Iteration   7: 378,725 ns/op
Iteration   8: 383,993 ns/op
Iteration   9: 376,802 ns/op
Iteration  10: 376,747 ns/op
Iteration  11: 377,639 ns/op
Iteration  12: 375,713 ns/op
Iteration  13: 377,301 ns/op
Iteration  14: 378,301 ns/op
Iteration  15: 377,581 ns/op
Iteration  16: 380,001 ns/op
Iteration  17: 378,153 ns/op
Iteration  18: 378,839 ns/op
Iteration  19: 376,036 ns/op
Iteration  20: 377,838 ns/op
Iteration  21: 376,362 ns/op
Iteration  22: 379,044 ns/op
Iteration  23: 375,588 ns/op
Iteration  24: 379,229 ns/op
Iteration  25: 376,437 ns/op
Iteration  26: 375,933 ns/op
Iteration  27: 377,395 ns/op
Iteration  28: 376,872 ns/op
Iteration  29: 376,889 ns/op
Iteration  30: 378,113 ns/op
Iteration  31: 376,380 ns/op
Iteration  32: 375,713 ns/op
Iteration  33: 375,744 ns/op
Iteration  34: 375,840 ns/op
Iteration  35: 375,641 ns/op
Iteration  36: 377,268 ns/op
Iteration  37: 377,841 ns/op
Iteration  38: 375,723 ns/op
Iteration  39: 375,858 ns/op
Iteration  40: 378,928 ns/op
Iteration  41: 375,892 ns/op
Iteration  42: 376,837 ns/op
Iteration  43: 375,086 ns/op
Iteration  44: 376,440 ns/op
Iteration  45: 378,045 ns/op
Iteration  46: 375,628 ns/op
Iteration  47: 375,484 ns/op
Iteration  48: 375,998 ns/op
Iteration  49: 378,251 ns/op
Iteration  50: 375,891 ns/op
Iteration  51: 375,795 ns/op
Iteration  52: 377,381 ns/op
Iteration  53: 380,092 ns/op
Iteration  54: 376,206 ns/op
Iteration  55: 379,248 ns/op
Iteration  56: 376,625 ns/op
Iteration  57: 375,710 ns/op
Iteration  58: 376,195 ns/op
Iteration  59: 376,274 ns/op
Iteration  60: 377,659 ns/op
Iteration  61: 375,857 ns/op
Iteration  62: 376,415 ns/op
Iteration  63: 376,978 ns/op
Iteration  64: 379,586 ns/op
Iteration  65: 384,304 ns/op
Iteration  66: 375,673 ns/op
Iteration  67: 377,236 ns/op
Iteration  68: 377,694 ns/op
Iteration  69: 375,475 ns/op
Iteration  70: 380,453 ns/op
Iteration  71: 375,438 ns/op
Iteration  72: 375,908 ns/op
Iteration  73: 376,904 ns/op
Iteration  74: 375,287 ns/op
Iteration  75: 375,566 ns/op
Iteration  76: 380,698 ns/op
Iteration  77: 376,986 ns/op
Iteration  78: 377,056 ns/op
Iteration  79: 376,118 ns/op
Iteration  80: 377,345 ns/op
Iteration  81: 377,758 ns/op
Iteration  82: 375,731 ns/op
Iteration  83: 377,184 ns/op
Iteration  84: 376,239 ns/op
Iteration  85: 378,852 ns/op
Iteration  86: 375,869 ns/op
Iteration  87: 375,803 ns/op
Iteration  88: 380,437 ns/op
Iteration  89: 380,493 ns/op
Iteration  90: 378,656 ns/op
Iteration  91: 375,941 ns/op
Iteration  92: 375,323 ns/op
Iteration  93: 375,848 ns/op
Iteration  94: 376,494 ns/op
Iteration  95: 375,495 ns/op
Iteration  96: 376,677 ns/op
Iteration  97: 375,998 ns/op
Iteration  98: 376,818 ns/op
Iteration  99: 376,134 ns/op
Iteration 100: 375,793 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  377,147 ±(99.9%) 0,605 ns/op [Average]
  (min, avg, max) = (374,706, 377,147, 384,304), stdev = 1,783
  CI (99.9%): [376,542, 377,751] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)               (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-2.json  avgt  100  377,147 ± 0,605  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 930,262 ns/op
# Warmup Iteration   2: 869,875 ns/op
# Warmup Iteration   3: 879,119 ns/op
Iteration   1: 880,195 ns/op
Iteration   2: 869,009 ns/op
Iteration   3: 870,072 ns/op
Iteration   4: 870,885 ns/op
Iteration   5: 870,521 ns/op
Iteration   6: 875,104 ns/op
Iteration   7: 873,501 ns/op
Iteration   8: 893,375 ns/op
Iteration   9: 873,891 ns/op
Iteration  10: 870,988 ns/op
Iteration  11: 867,928 ns/op
Iteration  12: 875,453 ns/op
Iteration  13: 878,328 ns/op
Iteration  14: 878,787 ns/op
Iteration  15: 879,465 ns/op
Iteration  16: 874,089 ns/op
Iteration  17: 870,546 ns/op
Iteration  18: 869,772 ns/op
Iteration  19: 874,226 ns/op
Iteration  20: 871,265 ns/op
Iteration  21: 875,159 ns/op
Iteration  22: 878,053 ns/op
Iteration  23: 878,253 ns/op
Iteration  24: 875,539 ns/op
Iteration  25: 873,006 ns/op
Iteration  26: 871,502 ns/op
Iteration  27: 875,011 ns/op
Iteration  28: 875,234 ns/op
Iteration  29: 872,736 ns/op
Iteration  30: 879,886 ns/op
Iteration  31: 870,683 ns/op
Iteration  32: 876,052 ns/op
Iteration  33: 881,362 ns/op
Iteration  34: 870,741 ns/op
Iteration  35: 870,333 ns/op
Iteration  36: 871,028 ns/op
Iteration  37: 874,990 ns/op
Iteration  38: 868,769 ns/op
Iteration  39: 870,130 ns/op
Iteration  40: 871,377 ns/op
Iteration  41: 877,106 ns/op
Iteration  42: 871,988 ns/op
Iteration  43: 870,216 ns/op
Iteration  44: 871,343 ns/op
Iteration  45: 873,294 ns/op
Iteration  46: 875,746 ns/op
Iteration  47: 874,152 ns/op
Iteration  48: 876,397 ns/op
Iteration  49: 874,663 ns/op
Iteration  50: 879,637 ns/op
Iteration  51: 872,903 ns/op
Iteration  52: 876,708 ns/op
Iteration  53: 876,087 ns/op
Iteration  54: 877,518 ns/op
Iteration  55: 870,299 ns/op
Iteration  56: 874,842 ns/op
Iteration  57: 870,621 ns/op
Iteration  58: 877,850 ns/op
Iteration  59: 871,117 ns/op
Iteration  60: 870,366 ns/op
Iteration  61: 869,386 ns/op
Iteration  62: 879,332 ns/op
Iteration  63: 877,091 ns/op
Iteration  64: 885,682 ns/op
Iteration  65: 872,850 ns/op
Iteration  66: 870,984 ns/op
Iteration  67: 881,455 ns/op
Iteration  68: 871,525 ns/op
Iteration  69: 874,512 ns/op
Iteration  70: 870,901 ns/op
Iteration  71: 876,511 ns/op
Iteration  72: 873,576 ns/op
Iteration  73: 870,411 ns/op
Iteration  74: 870,915 ns/op
Iteration  75: 869,861 ns/op
Iteration  76: 883,590 ns/op
Iteration  77: 869,472 ns/op
Iteration  78: 870,666 ns/op
Iteration  79: 876,172 ns/op
Iteration  80: 869,724 ns/op
Iteration  81: 869,712 ns/op
Iteration  82: 870,672 ns/op
Iteration  83: 876,032 ns/op
Iteration  84: 876,417 ns/op
Iteration  85: 869,676 ns/op
Iteration  86: 874,792 ns/op
Iteration  87: 871,387 ns/op
Iteration  88: 873,864 ns/op
Iteration  89: 876,211 ns/op
Iteration  90: 875,185 ns/op
Iteration  91: 885,021 ns/op
Iteration  92: 870,824 ns/op
Iteration  93: 869,233 ns/op
Iteration  94: 876,162 ns/op
Iteration  95: 871,042 ns/op
Iteration  96: 869,067 ns/op
Iteration  97: 875,452 ns/op
Iteration  98: 874,419 ns/op
Iteration  99: 872,080 ns/op
Iteration 100: 869,561 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  874,015 ±(99.9%) 1,444 ns/op [Average]
  (min, avg, max) = (867,928, 874,015, 893,375), stdev = 4,258
  CI (99.9%): [872,571, 875,459] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)               (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-6.json  avgt  100  874,015 ± 1,444  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1394,642 ns/op
# Warmup Iteration   2: 1315,300 ns/op
# Warmup Iteration   3: 1324,606 ns/op
Iteration   1: 1320,608 ns/op
Iteration   2: 1322,812 ns/op
Iteration   3: 1321,713 ns/op
Iteration   4: 1319,886 ns/op
Iteration   5: 1333,004 ns/op
Iteration   6: 1328,073 ns/op
Iteration   7: 1326,530 ns/op
Iteration   8: 1327,560 ns/op
Iteration   9: 1321,884 ns/op
Iteration  10: 1329,916 ns/op
Iteration  11: 1325,749 ns/op
Iteration  12: 1323,146 ns/op
Iteration  13: 1329,824 ns/op
Iteration  14: 1322,164 ns/op
Iteration  15: 1325,771 ns/op
Iteration  16: 1322,200 ns/op
Iteration  17: 1324,277 ns/op
Iteration  18: 1331,919 ns/op
Iteration  19: 1326,105 ns/op
Iteration  20: 1322,902 ns/op
Iteration  21: 1323,299 ns/op
Iteration  22: 1324,584 ns/op
Iteration  23: 1327,839 ns/op
Iteration  24: 1324,962 ns/op
Iteration  25: 1323,572 ns/op
Iteration  26: 1324,924 ns/op
Iteration  27: 1323,729 ns/op
Iteration  28: 1323,654 ns/op
Iteration  29: 1322,420 ns/op
Iteration  30: 1326,360 ns/op
Iteration  31: 1322,077 ns/op
Iteration  32: 1325,164 ns/op
Iteration  33: 1332,366 ns/op
Iteration  34: 1327,128 ns/op
Iteration  35: 1328,126 ns/op
Iteration  36: 1339,411 ns/op
Iteration  37: 1340,554 ns/op
Iteration  38: 1329,721 ns/op
Iteration  39: 1327,284 ns/op
Iteration  40: 1330,935 ns/op
Iteration  41: 1324,292 ns/op
Iteration  42: 1323,622 ns/op
Iteration  43: 1327,823 ns/op
Iteration  44: 1331,609 ns/op
Iteration  45: 1325,762 ns/op
Iteration  46: 1324,508 ns/op
Iteration  47: 1326,288 ns/op
Iteration  48: 1324,814 ns/op
Iteration  49: 1332,699 ns/op
Iteration  50: 1331,297 ns/op
Iteration  51: 1322,412 ns/op
Iteration  52: 1333,786 ns/op
Iteration  53: 1322,112 ns/op
Iteration  54: 1323,874 ns/op
Iteration  55: 1339,919 ns/op
Iteration  56: 1330,764 ns/op
Iteration  57: 1320,142 ns/op
Iteration  58: 1334,884 ns/op
Iteration  59: 1323,442 ns/op
Iteration  60: 1323,947 ns/op
Iteration  61: 1322,728 ns/op
Iteration  62: 1328,999 ns/op
Iteration  63: 1330,825 ns/op
Iteration  64: 1324,191 ns/op
Iteration  65: 1326,167 ns/op
Iteration  66: 1322,397 ns/op
Iteration  67: 1324,238 ns/op
Iteration  68: 1321,598 ns/op
Iteration  69: 1323,293 ns/op
Iteration  70: 1324,565 ns/op
Iteration  71: 1323,697 ns/op
Iteration  72: 1327,584 ns/op
Iteration  73: 1323,609 ns/op
Iteration  74: 1323,545 ns/op
Iteration  75: 1323,553 ns/op
Iteration  76: 1325,188 ns/op
Iteration  77: 1323,342 ns/op
Iteration  78: 1329,751 ns/op
Iteration  79: 1332,675 ns/op
Iteration  80: 1324,248 ns/op
Iteration  81: 1323,017 ns/op
Iteration  82: 1323,887 ns/op
Iteration  83: 1321,955 ns/op
Iteration  84: 1334,720 ns/op
Iteration  85: 1323,534 ns/op
Iteration  86: 1335,242 ns/op
Iteration  87: 1327,050 ns/op
Iteration  88: 1323,504 ns/op
Iteration  89: 1321,719 ns/op
Iteration  90: 1324,443 ns/op
Iteration  91: 1329,190 ns/op
Iteration  92: 1320,310 ns/op
Iteration  93: 1341,993 ns/op
Iteration  94: 1338,488 ns/op
Iteration  95: 1322,808 ns/op
Iteration  96: 1324,632 ns/op
Iteration  97: 1322,340 ns/op
Iteration  98: 1322,514 ns/op
Iteration  99: 1328,021 ns/op
Iteration 100: 1324,999 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  1326,427 ±(99.9%) 1,622 ns/op [Average]
  (min, avg, max) = (1319,886, 1326,427, 1341,993), stdev = 4,783
  CI (99.9%): [1324,805, 1328,049] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)                (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-10.json  avgt  100  1326,427 ± 1,622  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 2790,496 ns/op
# Warmup Iteration   2: 2628,127 ns/op
# Warmup Iteration   3: 2670,407 ns/op
Iteration   1: 2674,545 ns/op
Iteration   2: 2670,807 ns/op
Iteration   3: 2686,088 ns/op
Iteration   4: 2679,597 ns/op
Iteration   5: 2684,718 ns/op
Iteration   6: 2670,540 ns/op
Iteration   7: 2679,818 ns/op
Iteration   8: 2672,297 ns/op
Iteration   9: 2717,702 ns/op
Iteration  10: 2671,379 ns/op
Iteration  11: 2704,378 ns/op
Iteration  12: 2680,594 ns/op
Iteration  13: 2674,247 ns/op
Iteration  14: 2681,715 ns/op
Iteration  15: 2777,998 ns/op
Iteration  16: 2663,851 ns/op
Iteration  17: 2694,748 ns/op
Iteration  18: 2680,929 ns/op
Iteration  19: 2672,021 ns/op
Iteration  20: 2669,347 ns/op
Iteration  21: 2683,524 ns/op
Iteration  22: 2663,747 ns/op
Iteration  23: 2659,455 ns/op
Iteration  24: 2673,926 ns/op
Iteration  25: 2677,214 ns/op
Iteration  26: 2669,313 ns/op
Iteration  27: 2661,506 ns/op
Iteration  28: 2665,333 ns/op
Iteration  29: 2667,258 ns/op
Iteration  30: 2680,773 ns/op
Iteration  31: 2663,434 ns/op
Iteration  32: 2660,803 ns/op
Iteration  33: 2682,991 ns/op
Iteration  34: 2662,557 ns/op
Iteration  35: 2692,983 ns/op
Iteration  36: 2665,617 ns/op
Iteration  37: 2679,855 ns/op
Iteration  38: 2690,059 ns/op
Iteration  39: 2662,865 ns/op
Iteration  40: 2665,078 ns/op
Iteration  41: 2668,919 ns/op
Iteration  42: 2666,730 ns/op
Iteration  43: 2675,538 ns/op
Iteration  44: 2680,257 ns/op
Iteration  45: 2664,703 ns/op
Iteration  46: 2666,858 ns/op
Iteration  47: 2681,767 ns/op
Iteration  48: 2679,710 ns/op
Iteration  49: 2665,118 ns/op
Iteration  50: 2662,326 ns/op
Iteration  51: 2665,039 ns/op
Iteration  52: 2666,111 ns/op
Iteration  53: 2666,145 ns/op
Iteration  54: 2682,387 ns/op
Iteration  55: 2676,977 ns/op
Iteration  56: 2671,384 ns/op
Iteration  57: 2691,456 ns/op
Iteration  58: 2665,400 ns/op
Iteration  59: 2683,869 ns/op
Iteration  60: 2669,562 ns/op
Iteration  61: 2683,152 ns/op
Iteration  62: 2701,835 ns/op
Iteration  63: 2665,356 ns/op
Iteration  64: 2666,197 ns/op
Iteration  65: 2663,174 ns/op
Iteration  66: 2722,489 ns/op
Iteration  67: 2664,627 ns/op
Iteration  68: 2663,865 ns/op
Iteration  69: 2693,099 ns/op
Iteration  70: 2675,044 ns/op
Iteration  71: 2656,889 ns/op
Iteration  72: 2674,128 ns/op
Iteration  73: 2663,137 ns/op
Iteration  74: 2674,268 ns/op
Iteration  75: 2662,859 ns/op
Iteration  76: 2664,663 ns/op
Iteration  77: 2676,016 ns/op
Iteration  78: 2673,426 ns/op
Iteration  79: 2665,917 ns/op
Iteration  80: 2677,402 ns/op
Iteration  81: 2662,121 ns/op
Iteration  82: 2678,725 ns/op
Iteration  83: 2685,709 ns/op
Iteration  84: 2671,673 ns/op
Iteration  85: 2675,217 ns/op
Iteration  86: 2672,058 ns/op
Iteration  87: 2669,781 ns/op
Iteration  88: 2706,015 ns/op
Iteration  89: 2673,610 ns/op
Iteration  90: 2676,949 ns/op
Iteration  91: 2661,274 ns/op
Iteration  92: 2693,595 ns/op
Iteration  93: 2692,747 ns/op
Iteration  94: 2713,047 ns/op
Iteration  95: 2664,984 ns/op
Iteration  96: 2669,150 ns/op
Iteration  97: 2659,835 ns/op
Iteration  98: 2666,476 ns/op
Iteration  99: 2670,622 ns/op
Iteration 100: 2661,941 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  2675,989 ±(99.9%) 5,589 ns/op [Average]
  (min, avg, max) = (2656,889, 2675,989, 2777,998), stdev = 16,479
  CI (99.9%): [2670,400, 2681,578] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)                (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-20.json  avgt  100  2675,989 ± 5,589  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 402,895 ns/op
# Warmup Iteration   2: 375,964 ns/op
# Warmup Iteration   3: 375,852 ns/op
Iteration   1: 376,956 ns/op
Iteration   2: 375,003 ns/op
Iteration   3: 381,240 ns/op
Iteration   4: 387,039 ns/op
Iteration   5: 374,688 ns/op
Iteration   6: 374,653 ns/op
Iteration   7: 374,976 ns/op
Iteration   8: 377,888 ns/op
Iteration   9: 374,575 ns/op
Iteration  10: 374,154 ns/op
Iteration  11: 376,069 ns/op
Iteration  12: 374,423 ns/op
Iteration  13: 381,606 ns/op
Iteration  14: 375,330 ns/op
Iteration  15: 379,696 ns/op
Iteration  16: 375,220 ns/op
Iteration  17: 382,909 ns/op
Iteration  18: 375,314 ns/op
Iteration  19: 375,464 ns/op
Iteration  20: 375,282 ns/op
Iteration  21: 375,521 ns/op
Iteration  22: 374,967 ns/op
Iteration  23: 374,562 ns/op
Iteration  24: 375,103 ns/op
Iteration  25: 374,797 ns/op
Iteration  26: 375,065 ns/op
Iteration  27: 380,073 ns/op
Iteration  28: 376,999 ns/op
Iteration  29: 375,325 ns/op
Iteration  30: 375,090 ns/op
Iteration  31: 375,780 ns/op
Iteration  32: 382,748 ns/op
Iteration  33: 375,892 ns/op
Iteration  34: 374,930 ns/op
Iteration  35: 375,447 ns/op
Iteration  36: 376,517 ns/op
Iteration  37: 375,928 ns/op
Iteration  38: 373,755 ns/op
Iteration  39: 375,021 ns/op
Iteration  40: 384,195 ns/op
Iteration  41: 379,502 ns/op
Iteration  42: 377,530 ns/op
Iteration  43: 374,814 ns/op
Iteration  44: 376,853 ns/op
Iteration  45: 375,173 ns/op
Iteration  46: 378,275 ns/op
Iteration  47: 379,444 ns/op
Iteration  48: 376,680 ns/op
Iteration  49: 374,569 ns/op
Iteration  50: 389,953 ns/op
Iteration  51: 376,044 ns/op
Iteration  52: 374,934 ns/op
Iteration  53: 378,354 ns/op
Iteration  54: 377,302 ns/op
Iteration  55: 376,309 ns/op
Iteration  56: 376,349 ns/op
Iteration  57: 375,789 ns/op
Iteration  58: 376,191 ns/op
Iteration  59: 374,730 ns/op
Iteration  60: 376,814 ns/op
Iteration  61: 376,677 ns/op
Iteration  62: 380,252 ns/op
Iteration  63: 382,254 ns/op
Iteration  64: 374,928 ns/op
Iteration  65: 375,597 ns/op
Iteration  66: 384,875 ns/op
Iteration  67: 383,866 ns/op
Iteration  68: 375,604 ns/op
Iteration  69: 374,847 ns/op
Iteration  70: 376,962 ns/op
Iteration  71: 375,334 ns/op
Iteration  72: 374,824 ns/op
Iteration  73: 375,642 ns/op
Iteration  74: 378,055 ns/op
Iteration  75: 374,311 ns/op
Iteration  76: 376,807 ns/op
Iteration  77: 374,828 ns/op
Iteration  78: 375,759 ns/op
Iteration  79: 377,359 ns/op
Iteration  80: 374,963 ns/op
Iteration  81: 374,974 ns/op
Iteration  82: 374,991 ns/op
Iteration  83: 375,406 ns/op
Iteration  84: 376,426 ns/op
Iteration  85: 381,311 ns/op
Iteration  86: 379,077 ns/op
Iteration  87: 375,373 ns/op
Iteration  88: 376,387 ns/op
Iteration  89: 383,661 ns/op
Iteration  90: 375,416 ns/op
Iteration  91: 374,634 ns/op
Iteration  92: 377,089 ns/op
Iteration  93: 375,611 ns/op
Iteration  94: 380,998 ns/op
Iteration  95: 374,792 ns/op
Iteration  96: 375,351 ns/op
Iteration  97: 374,387 ns/op
Iteration  98: 374,873 ns/op
Iteration  99: 374,578 ns/op
Iteration 100: 374,554 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  376,894 ±(99.9%) 1,037 ns/op [Average]
  (min, avg, max) = (373,755, 376,894, 389,953), stdev = 3,056
  CI (99.9%): [375,858, 377,931] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)           (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-2.json  avgt  100  376,894 ± 1,037  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 886,521 ns/op
# Warmup Iteration   2: 827,086 ns/op
# Warmup Iteration   3: 827,908 ns/op
Iteration   1: 835,308 ns/op
Iteration   2: 832,247 ns/op
Iteration   3: 836,991 ns/op
Iteration   4: 827,558 ns/op
Iteration   5: 827,737 ns/op
Iteration   6: 829,295 ns/op
Iteration   7: 834,772 ns/op
Iteration   8: 831,048 ns/op
Iteration   9: 829,491 ns/op
Iteration  10: 832,843 ns/op
Iteration  11: 825,761 ns/op
Iteration  12: 828,956 ns/op
Iteration  13: 825,601 ns/op
Iteration  14: 826,221 ns/op
Iteration  15: 826,522 ns/op
Iteration  16: 827,379 ns/op
Iteration  17: 831,068 ns/op
Iteration  18: 828,167 ns/op
Iteration  19: 849,514 ns/op
Iteration  20: 827,128 ns/op
Iteration  21: 830,969 ns/op
Iteration  22: 826,039 ns/op
Iteration  23: 826,424 ns/op
Iteration  24: 830,216 ns/op
Iteration  25: 832,358 ns/op
Iteration  26: 826,986 ns/op
Iteration  27: 828,163 ns/op
Iteration  28: 827,997 ns/op
Iteration  29: 833,684 ns/op
Iteration  30: 827,365 ns/op
Iteration  31: 829,735 ns/op
Iteration  32: 834,660 ns/op
Iteration  33: 831,366 ns/op
Iteration  34: 831,531 ns/op
Iteration  35: 828,754 ns/op
Iteration  36: 827,043 ns/op
Iteration  37: 826,111 ns/op
Iteration  38: 826,478 ns/op
Iteration  39: 826,058 ns/op
Iteration  40: 827,100 ns/op
Iteration  41: 828,974 ns/op
Iteration  42: 832,973 ns/op
Iteration  43: 829,047 ns/op
Iteration  44: 825,746 ns/op
Iteration  45: 826,281 ns/op
Iteration  46: 827,096 ns/op
Iteration  47: 827,771 ns/op
Iteration  48: 826,363 ns/op
Iteration  49: 826,784 ns/op
Iteration  50: 828,144 ns/op
Iteration  51: 827,275 ns/op
Iteration  52: 826,918 ns/op
Iteration  53: 826,593 ns/op
Iteration  54: 830,567 ns/op
Iteration  55: 826,693 ns/op
Iteration  56: 837,054 ns/op
Iteration  57: 831,713 ns/op
Iteration  58: 836,277 ns/op
Iteration  59: 828,507 ns/op
Iteration  60: 829,888 ns/op
Iteration  61: 827,625 ns/op
Iteration  62: 828,814 ns/op
Iteration  63: 827,344 ns/op
Iteration  64: 834,388 ns/op
Iteration  65: 827,570 ns/op
Iteration  66: 834,896 ns/op
Iteration  67: 828,477 ns/op
Iteration  68: 828,050 ns/op
Iteration  69: 825,703 ns/op
Iteration  70: 832,399 ns/op
Iteration  71: 827,090 ns/op
Iteration  72: 833,516 ns/op
Iteration  73: 828,443 ns/op
Iteration  74: 835,686 ns/op
Iteration  75: 826,078 ns/op
Iteration  76: 826,833 ns/op
Iteration  77: 833,390 ns/op
Iteration  78: 826,671 ns/op
Iteration  79: 834,944 ns/op
Iteration  80: 827,360 ns/op
Iteration  81: 826,674 ns/op
Iteration  82: 826,981 ns/op
Iteration  83: 830,165 ns/op
Iteration  84: 828,762 ns/op
Iteration  85: 835,694 ns/op
Iteration  86: 826,564 ns/op
Iteration  87: 825,588 ns/op
Iteration  88: 828,448 ns/op
Iteration  89: 826,179 ns/op
Iteration  90: 828,603 ns/op
Iteration  91: 827,072 ns/op
Iteration  92: 828,504 ns/op
Iteration  93: 832,609 ns/op
Iteration  94: 831,855 ns/op
Iteration  95: 826,531 ns/op
Iteration  96: 827,492 ns/op
Iteration  97: 831,031 ns/op
Iteration  98: 830,013 ns/op
Iteration  99: 827,702 ns/op
Iteration 100: 826,210 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  829,413 ±(99.9%) 1,242 ns/op [Average]
  (min, avg, max) = (825,588, 829,413, 849,514), stdev = 3,661
  CI (99.9%): [828,171, 830,654] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)           (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-6.json  avgt  100  829,413 ± 1,242  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1467,184 ns/op
# Warmup Iteration   2: 1349,129 ns/op
# Warmup Iteration   3: 1362,764 ns/op
Iteration   1: 1349,954 ns/op
Iteration   2: 1364,232 ns/op
Iteration   3: 1403,908 ns/op
Iteration   4: 1358,723 ns/op
Iteration   5: 1353,749 ns/op
Iteration   6: 1372,835 ns/op
Iteration   7: 1363,673 ns/op
Iteration   8: 1359,328 ns/op
Iteration   9: 1369,038 ns/op
Iteration  10: 1365,038 ns/op
Iteration  11: 1356,200 ns/op
Iteration  12: 1375,521 ns/op
Iteration  13: 1394,606 ns/op
Iteration  14: 1365,274 ns/op
Iteration  15: 1363,511 ns/op
Iteration  16: 1357,474 ns/op
Iteration  17: 1363,189 ns/op
Iteration  18: 1363,213 ns/op
Iteration  19: 1371,809 ns/op
Iteration  20: 1382,162 ns/op
Iteration  21: 1372,061 ns/op
Iteration  22: 1364,400 ns/op
Iteration  23: 1359,417 ns/op
Iteration  24: 1357,647 ns/op
Iteration  25: 1367,956 ns/op
Iteration  26: 1368,547 ns/op
Iteration  27: 1364,312 ns/op
Iteration  28: 1353,510 ns/op
Iteration  29: 1369,771 ns/op
Iteration  30: 1353,948 ns/op
Iteration  31: 1358,938 ns/op
Iteration  32: 1347,757 ns/op
Iteration  33: 1354,217 ns/op
Iteration  34: 1360,405 ns/op
Iteration  35: 1365,916 ns/op
Iteration  36: 1352,008 ns/op
Iteration  37: 1354,313 ns/op
Iteration  38: 1362,936 ns/op
Iteration  39: 1368,211 ns/op
Iteration  40: 1354,671 ns/op
Iteration  41: 1357,167 ns/op
Iteration  42: 1354,158 ns/op
Iteration  43: 1365,542 ns/op
Iteration  44: 1377,194 ns/op
Iteration  45: 1351,832 ns/op
Iteration  46: 1357,221 ns/op
Iteration  47: 1363,956 ns/op
Iteration  48: 1357,979 ns/op
Iteration  49: 1350,759 ns/op
Iteration  50: 1357,997 ns/op
Iteration  51: 1354,772 ns/op
Iteration  52: 1355,430 ns/op
Iteration  53: 1355,966 ns/op
Iteration  54: 1368,009 ns/op
Iteration  55: 1361,165 ns/op
Iteration  56: 1349,204 ns/op
Iteration  57: 1366,396 ns/op
Iteration  58: 1365,064 ns/op
Iteration  59: 1363,387 ns/op
Iteration  60: 1385,493 ns/op
Iteration  61: 1379,881 ns/op
Iteration  62: 1355,171 ns/op
Iteration  63: 1357,306 ns/op
Iteration  64: 1357,785 ns/op
Iteration  65: 1371,898 ns/op
Iteration  66: 1359,395 ns/op
Iteration  67: 1357,065 ns/op
Iteration  68: 1355,350 ns/op
Iteration  69: 1386,191 ns/op
Iteration  70: 1353,813 ns/op
Iteration  71: 1378,507 ns/op
Iteration  72: 1364,510 ns/op
Iteration  73: 1378,074 ns/op
Iteration  74: 1367,767 ns/op
Iteration  75: 1359,822 ns/op
Iteration  76: 1371,641 ns/op
Iteration  77: 1353,309 ns/op
Iteration  78: 1360,576 ns/op
Iteration  79: 1367,302 ns/op
Iteration  80: 1357,210 ns/op
Iteration  81: 1356,862 ns/op
Iteration  82: 1351,711 ns/op
Iteration  83: 1372,542 ns/op
Iteration  84: 1369,069 ns/op
Iteration  85: 1377,229 ns/op
Iteration  86: 1363,890 ns/op
Iteration  87: 1367,657 ns/op
Iteration  88: 1350,150 ns/op
Iteration  89: 1348,924 ns/op
Iteration  90: 1367,303 ns/op
Iteration  91: 1359,636 ns/op
Iteration  92: 1343,067 ns/op
Iteration  93: 1368,240 ns/op
Iteration  94: 1360,232 ns/op
Iteration  95: 1360,268 ns/op
Iteration  96: 1353,144 ns/op
Iteration  97: 1358,065 ns/op
Iteration  98: 1356,847 ns/op
Iteration  99: 1375,853 ns/op
Iteration 100: 1353,370 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  1362,897 ±(99.9%) 3,429 ns/op [Average]
  (min, avg, max) = (1343,067, 1362,897, 1403,908), stdev = 10,112
  CI (99.9%): [1359,468, 1366,326] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)            (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-10.json  avgt  100  1362,897 ± 3,429  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b09
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-open/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 3235,778 ns/op
# Warmup Iteration   2: 3037,539 ns/op
# Warmup Iteration   3: 3051,982 ns/op
Iteration   1: 3030,496 ns/op
Iteration   2: 3139,889 ns/op
Iteration   3: 3068,755 ns/op
Iteration   4: 3032,853 ns/op
Iteration   5: 3034,435 ns/op
Iteration   6: 3031,157 ns/op
Iteration   7: 3098,447 ns/op
Iteration   8: 3080,004 ns/op
Iteration   9: 3035,324 ns/op
Iteration  10: 3081,158 ns/op
Iteration  11: 3054,232 ns/op
Iteration  12: 3030,336 ns/op
Iteration  13: 3068,900 ns/op
Iteration  14: 3024,271 ns/op
Iteration  15: 3021,966 ns/op
Iteration  16: 3023,236 ns/op
Iteration  17: 3022,897 ns/op
Iteration  18: 3044,984 ns/op
Iteration  19: 3078,818 ns/op
Iteration  20: 3091,797 ns/op
Iteration  21: 3030,732 ns/op
Iteration  22: 3032,146 ns/op
Iteration  23: 3026,316 ns/op
Iteration  24: 3027,583 ns/op
Iteration  25: 3069,326 ns/op
Iteration  26: 3025,555 ns/op
Iteration  27: 3026,313 ns/op
Iteration  28: 3039,020 ns/op
Iteration  29: 3028,632 ns/op
Iteration  30: 3029,717 ns/op
Iteration  31: 3038,974 ns/op
Iteration  32: 3044,982 ns/op
Iteration  33: 3090,298 ns/op
Iteration  34: 3024,879 ns/op
Iteration  35: 3061,117 ns/op
Iteration  36: 3024,047 ns/op
Iteration  37: 3068,707 ns/op
Iteration  38: 3044,770 ns/op
Iteration  39: 3022,365 ns/op
Iteration  40: 3035,079 ns/op
Iteration  41: 3022,467 ns/op
Iteration  42: 3026,698 ns/op
Iteration  43: 3083,258 ns/op
Iteration  44: 3097,741 ns/op
Iteration  45: 3020,232 ns/op
Iteration  46: 3062,231 ns/op
Iteration  47: 3071,753 ns/op
Iteration  48: 3029,124 ns/op
Iteration  49: 3038,204 ns/op
Iteration  50: 3043,979 ns/op
Iteration  51: 3059,802 ns/op
Iteration  52: 3058,190 ns/op
Iteration  53: 3027,007 ns/op
Iteration  54: 3037,413 ns/op
Iteration  55: 3024,837 ns/op
Iteration  56: 3027,509 ns/op
Iteration  57: 3053,420 ns/op
Iteration  58: 3028,111 ns/op
Iteration  59: 3050,497 ns/op
Iteration  60: 3034,324 ns/op
Iteration  61: 3054,179 ns/op
Iteration  62: 3045,642 ns/op
Iteration  63: 3024,977 ns/op
Iteration  64: 3027,186 ns/op
Iteration  65: 3057,694 ns/op
Iteration  66: 3049,440 ns/op
Iteration  67: 3023,681 ns/op
Iteration  68: 3030,883 ns/op
Iteration  69: 3096,297 ns/op
Iteration  70: 3031,283 ns/op
Iteration  71: 3039,658 ns/op
Iteration  72: 3083,639 ns/op
Iteration  73: 3019,405 ns/op
Iteration  74: 3024,872 ns/op
Iteration  75: 3026,105 ns/op
Iteration  76: 3019,411 ns/op
Iteration  77: 3022,216 ns/op
Iteration  78: 3092,339 ns/op
Iteration  79: 3038,337 ns/op
Iteration  80: 3027,015 ns/op
Iteration  81: 3032,827 ns/op
Iteration  82: 3043,795 ns/op
Iteration  83: 3129,309 ns/op
Iteration  84: 3057,953 ns/op
Iteration  85: 3050,485 ns/op
Iteration  86: 3025,310 ns/op
Iteration  87: 3041,523 ns/op
Iteration  88: 3039,073 ns/op
Iteration  89: 3078,527 ns/op
Iteration  90: 3024,513 ns/op
Iteration  91: 3033,519 ns/op
Iteration  92: 3024,052 ns/op
Iteration  93: 3032,169 ns/op
Iteration  94: 3061,441 ns/op
Iteration  95: 3037,851 ns/op
Iteration  96: 3028,229 ns/op
Iteration  97: 3069,673 ns/op
Iteration  98: 3031,108 ns/op
Iteration  99: 3013,686 ns/op
Iteration 100: 3014,995 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  3044,856 ±(99.9%) 8,536 ns/op [Average]
  (min, avg, max) = (3013,686, 3044,856, 3139,889), stdev = 25,169
  CI (99.9%): [3036,320, 3053,392] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)            (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-20.json  avgt  100  3044,856 ± 8,536  ns/op

Using:

java: 8.0.232-zulu
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 395,568 ns/op
# Warmup Iteration   2: 371,756 ns/op
# Warmup Iteration   3: 370,329 ns/op
Iteration   1: 368,490 ns/op
Iteration   2: 375,041 ns/op
Iteration   3: 370,956 ns/op
Iteration   4: 374,120 ns/op
Iteration   5: 367,936 ns/op
Iteration   6: 368,725 ns/op
Iteration   7: 368,462 ns/op
Iteration   8: 368,804 ns/op
Iteration   9: 368,937 ns/op
Iteration  10: 369,995 ns/op
Iteration  11: 368,645 ns/op
Iteration  12: 368,609 ns/op
Iteration  13: 368,362 ns/op
Iteration  14: 368,445 ns/op
Iteration  15: 368,134 ns/op
Iteration  16: 369,106 ns/op
Iteration  17: 368,270 ns/op
Iteration  18: 368,714 ns/op
Iteration  19: 370,546 ns/op
Iteration  20: 369,752 ns/op
Iteration  21: 368,497 ns/op
Iteration  22: 372,630 ns/op
Iteration  23: 367,947 ns/op
Iteration  24: 368,948 ns/op
Iteration  25: 367,894 ns/op
Iteration  26: 370,102 ns/op
Iteration  27: 371,267 ns/op
Iteration  28: 369,818 ns/op
Iteration  29: 368,924 ns/op
Iteration  30: 369,369 ns/op
Iteration  31: 370,785 ns/op
Iteration  32: 368,437 ns/op
Iteration  33: 369,455 ns/op
Iteration  34: 369,300 ns/op
Iteration  35: 370,392 ns/op
Iteration  36: 370,132 ns/op
Iteration  37: 368,891 ns/op
Iteration  38: 370,368 ns/op
Iteration  39: 368,280 ns/op
Iteration  40: 372,810 ns/op
Iteration  41: 376,278 ns/op
Iteration  42: 368,010 ns/op
Iteration  43: 368,091 ns/op
Iteration  44: 368,238 ns/op
Iteration  45: 370,097 ns/op
Iteration  46: 369,597 ns/op
Iteration  47: 372,981 ns/op
Iteration  48: 370,637 ns/op
Iteration  49: 367,943 ns/op
Iteration  50: 367,762 ns/op
Iteration  51: 369,171 ns/op
Iteration  52: 369,935 ns/op
Iteration  53: 368,534 ns/op
Iteration  54: 368,334 ns/op
Iteration  55: 368,697 ns/op
Iteration  56: 368,142 ns/op
Iteration  57: 370,553 ns/op
Iteration  58: 368,049 ns/op
Iteration  59: 371,070 ns/op
Iteration  60: 368,523 ns/op
Iteration  61: 370,530 ns/op
Iteration  62: 368,331 ns/op
Iteration  63: 369,309 ns/op
Iteration  64: 369,389 ns/op
Iteration  65: 369,977 ns/op
Iteration  66: 369,038 ns/op
Iteration  67: 367,762 ns/op
Iteration  68: 372,374 ns/op
Iteration  69: 369,254 ns/op
Iteration  70: 367,652 ns/op
Iteration  71: 369,770 ns/op
Iteration  72: 370,121 ns/op
Iteration  73: 368,136 ns/op
Iteration  74: 368,268 ns/op
Iteration  75: 367,938 ns/op
Iteration  76: 368,390 ns/op
Iteration  77: 372,134 ns/op
Iteration  78: 367,840 ns/op
Iteration  79: 368,475 ns/op
Iteration  80: 367,768 ns/op
Iteration  81: 368,412 ns/op
Iteration  82: 370,399 ns/op
Iteration  83: 368,951 ns/op
Iteration  84: 368,814 ns/op
Iteration  85: 368,859 ns/op
Iteration  86: 369,867 ns/op
Iteration  87: 368,885 ns/op
Iteration  88: 370,220 ns/op
Iteration  89: 370,768 ns/op
Iteration  90: 368,086 ns/op
Iteration  91: 374,765 ns/op
Iteration  92: 369,226 ns/op
Iteration  93: 368,403 ns/op
Iteration  94: 372,253 ns/op
Iteration  95: 368,348 ns/op
Iteration  96: 368,648 ns/op
Iteration  97: 367,887 ns/op
Iteration  98: 367,933 ns/op
Iteration  99: 368,649 ns/op
Iteration 100: 368,407 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  369,452 ±(99.9%) 0,572 ns/op [Average]
  (min, avg, max) = (367,652, 369,452, 376,278), stdev = 1,688
  CI (99.9%): [368,879, 370,024] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                     (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-2.json  avgt  100  369,452 ± 0,572  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 911,908 ns/op
# Warmup Iteration   2: 870,831 ns/op
# Warmup Iteration   3: 872,668 ns/op
Iteration   1: 864,110 ns/op
Iteration   2: 863,858 ns/op
Iteration   3: 865,724 ns/op
Iteration   4: 886,932 ns/op
Iteration   5: 882,135 ns/op
Iteration   6: 863,276 ns/op
Iteration   7: 866,876 ns/op
Iteration   8: 863,756 ns/op
Iteration   9: 864,010 ns/op
Iteration  10: 862,470 ns/op
Iteration  11: 862,683 ns/op
Iteration  12: 863,590 ns/op
Iteration  13: 864,142 ns/op
Iteration  14: 871,979 ns/op
Iteration  15: 866,326 ns/op
Iteration  16: 875,465 ns/op
Iteration  17: 868,570 ns/op
Iteration  18: 870,553 ns/op
Iteration  19: 875,251 ns/op
Iteration  20: 876,237 ns/op
Iteration  21: 869,010 ns/op
Iteration  22: 868,274 ns/op
Iteration  23: 872,034 ns/op
Iteration  24: 868,955 ns/op
Iteration  25: 865,773 ns/op
Iteration  26: 866,246 ns/op
Iteration  27: 866,756 ns/op
Iteration  28: 866,122 ns/op
Iteration  29: 868,767 ns/op
Iteration  30: 867,226 ns/op
Iteration  31: 868,124 ns/op
Iteration  32: 867,314 ns/op
Iteration  33: 873,719 ns/op
Iteration  34: 865,568 ns/op
Iteration  35: 867,724 ns/op
Iteration  36: 869,687 ns/op
Iteration  37: 875,151 ns/op
Iteration  38: 865,931 ns/op
Iteration  39: 875,346 ns/op
Iteration  40: 868,528 ns/op
Iteration  41: 870,412 ns/op
Iteration  42: 870,823 ns/op
Iteration  43: 865,970 ns/op
Iteration  44: 870,155 ns/op
Iteration  45: 871,401 ns/op
Iteration  46: 868,915 ns/op
Iteration  47: 871,869 ns/op
Iteration  48: 867,743 ns/op
Iteration  49: 872,634 ns/op
Iteration  50: 873,776 ns/op
Iteration  51: 867,012 ns/op
Iteration  52: 865,113 ns/op
Iteration  53: 868,236 ns/op
Iteration  54: 866,499 ns/op
Iteration  55: 872,687 ns/op
Iteration  56: 880,340 ns/op
Iteration  57: 869,727 ns/op
Iteration  58: 866,940 ns/op
Iteration  59: 866,472 ns/op
Iteration  60: 865,653 ns/op
Iteration  61: 870,364 ns/op
Iteration  62: 867,323 ns/op
Iteration  63: 865,120 ns/op
Iteration  64: 871,333 ns/op
Iteration  65: 871,991 ns/op
Iteration  66: 874,758 ns/op
Iteration  67: 871,017 ns/op
Iteration  68: 866,745 ns/op
Iteration  69: 865,516 ns/op
Iteration  70: 870,660 ns/op
Iteration  71: 874,725 ns/op
Iteration  72: 866,265 ns/op
Iteration  73: 876,517 ns/op
Iteration  74: 865,266 ns/op
Iteration  75: 881,397 ns/op
Iteration  76: 867,044 ns/op
Iteration  77: 874,301 ns/op
Iteration  78: 868,037 ns/op
Iteration  79: 866,784 ns/op
Iteration  80: 869,982 ns/op
Iteration  81: 868,483 ns/op
Iteration  82: 867,206 ns/op
Iteration  83: 875,755 ns/op
Iteration  84: 874,755 ns/op
Iteration  85: 869,902 ns/op
Iteration  86: 874,130 ns/op
Iteration  87: 865,024 ns/op
Iteration  88: 864,641 ns/op
Iteration  89: 866,723 ns/op
Iteration  90: 865,396 ns/op
Iteration  91: 871,853 ns/op
Iteration  92: 865,862 ns/op
Iteration  93: 868,181 ns/op
Iteration  94: 873,545 ns/op
Iteration  95: 870,301 ns/op
Iteration  96: 870,663 ns/op
Iteration  97: 865,675 ns/op
Iteration  98: 867,444 ns/op
Iteration  99: 868,993 ns/op
Iteration 100: 865,982 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  869,322 ±(99.9%) 1,515 ns/op [Average]
  (min, avg, max) = (862,470, 869,322, 886,932), stdev = 4,466
  CI (99.9%): [867,808, 870,837] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                     (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-6.json  avgt  100  869,322 ± 1,515  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1290,476 ns/op
# Warmup Iteration   2: 1177,833 ns/op
# Warmup Iteration   3: 1198,614 ns/op
Iteration   1: 1196,554 ns/op
Iteration   2: 1185,354 ns/op
Iteration   3: 1183,812 ns/op
Iteration   4: 1189,439 ns/op
Iteration   5: 1187,193 ns/op
Iteration   6: 1193,385 ns/op
Iteration   7: 1196,155 ns/op
Iteration   8: 1186,126 ns/op
Iteration   9: 1187,690 ns/op
Iteration  10: 1187,007 ns/op
Iteration  11: 1193,890 ns/op
Iteration  12: 1190,021 ns/op
Iteration  13: 1194,680 ns/op
Iteration  14: 1208,139 ns/op
Iteration  15: 1194,291 ns/op
Iteration  16: 1197,333 ns/op
Iteration  17: 1198,127 ns/op
Iteration  18: 1190,071 ns/op
Iteration  19: 1197,183 ns/op
Iteration  20: 1186,714 ns/op
Iteration  21: 1191,056 ns/op
Iteration  22: 1189,611 ns/op
Iteration  23: 1190,205 ns/op
Iteration  24: 1189,941 ns/op
Iteration  25: 1193,049 ns/op
Iteration  26: 1190,897 ns/op
Iteration  27: 1197,394 ns/op
Iteration  28: 1189,902 ns/op
Iteration  29: 1188,868 ns/op
Iteration  30: 1200,215 ns/op
Iteration  31: 1188,435 ns/op
Iteration  32: 1188,901 ns/op
Iteration  33: 1186,781 ns/op
Iteration  34: 1190,103 ns/op
Iteration  35: 1199,251 ns/op
Iteration  36: 1188,383 ns/op
Iteration  37: 1191,832 ns/op
Iteration  38: 1195,768 ns/op
Iteration  39: 1195,447 ns/op
Iteration  40: 1187,810 ns/op
Iteration  41: 1188,263 ns/op
Iteration  42: 1186,106 ns/op
Iteration  43: 1194,795 ns/op
Iteration  44: 1189,209 ns/op
Iteration  45: 1188,866 ns/op
Iteration  46: 1191,883 ns/op
Iteration  47: 1187,549 ns/op
Iteration  48: 1185,667 ns/op
Iteration  49: 1190,123 ns/op
Iteration  50: 1207,938 ns/op
Iteration  51: 1184,435 ns/op
Iteration  52: 1204,724 ns/op
Iteration  53: 1198,142 ns/op
Iteration  54: 1187,042 ns/op
Iteration  55: 1191,559 ns/op
Iteration  56: 1192,184 ns/op
Iteration  57: 1185,094 ns/op
Iteration  58: 1190,148 ns/op
Iteration  59: 1187,042 ns/op
Iteration  60: 1184,895 ns/op
Iteration  61: 1188,850 ns/op
Iteration  62: 1192,467 ns/op
Iteration  63: 1196,620 ns/op
Iteration  64: 1187,484 ns/op
Iteration  65: 1212,165 ns/op
Iteration  66: 1191,536 ns/op
Iteration  67: 1212,971 ns/op
Iteration  68: 1188,325 ns/op
Iteration  69: 1186,359 ns/op
Iteration  70: 1190,127 ns/op
Iteration  71: 1189,923 ns/op
Iteration  72: 1188,298 ns/op
Iteration  73: 1194,004 ns/op
Iteration  74: 1192,922 ns/op
Iteration  75: 1188,320 ns/op
Iteration  76: 1191,206 ns/op
Iteration  77: 1195,228 ns/op
Iteration  78: 1187,592 ns/op
Iteration  79: 1191,079 ns/op
Iteration  80: 1195,342 ns/op
Iteration  81: 1186,381 ns/op
Iteration  82: 1185,681 ns/op
Iteration  83: 1188,196 ns/op
Iteration  84: 1187,270 ns/op
Iteration  85: 1203,259 ns/op
Iteration  86: 1186,935 ns/op
Iteration  87: 1190,253 ns/op
Iteration  88: 1188,013 ns/op
Iteration  89: 1201,745 ns/op
Iteration  90: 1188,133 ns/op
Iteration  91: 1195,674 ns/op
Iteration  92: 1189,329 ns/op
Iteration  93: 1190,555 ns/op
Iteration  94: 1189,403 ns/op
Iteration  95: 1184,329 ns/op
Iteration  96: 1187,314 ns/op
Iteration  97: 1192,600 ns/op
Iteration  98: 1189,894 ns/op
Iteration  99: 1185,730 ns/op
Iteration 100: 1195,260 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  1191,595 ±(99.9%) 1,963 ns/op [Average]
  (min, avg, max) = (1183,812, 1191,595, 1212,971), stdev = 5,789
  CI (99.9%): [1189,631, 1193,558] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                      (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-10.json  avgt  100  1191,595 ± 1,963  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 3615,265 ns/op
# Warmup Iteration   2: 3344,913 ns/op
# Warmup Iteration   3: 3357,303 ns/op
Iteration   1: 3372,584 ns/op
Iteration   2: 3363,033 ns/op
Iteration   3: 3353,297 ns/op
Iteration   4: 3380,234 ns/op
Iteration   5: 3370,235 ns/op
Iteration   6: 3372,145 ns/op
Iteration   7: 3359,477 ns/op
Iteration   8: 3338,048 ns/op
Iteration   9: 3381,012 ns/op
Iteration  10: 3351,925 ns/op
Iteration  11: 3367,460 ns/op
Iteration  12: 3360,593 ns/op
Iteration  13: 3361,046 ns/op
Iteration  14: 3303,442 ns/op
Iteration  15: 3312,093 ns/op
Iteration  16: 3313,375 ns/op
Iteration  17: 3310,253 ns/op
Iteration  18: 3313,049 ns/op
Iteration  19: 3324,765 ns/op
Iteration  20: 3318,214 ns/op
Iteration  21: 3306,455 ns/op
Iteration  22: 3314,835 ns/op
Iteration  23: 3342,226 ns/op
Iteration  24: 3328,670 ns/op
Iteration  25: 3335,842 ns/op
Iteration  26: 3308,682 ns/op
Iteration  27: 3311,818 ns/op
Iteration  28: 3336,503 ns/op
Iteration  29: 3323,512 ns/op
Iteration  30: 3329,230 ns/op
Iteration  31: 3311,545 ns/op
Iteration  32: 3314,440 ns/op
Iteration  33: 3332,041 ns/op
Iteration  34: 3333,778 ns/op
Iteration  35: 3309,659 ns/op
Iteration  36: 3304,048 ns/op
Iteration  37: 3303,381 ns/op
Iteration  38: 3302,250 ns/op
Iteration  39: 3303,514 ns/op
Iteration  40: 3318,996 ns/op
Iteration  41: 3332,790 ns/op
Iteration  42: 3303,993 ns/op
Iteration  43: 3312,702 ns/op
Iteration  44: 3322,881 ns/op
Iteration  45: 3359,525 ns/op
Iteration  46: 3325,518 ns/op
Iteration  47: 3308,439 ns/op
Iteration  48: 3336,376 ns/op
Iteration  49: 3361,221 ns/op
Iteration  50: 3324,847 ns/op
Iteration  51: 3356,256 ns/op
Iteration  52: 3360,273 ns/op
Iteration  53: 3320,752 ns/op
Iteration  54: 3337,534 ns/op
Iteration  55: 3320,105 ns/op
Iteration  56: 3343,545 ns/op
Iteration  57: 3333,222 ns/op
Iteration  58: 3317,378 ns/op
Iteration  59: 3318,206 ns/op
Iteration  60: 3320,303 ns/op
Iteration  61: 3354,548 ns/op
Iteration  62: 3319,547 ns/op
Iteration  63: 3335,991 ns/op
Iteration  64: 3332,668 ns/op
Iteration  65: 3321,783 ns/op
Iteration  66: 3323,820 ns/op
Iteration  67: 3341,491 ns/op
Iteration  68: 3337,952 ns/op
Iteration  69: 3315,520 ns/op
Iteration  70: 3331,330 ns/op
Iteration  71: 3336,609 ns/op
Iteration  72: 3312,586 ns/op
Iteration  73: 3316,673 ns/op
Iteration  74: 3339,230 ns/op
Iteration  75: 3342,383 ns/op
Iteration  76: 3372,980 ns/op
Iteration  77: 3323,719 ns/op
Iteration  78: 3315,414 ns/op
Iteration  79: 3323,323 ns/op
Iteration  80: 3337,210 ns/op
Iteration  81: 3360,646 ns/op
Iteration  82: 3338,611 ns/op
Iteration  83: 3333,785 ns/op
Iteration  84: 3321,628 ns/op
Iteration  85: 3369,756 ns/op
Iteration  86: 3355,337 ns/op
Iteration  87: 3330,380 ns/op
Iteration  88: 3352,673 ns/op
Iteration  89: 3350,400 ns/op
Iteration  90: 3322,271 ns/op
Iteration  91: 3360,325 ns/op
Iteration  92: 3318,997 ns/op
Iteration  93: 3339,793 ns/op
Iteration  94: 3371,205 ns/op
Iteration  95: 3319,735 ns/op
Iteration  96: 3336,252 ns/op
Iteration  97: 3345,911 ns/op
Iteration  98: 3314,946 ns/op
Iteration  99: 3325,513 ns/op
Iteration 100: 3318,100 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  3333,346 ±(99.9%) 6,949 ns/op [Average]
  (min, avg, max) = (3302,250, 3333,346, 3381,012), stdev = 20,490
  CI (99.9%): [3326,397, 3340,295] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                      (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-20.json  avgt  100  3333,346 ± 6,949  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 402,290 ns/op
# Warmup Iteration   2: 376,073 ns/op
# Warmup Iteration   3: 372,426 ns/op
Iteration   1: 371,116 ns/op
Iteration   2: 371,461 ns/op
Iteration   3: 370,453 ns/op
Iteration   4: 371,063 ns/op
Iteration   5: 371,331 ns/op
Iteration   6: 371,051 ns/op
Iteration   7: 374,290 ns/op
Iteration   8: 369,160 ns/op
Iteration   9: 370,310 ns/op
Iteration  10: 370,469 ns/op
Iteration  11: 370,183 ns/op
Iteration  12: 370,616 ns/op
Iteration  13: 373,280 ns/op
Iteration  14: 370,773 ns/op
Iteration  15: 369,797 ns/op
Iteration  16: 368,707 ns/op
Iteration  17: 372,760 ns/op
Iteration  18: 373,457 ns/op
Iteration  19: 370,066 ns/op
Iteration  20: 371,784 ns/op
Iteration  21: 371,104 ns/op
Iteration  22: 372,387 ns/op
Iteration  23: 370,742 ns/op
Iteration  24: 369,229 ns/op
Iteration  25: 373,416 ns/op
Iteration  26: 371,524 ns/op
Iteration  27: 373,526 ns/op
Iteration  28: 372,974 ns/op
Iteration  29: 372,375 ns/op
Iteration  30: 368,904 ns/op
Iteration  31: 373,367 ns/op
Iteration  32: 374,375 ns/op
Iteration  33: 378,496 ns/op
Iteration  34: 372,615 ns/op
Iteration  35: 369,711 ns/op
Iteration  36: 370,931 ns/op
Iteration  37: 369,428 ns/op
Iteration  38: 370,765 ns/op
Iteration  39: 369,195 ns/op
Iteration  40: 372,248 ns/op
Iteration  41: 370,551 ns/op
Iteration  42: 370,834 ns/op
Iteration  43: 374,576 ns/op
Iteration  44: 370,838 ns/op
Iteration  45: 369,529 ns/op
Iteration  46: 371,305 ns/op
Iteration  47: 369,728 ns/op
Iteration  48: 371,136 ns/op
Iteration  49: 368,944 ns/op
Iteration  50: 371,212 ns/op
Iteration  51: 370,657 ns/op
Iteration  52: 368,871 ns/op
Iteration  53: 371,271 ns/op
Iteration  54: 371,541 ns/op
Iteration  55: 371,107 ns/op
Iteration  56: 375,418 ns/op
Iteration  57: 374,470 ns/op
Iteration  58: 369,393 ns/op
Iteration  59: 374,005 ns/op
Iteration  60: 369,541 ns/op
Iteration  61: 369,056 ns/op
Iteration  62: 376,921 ns/op
Iteration  63: 370,693 ns/op
Iteration  64: 374,625 ns/op
Iteration  65: 378,713 ns/op
Iteration  66: 371,244 ns/op
Iteration  67: 373,623 ns/op
Iteration  68: 370,493 ns/op
Iteration  69: 370,887 ns/op
Iteration  70: 369,346 ns/op
Iteration  71: 369,290 ns/op
Iteration  72: 373,539 ns/op
Iteration  73: 369,085 ns/op
Iteration  74: 370,649 ns/op
Iteration  75: 371,152 ns/op
Iteration  76: 372,454 ns/op
Iteration  77: 371,189 ns/op
Iteration  78: 371,425 ns/op
Iteration  79: 371,853 ns/op
Iteration  80: 371,538 ns/op
Iteration  81: 372,521 ns/op
Iteration  82: 368,966 ns/op
Iteration  83: 369,260 ns/op
Iteration  84: 371,193 ns/op
Iteration  85: 371,531 ns/op
Iteration  86: 371,414 ns/op
Iteration  87: 369,398 ns/op
Iteration  88: 371,091 ns/op
Iteration  89: 371,456 ns/op
Iteration  90: 371,186 ns/op
Iteration  91: 373,474 ns/op
Iteration  92: 371,349 ns/op
Iteration  93: 370,444 ns/op
Iteration  94: 371,382 ns/op
Iteration  95: 369,663 ns/op
Iteration  96: 373,587 ns/op
Iteration  97: 373,363 ns/op
Iteration  98: 370,292 ns/op
Iteration  99: 371,446 ns/op
Iteration 100: 370,868 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  371,460 ±(99.9%) 0,659 ns/op [Average]
  (min, avg, max) = (368,707, 371,460, 378,713), stdev = 1,944
  CI (99.9%): [370,801, 372,120] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)               (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-2.json  avgt  100  371,460 ± 0,659  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 918,905 ns/op
# Warmup Iteration   2: 862,368 ns/op
# Warmup Iteration   3: 877,275 ns/op
Iteration   1: 872,414 ns/op
Iteration   2: 884,831 ns/op
Iteration   3: 871,180 ns/op
Iteration   4: 871,693 ns/op
Iteration   5: 874,600 ns/op
Iteration   6: 878,547 ns/op
Iteration   7: 877,695 ns/op
Iteration   8: 876,153 ns/op
Iteration   9: 877,399 ns/op
Iteration  10: 881,384 ns/op
Iteration  11: 876,492 ns/op
Iteration  12: 877,441 ns/op
Iteration  13: 885,099 ns/op
Iteration  14: 865,317 ns/op
Iteration  15: 863,254 ns/op
Iteration  16: 861,306 ns/op
Iteration  17: 867,390 ns/op
Iteration  18: 863,463 ns/op
Iteration  19: 868,332 ns/op
Iteration  20: 860,247 ns/op
Iteration  21: 861,739 ns/op
Iteration  22: 875,467 ns/op
Iteration  23: 867,312 ns/op
Iteration  24: 860,886 ns/op
Iteration  25: 863,947 ns/op
Iteration  26: 865,135 ns/op
Iteration  27: 860,889 ns/op
Iteration  28: 860,452 ns/op
Iteration  29: 862,265 ns/op
Iteration  30: 864,836 ns/op
Iteration  31: 861,354 ns/op
Iteration  32: 860,296 ns/op
Iteration  33: 861,653 ns/op
Iteration  34: 861,959 ns/op
Iteration  35: 867,014 ns/op
Iteration  36: 861,316 ns/op
Iteration  37: 863,083 ns/op
Iteration  38: 861,095 ns/op
Iteration  39: 860,890 ns/op
Iteration  40: 863,962 ns/op
Iteration  41: 861,633 ns/op
Iteration  42: 863,458 ns/op
Iteration  43: 864,764 ns/op
Iteration  44: 866,085 ns/op
Iteration  45: 864,373 ns/op
Iteration  46: 861,987 ns/op
Iteration  47: 860,569 ns/op
Iteration  48: 861,185 ns/op
Iteration  49: 866,615 ns/op
Iteration  50: 877,345 ns/op
Iteration  51: 875,608 ns/op
Iteration  52: 866,089 ns/op
Iteration  53: 863,422 ns/op
Iteration  54: 862,649 ns/op
Iteration  55: 860,756 ns/op
Iteration  56: 861,638 ns/op
Iteration  57: 865,939 ns/op
Iteration  58: 860,581 ns/op
Iteration  59: 877,217 ns/op
Iteration  60: 870,836 ns/op
Iteration  61: 867,068 ns/op
Iteration  62: 860,853 ns/op
Iteration  63: 860,495 ns/op
Iteration  64: 859,951 ns/op
Iteration  65: 863,671 ns/op
Iteration  66: 871,063 ns/op
Iteration  67: 863,142 ns/op
Iteration  68: 861,269 ns/op
Iteration  69: 863,020 ns/op
Iteration  70: 865,716 ns/op
Iteration  71: 862,911 ns/op
Iteration  72: 862,914 ns/op
Iteration  73: 866,254 ns/op
Iteration  74: 860,647 ns/op
Iteration  75: 860,794 ns/op
Iteration  76: 868,547 ns/op
Iteration  77: 861,614 ns/op
Iteration  78: 860,459 ns/op
Iteration  79: 860,034 ns/op
Iteration  80: 865,425 ns/op
Iteration  81: 860,532 ns/op
Iteration  82: 863,048 ns/op
Iteration  83: 860,690 ns/op
Iteration  84: 878,255 ns/op
Iteration  85: 861,345 ns/op
Iteration  86: 861,763 ns/op
Iteration  87: 860,655 ns/op
Iteration  88: 868,922 ns/op
Iteration  89: 860,616 ns/op
Iteration  90: 862,589 ns/op
Iteration  91: 861,695 ns/op
Iteration  92: 860,829 ns/op
Iteration  93: 864,565 ns/op
Iteration  94: 860,416 ns/op
Iteration  95: 861,070 ns/op
Iteration  96: 866,257 ns/op
Iteration  97: 864,175 ns/op
Iteration  98: 862,790 ns/op
Iteration  99: 861,237 ns/op
Iteration 100: 864,312 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  865,641 ±(99.9%) 2,080 ns/op [Average]
  (min, avg, max) = (859,951, 865,641, 885,099), stdev = 6,132
  CI (99.9%): [863,562, 867,721] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)               (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-6.json  avgt  100  865,641 ± 2,080  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1419,831 ns/op
# Warmup Iteration   2: 1358,464 ns/op
# Warmup Iteration   3: 1354,164 ns/op
Iteration   1: 1353,463 ns/op
Iteration   2: 1351,190 ns/op
Iteration   3: 1375,215 ns/op
Iteration   4: 1350,460 ns/op
Iteration   5: 1381,997 ns/op
Iteration   6: 1353,487 ns/op
Iteration   7: 1352,859 ns/op
Iteration   8: 1350,909 ns/op
Iteration   9: 1349,967 ns/op
Iteration  10: 1348,642 ns/op
Iteration  11: 1352,093 ns/op
Iteration  12: 1380,259 ns/op
Iteration  13: 1351,497 ns/op
Iteration  14: 1368,880 ns/op
Iteration  15: 1362,137 ns/op
Iteration  16: 1357,704 ns/op
Iteration  17: 1364,235 ns/op
Iteration  18: 1354,866 ns/op
Iteration  19: 1356,608 ns/op
Iteration  20: 1370,274 ns/op
Iteration  21: 1361,141 ns/op
Iteration  22: 1364,881 ns/op
Iteration  23: 1375,869 ns/op
Iteration  24: 1363,561 ns/op
Iteration  25: 1366,739 ns/op
Iteration  26: 1359,536 ns/op
Iteration  27: 1366,578 ns/op
Iteration  28: 1366,653 ns/op
Iteration  29: 1380,403 ns/op
Iteration  30: 1358,688 ns/op
Iteration  31: 1360,726 ns/op
Iteration  32: 1355,897 ns/op
Iteration  33: 1358,891 ns/op
Iteration  34: 1359,545 ns/op
Iteration  35: 1363,785 ns/op
Iteration  36: 1357,682 ns/op
Iteration  37: 1356,694 ns/op
Iteration  38: 1365,012 ns/op
Iteration  39: 1365,952 ns/op
Iteration  40: 1356,972 ns/op
Iteration  41: 1373,162 ns/op
Iteration  42: 1362,349 ns/op
Iteration  43: 1354,190 ns/op
Iteration  44: 1368,480 ns/op
Iteration  45: 1392,033 ns/op
Iteration  46: 1354,812 ns/op
Iteration  47: 1366,667 ns/op
Iteration  48: 1367,612 ns/op
Iteration  49: 1370,003 ns/op
Iteration  50: 1366,341 ns/op
Iteration  51: 1355,457 ns/op
Iteration  52: 1369,422 ns/op
Iteration  53: 1375,245 ns/op
Iteration  54: 1357,054 ns/op
Iteration  55: 1371,928 ns/op
Iteration  56: 1355,888 ns/op
Iteration  57: 1371,225 ns/op
Iteration  58: 1359,408 ns/op
Iteration  59: 1368,073 ns/op
Iteration  60: 1364,174 ns/op
Iteration  61: 1363,044 ns/op
Iteration  62: 1358,171 ns/op
Iteration  63: 1354,513 ns/op
Iteration  64: 1366,211 ns/op
Iteration  65: 1373,585 ns/op
Iteration  66: 1362,038 ns/op
Iteration  67: 1366,480 ns/op
Iteration  68: 1358,955 ns/op
Iteration  69: 1371,952 ns/op
Iteration  70: 1370,531 ns/op
Iteration  71: 1363,196 ns/op
Iteration  72: 1375,585 ns/op
Iteration  73: 1379,764 ns/op
Iteration  74: 1360,405 ns/op
Iteration  75: 1355,257 ns/op
Iteration  76: 1355,302 ns/op
Iteration  77: 1356,963 ns/op
Iteration  78: 1358,295 ns/op
Iteration  79: 1354,167 ns/op
Iteration  80: 1350,564 ns/op
Iteration  81: 1383,939 ns/op
Iteration  82: 1377,688 ns/op
Iteration  83: 1357,732 ns/op
Iteration  84: 1358,916 ns/op
Iteration  85: 1351,961 ns/op
Iteration  86: 1354,116 ns/op
Iteration  87: 1355,148 ns/op
Iteration  88: 1355,320 ns/op
Iteration  89: 1364,639 ns/op
Iteration  90: 1370,732 ns/op
Iteration  91: 1360,015 ns/op
Iteration  92: 1354,805 ns/op
Iteration  93: 1352,863 ns/op
Iteration  94: 1360,220 ns/op
Iteration  95: 1361,622 ns/op
Iteration  96: 1358,041 ns/op
Iteration  97: 1372,132 ns/op
Iteration  98: 1352,150 ns/op
Iteration  99: 1352,965 ns/op
Iteration 100: 1354,869 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  1362,403 ±(99.9%) 2,999 ns/op [Average]
  (min, avg, max) = (1348,642, 1362,403, 1392,033), stdev = 8,843
  CI (99.9%): [1359,404, 1365,402] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-10.json  avgt  100  1362,403 ± 2,999  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 2971,254 ns/op
# Warmup Iteration   2: 2825,250 ns/op
# Warmup Iteration   3: 2821,751 ns/op
Iteration   1: 2810,270 ns/op
Iteration   2: 2815,830 ns/op
Iteration   3: 2810,609 ns/op
Iteration   4: 2809,998 ns/op
Iteration   5: 2807,892 ns/op
Iteration   6: 2830,178 ns/op
Iteration   7: 2818,280 ns/op
Iteration   8: 2841,845 ns/op
Iteration   9: 2845,329 ns/op
Iteration  10: 2817,920 ns/op
Iteration  11: 2827,068 ns/op
Iteration  12: 2811,382 ns/op
Iteration  13: 2823,427 ns/op
Iteration  14: 2843,906 ns/op
Iteration  15: 2841,631 ns/op
Iteration  16: 2854,814 ns/op
Iteration  17: 2846,540 ns/op
Iteration  18: 2849,032 ns/op
Iteration  19: 2836,022 ns/op
Iteration  20: 2861,501 ns/op
Iteration  21: 2852,095 ns/op
Iteration  22: 2838,241 ns/op
Iteration  23: 2837,836 ns/op
Iteration  24: 2831,773 ns/op
Iteration  25: 2831,050 ns/op
Iteration  26: 2836,822 ns/op
Iteration  27: 2857,183 ns/op
Iteration  28: 2835,321 ns/op
Iteration  29: 2840,273 ns/op
Iteration  30: 2833,311 ns/op
Iteration  31: 2863,485 ns/op
Iteration  32: 2855,901 ns/op
Iteration  33: 2841,839 ns/op
Iteration  34: 2848,643 ns/op
Iteration  35: 2837,122 ns/op
Iteration  36: 2831,868 ns/op
Iteration  37: 2836,469 ns/op
Iteration  38: 2856,464 ns/op
Iteration  39: 2834,533 ns/op
Iteration  40: 2863,636 ns/op
Iteration  41: 2851,933 ns/op
Iteration  42: 2832,103 ns/op
Iteration  43: 2832,315 ns/op
Iteration  44: 2842,162 ns/op
Iteration  45: 2834,798 ns/op
Iteration  46: 2838,136 ns/op
Iteration  47: 2833,831 ns/op
Iteration  48: 2832,355 ns/op
Iteration  49: 2849,215 ns/op
Iteration  50: 2843,373 ns/op
Iteration  51: 2846,304 ns/op
Iteration  52: 2848,551 ns/op
Iteration  53: 2936,665 ns/op
Iteration  54: 2833,227 ns/op
Iteration  55: 2830,755 ns/op
Iteration  56: 2833,984 ns/op
Iteration  57: 2830,130 ns/op
Iteration  58: 2849,240 ns/op
Iteration  59: 2843,080 ns/op
Iteration  60: 2830,445 ns/op
Iteration  61: 2847,871 ns/op
Iteration  62: 2836,165 ns/op
Iteration  63: 2866,348 ns/op
Iteration  64: 2827,803 ns/op
Iteration  65: 2832,183 ns/op
Iteration  66: 2842,326 ns/op
Iteration  67: 2834,822 ns/op
Iteration  68: 2845,819 ns/op
Iteration  69: 2834,676 ns/op
Iteration  70: 2842,946 ns/op
Iteration  71: 2829,305 ns/op
Iteration  72: 2847,883 ns/op
Iteration  73: 2828,051 ns/op
Iteration  74: 2844,875 ns/op
Iteration  75: 2852,093 ns/op
Iteration  76: 2834,294 ns/op
Iteration  77: 2850,710 ns/op
Iteration  78: 2828,446 ns/op
Iteration  79: 2846,917 ns/op
Iteration  80: 2864,473 ns/op
Iteration  81: 2829,599 ns/op
Iteration  82: 2833,435 ns/op
Iteration  83: 2833,388 ns/op
Iteration  84: 2836,599 ns/op
Iteration  85: 2830,773 ns/op
Iteration  86: 2846,885 ns/op
Iteration  87: 2846,299 ns/op
Iteration  88: 2836,320 ns/op
Iteration  89: 2839,988 ns/op
Iteration  90: 2835,699 ns/op
Iteration  91: 2832,925 ns/op
Iteration  92: 2834,949 ns/op
Iteration  93: 2856,193 ns/op
Iteration  94: 2835,565 ns/op
Iteration  95: 2834,222 ns/op
Iteration  96: 2827,286 ns/op
Iteration  97: 2836,279 ns/op
Iteration  98: 2834,392 ns/op
Iteration  99: 2871,121 ns/op
Iteration 100: 2832,452 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  2839,423 ±(99.9%) 5,374 ns/op [Average]
  (min, avg, max) = (2807,892, 2839,423, 2936,665), stdev = 15,845
  CI (99.9%): [2834,049, 2844,797] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-20.json  avgt  100  2839,423 ± 5,374  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 404,121 ns/op
# Warmup Iteration   2: 380,116 ns/op
# Warmup Iteration   3: 380,824 ns/op
Iteration   1: 388,240 ns/op
Iteration   2: 375,814 ns/op
Iteration   3: 375,991 ns/op
Iteration   4: 380,096 ns/op
Iteration   5: 379,796 ns/op
Iteration   6: 379,002 ns/op
Iteration   7: 376,373 ns/op
Iteration   8: 377,920 ns/op
Iteration   9: 385,401 ns/op
Iteration  10: 376,355 ns/op
Iteration  11: 382,216 ns/op
Iteration  12: 380,078 ns/op
Iteration  13: 385,523 ns/op
Iteration  14: 380,789 ns/op
Iteration  15: 379,248 ns/op
Iteration  16: 380,236 ns/op
Iteration  17: 379,486 ns/op
Iteration  18: 389,736 ns/op
Iteration  19: 384,184 ns/op
Iteration  20: 378,791 ns/op
Iteration  21: 383,177 ns/op
Iteration  22: 377,812 ns/op
Iteration  23: 378,101 ns/op
Iteration  24: 379,482 ns/op
Iteration  25: 378,346 ns/op
Iteration  26: 385,624 ns/op
Iteration  27: 384,825 ns/op
Iteration  28: 386,748 ns/op
Iteration  29: 381,167 ns/op
Iteration  30: 379,476 ns/op
Iteration  31: 380,730 ns/op
Iteration  32: 378,397 ns/op
Iteration  33: 386,543 ns/op
Iteration  34: 377,436 ns/op
Iteration  35: 378,581 ns/op
Iteration  36: 383,401 ns/op
Iteration  37: 378,624 ns/op
Iteration  38: 401,477 ns/op
Iteration  39: 381,648 ns/op
Iteration  40: 380,651 ns/op
Iteration  41: 378,212 ns/op
Iteration  42: 382,086 ns/op
Iteration  43: 387,194 ns/op
Iteration  44: 377,538 ns/op
Iteration  45: 383,458 ns/op
Iteration  46: 379,599 ns/op
Iteration  47: 377,766 ns/op
Iteration  48: 380,199 ns/op
Iteration  49: 379,978 ns/op
Iteration  50: 378,969 ns/op
Iteration  51: 378,827 ns/op
Iteration  52: 379,043 ns/op
Iteration  53: 380,870 ns/op
Iteration  54: 380,003 ns/op
Iteration  55: 377,957 ns/op
Iteration  56: 378,171 ns/op
Iteration  57: 379,167 ns/op
Iteration  58: 379,650 ns/op
Iteration  59: 384,529 ns/op
Iteration  60: 378,298 ns/op
Iteration  61: 378,045 ns/op
Iteration  62: 381,372 ns/op
Iteration  63: 380,720 ns/op
Iteration  64: 377,854 ns/op
Iteration  65: 380,679 ns/op
Iteration  66: 378,792 ns/op
Iteration  67: 379,051 ns/op
Iteration  68: 378,125 ns/op
Iteration  69: 377,869 ns/op
Iteration  70: 378,417 ns/op
Iteration  71: 378,008 ns/op
Iteration  72: 378,809 ns/op
Iteration  73: 380,138 ns/op
Iteration  74: 377,902 ns/op
Iteration  75: 377,749 ns/op
Iteration  76: 379,102 ns/op
Iteration  77: 380,712 ns/op
Iteration  78: 380,113 ns/op
Iteration  79: 380,048 ns/op
Iteration  80: 377,826 ns/op
Iteration  81: 377,917 ns/op
Iteration  82: 377,953 ns/op
Iteration  83: 378,340 ns/op
Iteration  84: 378,283 ns/op
Iteration  85: 380,188 ns/op
Iteration  86: 377,711 ns/op
Iteration  87: 377,640 ns/op
Iteration  88: 379,320 ns/op
Iteration  89: 377,933 ns/op
Iteration  90: 375,958 ns/op
Iteration  91: 377,685 ns/op
Iteration  92: 378,042 ns/op
Iteration  93: 386,543 ns/op
Iteration  94: 378,173 ns/op
Iteration  95: 383,296 ns/op
Iteration  96: 378,349 ns/op
Iteration  97: 378,109 ns/op
Iteration  98: 378,800 ns/op
Iteration  99: 378,150 ns/op
Iteration 100: 381,620 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  380,204 ±(99.9%) 1,207 ns/op [Average]
  (min, avg, max) = (375,814, 380,204, 401,477), stdev = 3,560
  CI (99.9%): [378,996, 381,411] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)           (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-2.json  avgt  100  380,204 ± 1,207  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 949,627 ns/op
# Warmup Iteration   2: 863,434 ns/op
# Warmup Iteration   3: 868,615 ns/op
Iteration   1: 859,420 ns/op
Iteration   2: 870,227 ns/op
Iteration   3: 865,871 ns/op
Iteration   4: 859,704 ns/op
Iteration   5: 858,568 ns/op
Iteration   6: 860,152 ns/op
Iteration   7: 867,275 ns/op
Iteration   8: 863,237 ns/op
Iteration   9: 874,301 ns/op
Iteration  10: 868,375 ns/op
Iteration  11: 865,157 ns/op
Iteration  12: 864,222 ns/op
Iteration  13: 869,547 ns/op
Iteration  14: 867,084 ns/op
Iteration  15: 866,533 ns/op
Iteration  16: 877,704 ns/op
Iteration  17: 866,242 ns/op
Iteration  18: 864,157 ns/op
Iteration  19: 861,872 ns/op
Iteration  20: 864,233 ns/op
Iteration  21: 867,259 ns/op
Iteration  22: 867,905 ns/op
Iteration  23: 870,185 ns/op
Iteration  24: 862,294 ns/op
Iteration  25: 863,764 ns/op
Iteration  26: 863,764 ns/op
Iteration  27: 875,168 ns/op
Iteration  28: 862,028 ns/op
Iteration  29: 873,957 ns/op
Iteration  30: 868,735 ns/op
Iteration  31: 875,330 ns/op
Iteration  32: 863,557 ns/op
Iteration  33: 869,331 ns/op
Iteration  34: 871,242 ns/op
Iteration  35: 863,855 ns/op
Iteration  36: 866,880 ns/op
Iteration  37: 863,580 ns/op
Iteration  38: 862,084 ns/op
Iteration  39: 872,121 ns/op
Iteration  40: 866,098 ns/op
Iteration  41: 875,456 ns/op
Iteration  42: 883,696 ns/op
Iteration  43: 860,974 ns/op
Iteration  44: 873,384 ns/op
Iteration  45: 874,911 ns/op
Iteration  46: 870,114 ns/op
Iteration  47: 866,963 ns/op
Iteration  48: 867,696 ns/op
Iteration  49: 889,284 ns/op
Iteration  50: 875,781 ns/op
Iteration  51: 867,726 ns/op
Iteration  52: 870,619 ns/op
Iteration  53: 863,863 ns/op
Iteration  54: 867,742 ns/op
Iteration  55: 872,213 ns/op
Iteration  56: 861,750 ns/op
Iteration  57: 869,305 ns/op
Iteration  58: 863,550 ns/op
Iteration  59: 868,197 ns/op
Iteration  60: 870,432 ns/op
Iteration  61: 867,134 ns/op
Iteration  62: 866,374 ns/op
Iteration  63: 862,974 ns/op
Iteration  64: 862,400 ns/op
Iteration  65: 879,822 ns/op
Iteration  66: 871,123 ns/op
Iteration  67: 869,029 ns/op
Iteration  68: 887,791 ns/op
Iteration  69: 866,677 ns/op
Iteration  70: 862,381 ns/op
Iteration  71: 863,477 ns/op
Iteration  72: 862,586 ns/op
Iteration  73: 862,683 ns/op
Iteration  74: 873,848 ns/op
Iteration  75: 862,381 ns/op
Iteration  76: 861,477 ns/op
Iteration  77: 878,633 ns/op
Iteration  78: 880,726 ns/op
Iteration  79: 867,622 ns/op
Iteration  80: 870,325 ns/op
Iteration  81: 863,548 ns/op
Iteration  82: 868,125 ns/op
Iteration  83: 876,737 ns/op
Iteration  84: 875,852 ns/op
Iteration  85: 872,847 ns/op
Iteration  86: 863,341 ns/op
Iteration  87: 866,931 ns/op
Iteration  88: 863,762 ns/op
Iteration  89: 862,706 ns/op
Iteration  90: 864,506 ns/op
Iteration  91: 867,487 ns/op
Iteration  92: 863,693 ns/op
Iteration  93: 861,902 ns/op
Iteration  94: 868,492 ns/op
Iteration  95: 862,812 ns/op
Iteration  96: 871,838 ns/op
Iteration  97: 863,526 ns/op
Iteration  98: 865,534 ns/op
Iteration  99: 871,234 ns/op
Iteration 100: 874,451 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  868,055 ±(99.9%) 2,025 ns/op [Average]
  (min, avg, max) = (858,568, 868,055, 889,284), stdev = 5,971
  CI (99.9%): [866,030, 870,080] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)           (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-6.json  avgt  100  868,055 ± 2,025  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1478,603 ns/op
# Warmup Iteration   2: 1378,514 ns/op
# Warmup Iteration   3: 1376,578 ns/op
Iteration   1: 1367,711 ns/op
Iteration   2: 1378,636 ns/op
Iteration   3: 1373,497 ns/op
Iteration   4: 1373,594 ns/op
Iteration   5: 1366,711 ns/op
Iteration   6: 1369,294 ns/op
Iteration   7: 1380,848 ns/op
Iteration   8: 1366,437 ns/op
Iteration   9: 1371,124 ns/op
Iteration  10: 1380,680 ns/op
Iteration  11: 1380,532 ns/op
Iteration  12: 1367,550 ns/op
Iteration  13: 1385,515 ns/op
Iteration  14: 1358,153 ns/op
Iteration  15: 1385,879 ns/op
Iteration  16: 1358,142 ns/op
Iteration  17: 1370,338 ns/op
Iteration  18: 1363,581 ns/op
Iteration  19: 1373,142 ns/op
Iteration  20: 1363,222 ns/op
Iteration  21: 1353,784 ns/op
Iteration  22: 1358,227 ns/op
Iteration  23: 1355,898 ns/op
Iteration  24: 1356,293 ns/op
Iteration  25: 1357,887 ns/op
Iteration  26: 1346,752 ns/op
Iteration  27: 1366,697 ns/op
Iteration  28: 1361,922 ns/op
Iteration  29: 1357,135 ns/op
Iteration  30: 1368,544 ns/op
Iteration  31: 1360,590 ns/op
Iteration  32: 1361,942 ns/op
Iteration  33: 1355,487 ns/op
Iteration  34: 1357,946 ns/op
Iteration  35: 1356,738 ns/op
Iteration  36: 1350,855 ns/op
Iteration  37: 1362,463 ns/op
Iteration  38: 1368,802 ns/op
Iteration  39: 1356,855 ns/op
Iteration  40: 1368,805 ns/op
Iteration  41: 1355,378 ns/op
Iteration  42: 1352,368 ns/op
Iteration  43: 1359,222 ns/op
Iteration  44: 1368,781 ns/op
Iteration  45: 1360,789 ns/op
Iteration  46: 1357,544 ns/op
Iteration  47: 1355,599 ns/op
Iteration  48: 1361,641 ns/op
Iteration  49: 1353,813 ns/op
Iteration  50: 1369,288 ns/op
Iteration  51: 1368,008 ns/op
Iteration  52: 1369,518 ns/op
Iteration  53: 1370,727 ns/op
Iteration  54: 1351,685 ns/op
Iteration  55: 1356,669 ns/op
Iteration  56: 1362,405 ns/op
Iteration  57: 1365,797 ns/op
Iteration  58: 1366,974 ns/op
Iteration  59: 1352,564 ns/op
Iteration  60: 1358,568 ns/op
Iteration  61: 1359,655 ns/op
Iteration  62: 1364,868 ns/op
Iteration  63: 1358,875 ns/op
Iteration  64: 1352,811 ns/op
Iteration  65: 1362,617 ns/op
Iteration  66: 1350,657 ns/op
Iteration  67: 1365,120 ns/op
Iteration  68: 1356,748 ns/op
Iteration  69: 1375,420 ns/op
Iteration  70: 1353,507 ns/op
Iteration  71: 1357,895 ns/op
Iteration  72: 1352,970 ns/op
Iteration  73: 1353,462 ns/op
Iteration  74: 1364,342 ns/op
Iteration  75: 1354,155 ns/op
Iteration  76: 1367,179 ns/op
Iteration  77: 1351,508 ns/op
Iteration  78: 1349,746 ns/op
Iteration  79: 1397,547 ns/op
Iteration  80: 1351,557 ns/op
Iteration  81: 1353,508 ns/op
Iteration  82: 1359,198 ns/op
Iteration  83: 1366,391 ns/op
Iteration  84: 1360,601 ns/op
Iteration  85: 1353,019 ns/op
Iteration  86: 1353,219 ns/op
Iteration  87: 1359,461 ns/op
Iteration  88: 1352,497 ns/op
Iteration  89: 1355,466 ns/op
Iteration  90: 1359,265 ns/op
Iteration  91: 1349,757 ns/op
Iteration  92: 1358,336 ns/op
Iteration  93: 1366,502 ns/op
Iteration  94: 1352,762 ns/op
Iteration  95: 1356,739 ns/op
Iteration  96: 1374,492 ns/op
Iteration  97: 1351,731 ns/op
Iteration  98: 1351,594 ns/op
Iteration  99: 1362,403 ns/op
Iteration 100: 1365,586 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  1361,987 ±(99.9%) 3,111 ns/op [Average]
  (min, avg, max) = (1346,752, 1361,987, 1397,547), stdev = 9,174
  CI (99.9%): [1358,876, 1365,098] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)            (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-10.json  avgt  100  1361,987 ± 3,111  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 3341,962 ns/op
# Warmup Iteration   2: 3110,318 ns/op
# Warmup Iteration   3: 3103,425 ns/op
Iteration   1: 3089,298 ns/op
Iteration   2: 3118,586 ns/op
Iteration   3: 3103,470 ns/op
Iteration   4: 3144,566 ns/op
Iteration   5: 3091,781 ns/op
Iteration   6: 3094,990 ns/op
Iteration   7: 3087,192 ns/op
Iteration   8: 3081,314 ns/op
Iteration   9: 3086,978 ns/op
Iteration  10: 3084,667 ns/op
Iteration  11: 3093,549 ns/op
Iteration  12: 3099,149 ns/op
Iteration  13: 3090,699 ns/op
Iteration  14: 3108,977 ns/op
Iteration  15: 3129,040 ns/op
Iteration  16: 3113,608 ns/op
Iteration  17: 3112,271 ns/op
Iteration  18: 3159,850 ns/op
Iteration  19: 3126,163 ns/op
Iteration  20: 3111,786 ns/op
Iteration  21: 3110,304 ns/op
Iteration  22: 3127,371 ns/op
Iteration  23: 3117,799 ns/op
Iteration  24: 3107,423 ns/op
Iteration  25: 3108,506 ns/op
Iteration  26: 3121,865 ns/op
Iteration  27: 3111,408 ns/op
Iteration  28: 3114,144 ns/op
Iteration  29: 3156,573 ns/op
Iteration  30: 3120,461 ns/op
Iteration  31: 3109,699 ns/op
Iteration  32: 3110,283 ns/op
Iteration  33: 3118,740 ns/op
Iteration  34: 3127,789 ns/op
Iteration  35: 3192,920 ns/op
Iteration  36: 3111,884 ns/op
Iteration  37: 3101,639 ns/op
Iteration  38: 3100,665 ns/op
Iteration  39: 3190,991 ns/op
Iteration  40: 3125,797 ns/op
Iteration  41: 3112,432 ns/op
Iteration  42: 3108,462 ns/op
Iteration  43: 3100,958 ns/op
Iteration  44: 3110,385 ns/op
Iteration  45: 3121,564 ns/op
Iteration  46: 3137,009 ns/op
Iteration  47: 3096,410 ns/op
Iteration  48: 3101,963 ns/op
Iteration  49: 3098,296 ns/op
Iteration  50: 3125,647 ns/op
Iteration  51: 3102,961 ns/op
Iteration  52: 3138,214 ns/op
Iteration  53: 3112,870 ns/op
Iteration  54: 3103,676 ns/op
Iteration  55: 3098,041 ns/op
Iteration  56: 3126,054 ns/op
Iteration  57: 3139,001 ns/op
Iteration  58: 3095,354 ns/op
Iteration  59: 3104,218 ns/op
Iteration  60: 3145,938 ns/op
Iteration  61: 3125,413 ns/op
Iteration  62: 3110,967 ns/op
Iteration  63: 3118,545 ns/op
Iteration  64: 3098,753 ns/op
Iteration  65: 3101,744 ns/op
Iteration  66: 3111,558 ns/op
Iteration  67: 3107,837 ns/op
Iteration  68: 3099,697 ns/op
Iteration  69: 3125,020 ns/op
Iteration  70: 3109,106 ns/op
Iteration  71: 3166,625 ns/op
Iteration  72: 3102,864 ns/op
Iteration  73: 3103,859 ns/op
Iteration  74: 3105,342 ns/op
Iteration  75: 3107,496 ns/op
Iteration  76: 3102,971 ns/op
Iteration  77: 3103,472 ns/op
Iteration  78: 3190,818 ns/op
Iteration  79: 3102,045 ns/op
Iteration  80: 3098,657 ns/op
Iteration  81: 3108,098 ns/op
Iteration  82: 3121,886 ns/op
Iteration  83: 3170,090 ns/op
Iteration  84: 3112,899 ns/op
Iteration  85: 3120,656 ns/op
Iteration  86: 3116,444 ns/op
Iteration  87: 3100,130 ns/op
Iteration  88: 3103,389 ns/op
Iteration  89: 3121,603 ns/op
Iteration  90: 3125,939 ns/op
Iteration  91: 3098,265 ns/op
Iteration  92: 3108,126 ns/op
Iteration  93: 3127,567 ns/op
Iteration  94: 3107,773 ns/op
Iteration  95: 3192,951 ns/op
Iteration  96: 3102,166 ns/op
Iteration  97: 3107,447 ns/op
Iteration  98: 3101,235 ns/op
Iteration  99: 3120,368 ns/op
Iteration 100: 3108,976 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  3115,624 ±(99.9%) 7,688 ns/op [Average]
  (min, avg, max) = (3081,314, 3115,624, 3192,951), stdev = 22,668
  CI (99.9%): [3107,936, 3123,312] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)            (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-20.json  avgt  100  3115,624 ± 7,688  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 401,186 ns/op
# Warmup Iteration   2: 366,954 ns/op
# Warmup Iteration   3: 368,152 ns/op
Iteration   1: 364,923 ns/op
Iteration   2: 368,749 ns/op
Iteration   3: 366,752 ns/op
Iteration   4: 371,091 ns/op
Iteration   5: 366,394 ns/op
Iteration   6: 370,412 ns/op
Iteration   7: 368,951 ns/op
Iteration   8: 368,845 ns/op
Iteration   9: 367,963 ns/op
Iteration  10: 367,617 ns/op
Iteration  11: 366,168 ns/op
Iteration  12: 369,091 ns/op
Iteration  13: 367,058 ns/op
Iteration  14: 368,341 ns/op
Iteration  15: 370,436 ns/op
Iteration  16: 369,505 ns/op
Iteration  17: 367,373 ns/op
Iteration  18: 368,018 ns/op
Iteration  19: 371,893 ns/op
Iteration  20: 377,094 ns/op
Iteration  21: 369,643 ns/op
Iteration  22: 368,078 ns/op
Iteration  23: 369,799 ns/op
Iteration  24: 368,589 ns/op
Iteration  25: 369,008 ns/op
Iteration  26: 368,295 ns/op
Iteration  27: 368,451 ns/op
Iteration  28: 370,452 ns/op
Iteration  29: 368,512 ns/op
Iteration  30: 369,526 ns/op
Iteration  31: 370,553 ns/op
Iteration  32: 368,599 ns/op
Iteration  33: 368,964 ns/op
Iteration  34: 368,564 ns/op
Iteration  35: 367,883 ns/op
Iteration  36: 367,783 ns/op
Iteration  37: 367,872 ns/op
Iteration  38: 370,264 ns/op
Iteration  39: 370,265 ns/op
Iteration  40: 367,973 ns/op
Iteration  41: 369,683 ns/op
Iteration  42: 368,629 ns/op
Iteration  43: 370,683 ns/op
Iteration  44: 368,184 ns/op
Iteration  45: 368,004 ns/op
Iteration  46: 367,874 ns/op
Iteration  47: 368,506 ns/op
Iteration  48: 368,937 ns/op
Iteration  49: 370,154 ns/op
Iteration  50: 371,618 ns/op
Iteration  51: 369,300 ns/op
Iteration  52: 370,543 ns/op
Iteration  53: 368,788 ns/op
Iteration  54: 369,033 ns/op
Iteration  55: 368,447 ns/op
Iteration  56: 367,129 ns/op
Iteration  57: 366,345 ns/op
Iteration  58: 370,161 ns/op
Iteration  59: 369,713 ns/op
Iteration  60: 367,965 ns/op
Iteration  61: 368,614 ns/op
Iteration  62: 367,793 ns/op
Iteration  63: 366,550 ns/op
Iteration  64: 368,641 ns/op
Iteration  65: 367,874 ns/op
Iteration  66: 366,169 ns/op
Iteration  67: 368,286 ns/op
Iteration  68: 367,489 ns/op
Iteration  69: 369,042 ns/op
Iteration  70: 368,193 ns/op
Iteration  71: 369,052 ns/op
Iteration  72: 371,628 ns/op
Iteration  73: 368,544 ns/op
Iteration  74: 366,300 ns/op
Iteration  75: 367,856 ns/op
Iteration  76: 367,899 ns/op
Iteration  77: 366,079 ns/op
Iteration  78: 368,696 ns/op
Iteration  79: 366,960 ns/op
Iteration  80: 366,598 ns/op
Iteration  81: 373,127 ns/op
Iteration  82: 370,013 ns/op
Iteration  83: 369,411 ns/op
Iteration  84: 369,669 ns/op
Iteration  85: 367,416 ns/op
Iteration  86: 370,961 ns/op
Iteration  87: 367,506 ns/op
Iteration  88: 368,721 ns/op
Iteration  89: 366,916 ns/op
Iteration  90: 369,937 ns/op
Iteration  91: 370,064 ns/op
Iteration  92: 369,076 ns/op
Iteration  93: 365,927 ns/op
Iteration  94: 373,282 ns/op
Iteration  95: 366,293 ns/op
Iteration  96: 368,538 ns/op
Iteration  97: 366,605 ns/op
Iteration  98: 366,286 ns/op
Iteration  99: 367,552 ns/op
Iteration 100: 367,898 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  368,689 ±(99.9%) 0,599 ns/op [Average]
  (min, avg, max) = (364,923, 368,689, 377,094), stdev = 1,767
  CI (99.9%): [368,090, 369,289] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                     (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-2.json  avgt  100  368,689 ± 0,599  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 856,923 ns/op
# Warmup Iteration   2: 813,721 ns/op
# Warmup Iteration   3: 818,610 ns/op
Iteration   1: 812,960 ns/op
Iteration   2: 814,918 ns/op
Iteration   3: 822,113 ns/op
Iteration   4: 822,795 ns/op
Iteration   5: 821,105 ns/op
Iteration   6: 813,172 ns/op
Iteration   7: 815,479 ns/op
Iteration   8: 811,283 ns/op
Iteration   9: 812,729 ns/op
Iteration  10: 812,481 ns/op
Iteration  11: 812,891 ns/op
Iteration  12: 815,747 ns/op
Iteration  13: 812,433 ns/op
Iteration  14: 818,222 ns/op
Iteration  15: 814,885 ns/op
Iteration  16: 816,412 ns/op
Iteration  17: 819,000 ns/op
Iteration  18: 819,611 ns/op
Iteration  19: 837,723 ns/op
Iteration  20: 821,205 ns/op
Iteration  21: 822,871 ns/op
Iteration  22: 818,483 ns/op
Iteration  23: 828,874 ns/op
Iteration  24: 829,800 ns/op
Iteration  25: 814,211 ns/op
Iteration  26: 819,904 ns/op
Iteration  27: 815,471 ns/op
Iteration  28: 813,647 ns/op
Iteration  29: 821,212 ns/op
Iteration  30: 822,772 ns/op
Iteration  31: 815,783 ns/op
Iteration  32: 818,523 ns/op
Iteration  33: 815,157 ns/op
Iteration  34: 840,194 ns/op
Iteration  35: 817,347 ns/op
Iteration  36: 838,057 ns/op
Iteration  37: 813,445 ns/op
Iteration  38: 816,292 ns/op
Iteration  39: 814,933 ns/op
Iteration  40: 821,255 ns/op
Iteration  41: 818,619 ns/op
Iteration  42: 814,694 ns/op
Iteration  43: 813,832 ns/op
Iteration  44: 819,355 ns/op
Iteration  45: 823,424 ns/op
Iteration  46: 816,633 ns/op
Iteration  47: 825,695 ns/op
Iteration  48: 813,818 ns/op
Iteration  49: 814,328 ns/op
Iteration  50: 814,844 ns/op
Iteration  51: 814,236 ns/op
Iteration  52: 814,330 ns/op
Iteration  53: 814,979 ns/op
Iteration  54: 815,880 ns/op
Iteration  55: 815,301 ns/op
Iteration  56: 814,457 ns/op
Iteration  57: 817,960 ns/op
Iteration  58: 816,277 ns/op
Iteration  59: 818,723 ns/op
Iteration  60: 817,998 ns/op
Iteration  61: 819,189 ns/op
Iteration  62: 823,510 ns/op
Iteration  63: 822,543 ns/op
Iteration  64: 815,180 ns/op
Iteration  65: 817,029 ns/op
Iteration  66: 815,259 ns/op
Iteration  67: 814,810 ns/op
Iteration  68: 813,829 ns/op
Iteration  69: 813,718 ns/op
Iteration  70: 815,862 ns/op
Iteration  71: 815,509 ns/op
Iteration  72: 813,053 ns/op
Iteration  73: 815,418 ns/op
Iteration  74: 813,520 ns/op
Iteration  75: 825,839 ns/op
Iteration  76: 813,570 ns/op
Iteration  77: 814,676 ns/op
Iteration  78: 820,249 ns/op
Iteration  79: 813,776 ns/op
Iteration  80: 817,588 ns/op
Iteration  81: 812,714 ns/op
Iteration  82: 815,636 ns/op
Iteration  83: 819,652 ns/op
Iteration  84: 818,258 ns/op
Iteration  85: 816,242 ns/op
Iteration  86: 812,946 ns/op
Iteration  87: 815,762 ns/op
Iteration  88: 816,160 ns/op
Iteration  89: 813,942 ns/op
Iteration  90: 827,720 ns/op
Iteration  91: 812,723 ns/op
Iteration  92: 819,275 ns/op
Iteration  93: 813,602 ns/op
Iteration  94: 815,002 ns/op
Iteration  95: 814,453 ns/op
Iteration  96: 817,915 ns/op
Iteration  97: 814,380 ns/op
Iteration  98: 813,433 ns/op
Iteration  99: 824,233 ns/op
Iteration 100: 815,002 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  817,640 ±(99.9%) 1,819 ns/op [Average]
  (min, avg, max) = (811,283, 817,640, 840,194), stdev = 5,362
  CI (99.9%): [815,821, 819,458] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                     (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-6.json  avgt  100  817,640 ± 1,819  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1355,413 ns/op
# Warmup Iteration   2: 1299,914 ns/op
# Warmup Iteration   3: 1305,701 ns/op
Iteration   1: 1292,718 ns/op
Iteration   2: 1292,086 ns/op
Iteration   3: 1299,305 ns/op
Iteration   4: 1302,684 ns/op
Iteration   5: 1301,232 ns/op
Iteration   6: 1303,105 ns/op
Iteration   7: 1299,288 ns/op
Iteration   8: 1291,207 ns/op
Iteration   9: 1298,496 ns/op
Iteration  10: 1292,659 ns/op
Iteration  11: 1292,267 ns/op
Iteration  12: 1292,712 ns/op
Iteration  13: 1305,338 ns/op
Iteration  14: 1308,521 ns/op
Iteration  15: 1304,721 ns/op
Iteration  16: 1304,137 ns/op
Iteration  17: 1301,826 ns/op
Iteration  18: 1313,430 ns/op
Iteration  19: 1309,196 ns/op
Iteration  20: 1305,897 ns/op
Iteration  21: 1319,069 ns/op
Iteration  22: 1322,682 ns/op
Iteration  23: 1311,532 ns/op
Iteration  24: 1304,734 ns/op
Iteration  25: 1305,188 ns/op
Iteration  26: 1304,184 ns/op
Iteration  27: 1310,653 ns/op
Iteration  28: 1315,026 ns/op
Iteration  29: 1307,456 ns/op
Iteration  30: 1307,025 ns/op
Iteration  31: 1304,505 ns/op
Iteration  32: 1304,806 ns/op
Iteration  33: 1311,546 ns/op
Iteration  34: 1325,269 ns/op
Iteration  35: 1305,989 ns/op
Iteration  36: 1309,641 ns/op
Iteration  37: 1308,867 ns/op
Iteration  38: 1304,868 ns/op
Iteration  39: 1329,899 ns/op
Iteration  40: 1305,224 ns/op
Iteration  41: 1305,357 ns/op
Iteration  42: 1314,023 ns/op
Iteration  43: 1304,450 ns/op
Iteration  44: 1307,579 ns/op
Iteration  45: 1304,406 ns/op
Iteration  46: 1305,681 ns/op
Iteration  47: 1306,885 ns/op
Iteration  48: 1311,459 ns/op
Iteration  49: 1305,267 ns/op
Iteration  50: 1313,486 ns/op
Iteration  51: 1308,028 ns/op
Iteration  52: 1312,492 ns/op
Iteration  53: 1304,452 ns/op
Iteration  54: 1307,305 ns/op
Iteration  55: 1304,131 ns/op
Iteration  56: 1312,057 ns/op
Iteration  57: 1306,334 ns/op
Iteration  58: 1306,746 ns/op
Iteration  59: 1316,716 ns/op
Iteration  60: 1303,488 ns/op
Iteration  61: 1319,433 ns/op
Iteration  62: 1310,160 ns/op
Iteration  63: 1320,884 ns/op
Iteration  64: 1302,228 ns/op
Iteration  65: 1302,639 ns/op
Iteration  66: 1343,953 ns/op
Iteration  67: 1316,724 ns/op
Iteration  68: 1304,874 ns/op
Iteration  69: 1307,170 ns/op
Iteration  70: 1312,278 ns/op
Iteration  71: 1326,378 ns/op
Iteration  72: 1304,527 ns/op
Iteration  73: 1304,157 ns/op
Iteration  74: 1304,969 ns/op
Iteration  75: 1305,676 ns/op
Iteration  76: 1321,727 ns/op
Iteration  77: 1302,307 ns/op
Iteration  78: 1312,893 ns/op
Iteration  79: 1305,176 ns/op
Iteration  80: 1305,135 ns/op
Iteration  81: 1306,465 ns/op
Iteration  82: 1301,524 ns/op
Iteration  83: 1303,257 ns/op
Iteration  84: 1316,362 ns/op
Iteration  85: 1306,589 ns/op
Iteration  86: 1303,160 ns/op
Iteration  87: 1304,363 ns/op
Iteration  88: 1305,482 ns/op
Iteration  89: 1303,667 ns/op
Iteration  90: 1304,091 ns/op
Iteration  91: 1306,331 ns/op
Iteration  92: 1302,391 ns/op
Iteration  93: 1304,837 ns/op
Iteration  94: 1306,803 ns/op
Iteration  95: 1303,948 ns/op
Iteration  96: 1316,425 ns/op
Iteration  97: 1314,831 ns/op
Iteration  98: 1317,196 ns/op
Iteration  99: 1321,725 ns/op
Iteration 100: 1309,549 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  1307,816 ±(99.9%) 2,763 ns/op [Average]
  (min, avg, max) = (1291,207, 1307,816, 1343,953), stdev = 8,146
  CI (99.9%): [1305,053, 1310,579] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                      (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-10.json  avgt  100  1307,816 ± 2,763  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 3526,410 ns/op
# Warmup Iteration   2: 3328,885 ns/op
# Warmup Iteration   3: 3374,661 ns/op
Iteration   1: 3344,811 ns/op
Iteration   2: 3393,856 ns/op
Iteration   3: 3360,394 ns/op
Iteration   4: 3382,355 ns/op
Iteration   5: 3341,791 ns/op
Iteration   6: 3352,297 ns/op
Iteration   7: 3398,615 ns/op
Iteration   8: 3363,010 ns/op
Iteration   9: 3404,056 ns/op
Iteration  10: 3361,201 ns/op
Iteration  11: 3346,330 ns/op
Iteration  12: 3391,132 ns/op
Iteration  13: 3370,063 ns/op
Iteration  14: 3294,774 ns/op
Iteration  15: 3331,101 ns/op
Iteration  16: 3308,712 ns/op
Iteration  17: 3324,222 ns/op
Iteration  18: 3321,079 ns/op
Iteration  19: 3322,010 ns/op
Iteration  20: 3302,907 ns/op
Iteration  21: 3343,292 ns/op
Iteration  22: 3307,366 ns/op
Iteration  23: 3306,928 ns/op
Iteration  24: 3304,200 ns/op
Iteration  25: 3300,920 ns/op
Iteration  26: 3308,448 ns/op
Iteration  27: 3299,240 ns/op
Iteration  28: 3317,662 ns/op
Iteration  29: 3338,335 ns/op
Iteration  30: 3315,372 ns/op
Iteration  31: 3342,749 ns/op
Iteration  32: 3314,729 ns/op
Iteration  33: 3351,207 ns/op
Iteration  34: 3326,892 ns/op
Iteration  35: 3320,562 ns/op
Iteration  36: 3337,380 ns/op
Iteration  37: 3321,722 ns/op
Iteration  38: 3298,226 ns/op
Iteration  39: 3339,728 ns/op
Iteration  40: 3309,378 ns/op
Iteration  41: 3322,255 ns/op
Iteration  42: 3301,883 ns/op
Iteration  43: 3319,173 ns/op
Iteration  44: 3303,246 ns/op
Iteration  45: 3300,895 ns/op
Iteration  46: 3303,344 ns/op
Iteration  47: 3312,123 ns/op
Iteration  48: 3305,043 ns/op
Iteration  49: 3317,738 ns/op
Iteration  50: 3371,337 ns/op
Iteration  51: 3307,417 ns/op
Iteration  52: 3305,268 ns/op
Iteration  53: 3329,472 ns/op
Iteration  54: 3295,315 ns/op
Iteration  55: 3298,796 ns/op
Iteration  56: 3376,921 ns/op
Iteration  57: 3307,254 ns/op
Iteration  58: 3318,564 ns/op
Iteration  59: 3318,533 ns/op
Iteration  60: 3322,486 ns/op
Iteration  61: 3341,402 ns/op
Iteration  62: 3418,649 ns/op
Iteration  63: 3319,535 ns/op
Iteration  64: 3304,205 ns/op
Iteration  65: 3313,212 ns/op
Iteration  66: 3326,966 ns/op
Iteration  67: 3364,812 ns/op
Iteration  68: 3307,819 ns/op
Iteration  69: 3305,034 ns/op
Iteration  70: 3307,611 ns/op
Iteration  71: 3335,888 ns/op
Iteration  72: 3332,904 ns/op
Iteration  73: 3302,076 ns/op
Iteration  74: 3308,369 ns/op
Iteration  75: 3358,310 ns/op
Iteration  76: 3334,143 ns/op
Iteration  77: 3317,756 ns/op
Iteration  78: 3299,876 ns/op
Iteration  79: 3307,160 ns/op
Iteration  80: 3346,544 ns/op
Iteration  81: 3339,787 ns/op
Iteration  82: 3302,612 ns/op
Iteration  83: 3307,957 ns/op
Iteration  84: 3311,185 ns/op
Iteration  85: 3333,253 ns/op
Iteration  86: 3319,159 ns/op
Iteration  87: 3323,045 ns/op
Iteration  88: 3344,678 ns/op
Iteration  89: 3329,672 ns/op
Iteration  90: 3361,492 ns/op
Iteration  91: 3296,351 ns/op
Iteration  92: 3320,192 ns/op
Iteration  93: 3296,383 ns/op
Iteration  94: 3335,693 ns/op
Iteration  95: 3300,414 ns/op
Iteration  96: 3321,758 ns/op
Iteration  97: 3300,382 ns/op
Iteration  98: 3300,487 ns/op
Iteration  99: 3326,783 ns/op
Iteration 100: 3342,278 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  3327,219 ±(99.9%) 9,147 ns/op [Average]
  (min, avg, max) = (3294,774, 3327,219, 3418,649), stdev = 26,970
  CI (99.9%): [3318,073, 3336,366] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                      (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-20.json  avgt  100  3327,219 ± 9,147  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 400,410 ns/op
# Warmup Iteration   2: 364,808 ns/op
# Warmup Iteration   3: 370,223 ns/op
Iteration   1: 370,678 ns/op
Iteration   2: 369,791 ns/op
Iteration   3: 368,292 ns/op
Iteration   4: 369,248 ns/op
Iteration   5: 377,051 ns/op
Iteration   6: 366,962 ns/op
Iteration   7: 369,454 ns/op
Iteration   8: 377,804 ns/op
Iteration   9: 368,153 ns/op
Iteration  10: 368,969 ns/op
Iteration  11: 370,651 ns/op
Iteration  12: 368,830 ns/op
Iteration  13: 367,201 ns/op
Iteration  14: 368,744 ns/op
Iteration  15: 367,650 ns/op
Iteration  16: 367,039 ns/op
Iteration  17: 369,882 ns/op
Iteration  18: 372,854 ns/op
Iteration  19: 367,498 ns/op
Iteration  20: 376,989 ns/op
Iteration  21: 371,335 ns/op
Iteration  22: 370,994 ns/op
Iteration  23: 372,607 ns/op
Iteration  24: 369,128 ns/op
Iteration  25: 368,695 ns/op
Iteration  26: 368,332 ns/op
Iteration  27: 370,681 ns/op
Iteration  28: 368,800 ns/op
Iteration  29: 375,252 ns/op
Iteration  30: 367,302 ns/op
Iteration  31: 367,027 ns/op
Iteration  32: 366,005 ns/op
Iteration  33: 374,281 ns/op
Iteration  34: 368,044 ns/op
Iteration  35: 367,265 ns/op
Iteration  36: 369,280 ns/op
Iteration  37: 372,695 ns/op
Iteration  38: 369,223 ns/op
Iteration  39: 366,009 ns/op
Iteration  40: 367,163 ns/op
Iteration  41: 377,258 ns/op
Iteration  42: 368,431 ns/op
Iteration  43: 365,890 ns/op
Iteration  44: 373,338 ns/op
Iteration  45: 370,217 ns/op
Iteration  46: 368,904 ns/op
Iteration  47: 369,693 ns/op
Iteration  48: 372,149 ns/op
Iteration  49: 366,985 ns/op
Iteration  50: 375,020 ns/op
Iteration  51: 374,181 ns/op
Iteration  52: 369,254 ns/op
Iteration  53: 373,099 ns/op
Iteration  54: 369,097 ns/op
Iteration  55: 380,110 ns/op
Iteration  56: 368,057 ns/op
Iteration  57: 375,279 ns/op
Iteration  58: 366,555 ns/op
Iteration  59: 366,723 ns/op
Iteration  60: 366,057 ns/op
Iteration  61: 368,509 ns/op
Iteration  62: 368,383 ns/op
Iteration  63: 369,582 ns/op
Iteration  64: 371,103 ns/op
Iteration  65: 370,463 ns/op
Iteration  66: 370,510 ns/op
Iteration  67: 372,741 ns/op
Iteration  68: 367,382 ns/op
Iteration  69: 376,607 ns/op
Iteration  70: 375,658 ns/op
Iteration  71: 368,388 ns/op
Iteration  72: 366,294 ns/op
Iteration  73: 366,530 ns/op
Iteration  74: 367,646 ns/op
Iteration  75: 369,603 ns/op
Iteration  76: 370,140 ns/op
Iteration  77: 381,031 ns/op
Iteration  78: 367,347 ns/op
Iteration  79: 367,728 ns/op
Iteration  80: 371,455 ns/op
Iteration  81: 366,547 ns/op
Iteration  82: 368,765 ns/op
Iteration  83: 370,010 ns/op
Iteration  84: 367,026 ns/op
Iteration  85: 366,839 ns/op
Iteration  86: 366,504 ns/op
Iteration  87: 366,245 ns/op
Iteration  88: 368,274 ns/op
Iteration  89: 379,640 ns/op
Iteration  90: 372,585 ns/op
Iteration  91: 366,338 ns/op
Iteration  92: 368,204 ns/op
Iteration  93: 366,680 ns/op
Iteration  94: 368,626 ns/op
Iteration  95: 370,410 ns/op
Iteration  96: 370,718 ns/op
Iteration  97: 371,737 ns/op
Iteration  98: 368,279 ns/op
Iteration  99: 367,618 ns/op
Iteration 100: 368,948 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  369,972 ±(99.9%) 1,156 ns/op [Average]
  (min, avg, max) = (365,890, 369,972, 381,031), stdev = 3,409
  CI (99.9%): [368,816, 371,129] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)               (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-2.json  avgt  100  369,972 ± 1,156  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 941,694 ns/op
# Warmup Iteration   2: 882,386 ns/op
# Warmup Iteration   3: 893,093 ns/op
Iteration   1: 903,157 ns/op
Iteration   2: 893,088 ns/op
Iteration   3: 896,011 ns/op
Iteration   4: 907,402 ns/op
Iteration   5: 886,277 ns/op
Iteration   6: 890,259 ns/op
Iteration   7: 890,084 ns/op
Iteration   8: 890,333 ns/op
Iteration   9: 893,996 ns/op
Iteration  10: 907,307 ns/op
Iteration  11: 893,126 ns/op
Iteration  12: 897,994 ns/op
Iteration  13: 887,844 ns/op
Iteration  14: 887,257 ns/op
Iteration  15: 887,831 ns/op
Iteration  16: 888,911 ns/op
Iteration  17: 889,446 ns/op
Iteration  18: 893,256 ns/op
Iteration  19: 896,335 ns/op
Iteration  20: 890,580 ns/op
Iteration  21: 909,972 ns/op
Iteration  22: 894,304 ns/op
Iteration  23: 887,422 ns/op
Iteration  24: 892,776 ns/op
Iteration  25: 928,225 ns/op
Iteration  26: 896,135 ns/op
Iteration  27: 893,879 ns/op
Iteration  28: 900,456 ns/op
Iteration  29: 887,815 ns/op
Iteration  30: 892,232 ns/op
Iteration  31: 899,193 ns/op
Iteration  32: 887,990 ns/op
Iteration  33: 900,231 ns/op
Iteration  34: 900,886 ns/op
Iteration  35: 894,643 ns/op
Iteration  36: 894,906 ns/op
Iteration  37: 892,245 ns/op
Iteration  38: 888,373 ns/op
Iteration  39: 887,255 ns/op
Iteration  40: 896,315 ns/op
Iteration  41: 889,884 ns/op
Iteration  42: 893,040 ns/op
Iteration  43: 889,590 ns/op
Iteration  44: 892,972 ns/op
Iteration  45: 892,013 ns/op
Iteration  46: 891,088 ns/op
Iteration  47: 892,028 ns/op
Iteration  48: 911,298 ns/op
Iteration  49: 887,153 ns/op
Iteration  50: 891,220 ns/op
Iteration  51: 887,370 ns/op
Iteration  52: 888,951 ns/op
Iteration  53: 888,489 ns/op
Iteration  54: 892,469 ns/op
Iteration  55: 887,080 ns/op
Iteration  56: 887,844 ns/op
Iteration  57: 886,826 ns/op
Iteration  58: 887,782 ns/op
Iteration  59: 893,074 ns/op
Iteration  60: 888,021 ns/op
Iteration  61: 887,747 ns/op
Iteration  62: 890,800 ns/op
Iteration  63: 887,959 ns/op
Iteration  64: 893,730 ns/op
Iteration  65: 890,923 ns/op
Iteration  66: 909,590 ns/op
Iteration  67: 888,101 ns/op
Iteration  68: 900,115 ns/op
Iteration  69: 892,430 ns/op
Iteration  70: 888,634 ns/op
Iteration  71: 892,360 ns/op
Iteration  72: 887,339 ns/op
Iteration  73: 891,872 ns/op
Iteration  74: 892,525 ns/op
Iteration  75: 888,434 ns/op
Iteration  76: 896,042 ns/op
Iteration  77: 887,535 ns/op
Iteration  78: 890,140 ns/op
Iteration  79: 890,691 ns/op
Iteration  80: 892,384 ns/op
Iteration  81: 893,234 ns/op
Iteration  82: 888,125 ns/op
Iteration  83: 889,578 ns/op
Iteration  84: 888,196 ns/op
Iteration  85: 894,817 ns/op
Iteration  86: 886,936 ns/op
Iteration  87: 890,746 ns/op
Iteration  88: 888,555 ns/op
Iteration  89: 887,126 ns/op
Iteration  90: 887,921 ns/op
Iteration  91: 896,264 ns/op
Iteration  92: 890,255 ns/op
Iteration  93: 888,041 ns/op
Iteration  94: 893,806 ns/op
Iteration  95: 901,992 ns/op
Iteration  96: 887,508 ns/op
Iteration  97: 891,322 ns/op
Iteration  98: 887,955 ns/op
Iteration  99: 899,442 ns/op
Iteration 100: 888,221 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  892,733 ±(99.9%) 2,220 ns/op [Average]
  (min, avg, max) = (886,277, 892,733, 928,225), stdev = 6,544
  CI (99.9%): [890,514, 894,953] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)               (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-6.json  avgt  100  892,733 ± 2,220  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1395,168 ns/op
# Warmup Iteration   2: 1320,723 ns/op
# Warmup Iteration   3: 1331,015 ns/op
Iteration   1: 1345,931 ns/op
Iteration   2: 1329,071 ns/op
Iteration   3: 1330,700 ns/op
Iteration   4: 1341,209 ns/op
Iteration   5: 1327,463 ns/op
Iteration   6: 1334,424 ns/op
Iteration   7: 1339,050 ns/op
Iteration   8: 1370,150 ns/op
Iteration   9: 1333,472 ns/op
Iteration  10: 1358,751 ns/op
Iteration  11: 1326,268 ns/op
Iteration  12: 1335,552 ns/op
Iteration  13: 1342,202 ns/op
Iteration  14: 1341,784 ns/op
Iteration  15: 1337,368 ns/op
Iteration  16: 1340,226 ns/op
Iteration  17: 1344,822 ns/op
Iteration  18: 1336,625 ns/op
Iteration  19: 1340,732 ns/op
Iteration  20: 1338,532 ns/op
Iteration  21: 1343,129 ns/op
Iteration  22: 1340,351 ns/op
Iteration  23: 1346,055 ns/op
Iteration  24: 1335,883 ns/op
Iteration  25: 1337,630 ns/op
Iteration  26: 1344,974 ns/op
Iteration  27: 1344,072 ns/op
Iteration  28: 1349,787 ns/op
Iteration  29: 1337,462 ns/op
Iteration  30: 1344,068 ns/op
Iteration  31: 1336,916 ns/op
Iteration  32: 1342,880 ns/op
Iteration  33: 1337,754 ns/op
Iteration  34: 1336,496 ns/op
Iteration  35: 1344,440 ns/op
Iteration  36: 1336,368 ns/op
Iteration  37: 1336,710 ns/op
Iteration  38: 1334,691 ns/op
Iteration  39: 1352,041 ns/op
Iteration  40: 1343,102 ns/op
Iteration  41: 1343,559 ns/op
Iteration  42: 1337,025 ns/op
Iteration  43: 1345,055 ns/op
Iteration  44: 1337,116 ns/op
Iteration  45: 1351,197 ns/op
Iteration  46: 1341,445 ns/op
Iteration  47: 1341,983 ns/op
Iteration  48: 1339,863 ns/op
Iteration  49: 1358,266 ns/op
Iteration  50: 1338,842 ns/op
Iteration  51: 1342,838 ns/op
Iteration  52: 1333,929 ns/op
Iteration  53: 1339,350 ns/op
Iteration  54: 1334,679 ns/op
Iteration  55: 1338,522 ns/op
Iteration  56: 1345,210 ns/op
Iteration  57: 1335,547 ns/op
Iteration  58: 1335,744 ns/op
Iteration  59: 1335,899 ns/op
Iteration  60: 1337,311 ns/op
Iteration  61: 1335,871 ns/op
Iteration  62: 1341,465 ns/op
Iteration  63: 1336,316 ns/op
Iteration  64: 1338,331 ns/op
Iteration  65: 1335,980 ns/op
Iteration  66: 1335,144 ns/op
Iteration  67: 1340,674 ns/op
Iteration  68: 1342,573 ns/op
Iteration  69: 1339,426 ns/op
Iteration  70: 1336,342 ns/op
Iteration  71: 1338,978 ns/op
Iteration  72: 1335,079 ns/op
Iteration  73: 1336,918 ns/op
Iteration  74: 1337,240 ns/op
Iteration  75: 1348,305 ns/op
Iteration  76: 1337,373 ns/op
Iteration  77: 1336,016 ns/op
Iteration  78: 1364,596 ns/op
Iteration  79: 1342,206 ns/op
Iteration  80: 1336,017 ns/op
Iteration  81: 1336,000 ns/op
Iteration  82: 1337,311 ns/op
Iteration  83: 1334,751 ns/op
Iteration  84: 1341,028 ns/op
Iteration  85: 1357,162 ns/op
Iteration  86: 1335,145 ns/op
Iteration  87: 1351,671 ns/op
Iteration  88: 1355,831 ns/op
Iteration  89: 1347,774 ns/op
Iteration  90: 1348,803 ns/op
Iteration  91: 1344,126 ns/op
Iteration  92: 1340,705 ns/op
Iteration  93: 1341,337 ns/op
Iteration  94: 1336,234 ns/op
Iteration  95: 1342,846 ns/op
Iteration  96: 1337,090 ns/op
Iteration  97: 1343,437 ns/op
Iteration  98: 1335,221 ns/op
Iteration  99: 1339,595 ns/op
Iteration 100: 1343,553 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  1340,770 ±(99.9%) 2,401 ns/op [Average]
  (min, avg, max) = (1326,268, 1340,770, 1370,150), stdev = 7,080
  CI (99.9%): [1338,369, 1343,171] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)                (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-10.json  avgt  100  1340,770 ± 2,401  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 2851,229 ns/op
# Warmup Iteration   2: 2701,482 ns/op
# Warmup Iteration   3: 2728,639 ns/op
Iteration   1: 2725,542 ns/op
Iteration   2: 2726,466 ns/op
Iteration   3: 2730,203 ns/op
Iteration   4: 2733,560 ns/op
Iteration   5: 2733,501 ns/op
Iteration   6: 2726,700 ns/op
Iteration   7: 2763,087 ns/op
Iteration   8: 2717,223 ns/op
Iteration   9: 2736,261 ns/op
Iteration  10: 2718,938 ns/op
Iteration  11: 2737,291 ns/op
Iteration  12: 2722,636 ns/op
Iteration  13: 2736,386 ns/op
Iteration  14: 2755,036 ns/op
Iteration  15: 2737,278 ns/op
Iteration  16: 2741,583 ns/op
Iteration  17: 2738,041 ns/op
Iteration  18: 2737,309 ns/op
Iteration  19: 2756,277 ns/op
Iteration  20: 2740,003 ns/op
Iteration  21: 2757,793 ns/op
Iteration  22: 2741,499 ns/op
Iteration  23: 2728,371 ns/op
Iteration  24: 2736,979 ns/op
Iteration  25: 2734,387 ns/op
Iteration  26: 2745,874 ns/op
Iteration  27: 2751,099 ns/op
Iteration  28: 2740,599 ns/op
Iteration  29: 2746,544 ns/op
Iteration  30: 2738,694 ns/op
Iteration  31: 2745,144 ns/op
Iteration  32: 2735,873 ns/op
Iteration  33: 2750,816 ns/op
Iteration  34: 2742,197 ns/op
Iteration  35: 2736,040 ns/op
Iteration  36: 2748,113 ns/op
Iteration  37: 2733,600 ns/op
Iteration  38: 2769,514 ns/op
Iteration  39: 2737,849 ns/op
Iteration  40: 2756,349 ns/op
Iteration  41: 2753,598 ns/op
Iteration  42: 2742,812 ns/op
Iteration  43: 2737,455 ns/op
Iteration  44: 2766,310 ns/op
Iteration  45: 2739,516 ns/op
Iteration  46: 2740,232 ns/op
Iteration  47: 2778,353 ns/op
Iteration  48: 2740,476 ns/op
Iteration  49: 2778,034 ns/op
Iteration  50: 2804,193 ns/op
Iteration  51: 2768,287 ns/op
Iteration  52: 2744,233 ns/op
Iteration  53: 2742,429 ns/op
Iteration  54: 2755,272 ns/op
Iteration  55: 2739,502 ns/op
Iteration  56: 2740,277 ns/op
Iteration  57: 2740,345 ns/op
Iteration  58: 2751,477 ns/op
Iteration  59: 2738,111 ns/op
Iteration  60: 2742,257 ns/op
Iteration  61: 2737,190 ns/op
Iteration  62: 2740,594 ns/op
Iteration  63: 2742,027 ns/op
Iteration  64: 2755,398 ns/op
Iteration  65: 2747,378 ns/op
Iteration  66: 2747,046 ns/op
Iteration  67: 2734,823 ns/op
Iteration  68: 2735,836 ns/op
Iteration  69: 2739,899 ns/op
Iteration  70: 2741,870 ns/op
Iteration  71: 2759,441 ns/op
Iteration  72: 2741,153 ns/op
Iteration  73: 2751,791 ns/op
Iteration  74: 2757,637 ns/op
Iteration  75: 2739,169 ns/op
Iteration  76: 2744,466 ns/op
Iteration  77: 2766,944 ns/op
Iteration  78: 2749,694 ns/op
Iteration  79: 2737,533 ns/op
Iteration  80: 2769,132 ns/op
Iteration  81: 2760,826 ns/op
Iteration  82: 2739,590 ns/op
Iteration  83: 2751,210 ns/op
Iteration  84: 2739,300 ns/op
Iteration  85: 2735,495 ns/op
Iteration  86: 2758,471 ns/op
Iteration  87: 2744,465 ns/op
Iteration  88: 2736,505 ns/op
Iteration  89: 2767,748 ns/op
Iteration  90: 2761,372 ns/op
Iteration  91: 2734,692 ns/op
Iteration  92: 2736,515 ns/op
Iteration  93: 2749,494 ns/op
Iteration  94: 2753,162 ns/op
Iteration  95: 2749,796 ns/op
Iteration  96: 2742,582 ns/op
Iteration  97: 2734,476 ns/op
Iteration  98: 2739,204 ns/op
Iteration  99: 2731,897 ns/op
Iteration 100: 2741,747 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  2744,814 ±(99.9%) 4,528 ns/op [Average]
  (min, avg, max) = (2717,223, 2744,814, 2804,193), stdev = 13,350
  CI (99.9%): [2740,286, 2749,342] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)                (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-20.json  avgt  100  2744,814 ± 4,528  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 397,943 ns/op
# Warmup Iteration   2: 373,926 ns/op
# Warmup Iteration   3: 372,214 ns/op
Iteration   1: 371,377 ns/op
Iteration   2: 373,570 ns/op
Iteration   3: 371,981 ns/op
Iteration   4: 372,795 ns/op
Iteration   5: 371,904 ns/op
Iteration   6: 372,316 ns/op
Iteration   7: 374,677 ns/op
Iteration   8: 375,949 ns/op
Iteration   9: 372,476 ns/op
Iteration  10: 375,125 ns/op
Iteration  11: 381,881 ns/op
Iteration  12: 374,001 ns/op
Iteration  13: 372,122 ns/op
Iteration  14: 372,620 ns/op
Iteration  15: 372,660 ns/op
Iteration  16: 378,672 ns/op
Iteration  17: 372,516 ns/op
Iteration  18: 373,054 ns/op
Iteration  19: 376,152 ns/op
Iteration  20: 372,972 ns/op
Iteration  21: 373,720 ns/op
Iteration  22: 379,143 ns/op
Iteration  23: 372,593 ns/op
Iteration  24: 374,771 ns/op
Iteration  25: 372,686 ns/op
Iteration  26: 375,245 ns/op
Iteration  27: 372,837 ns/op
Iteration  28: 372,917 ns/op
Iteration  29: 373,290 ns/op
Iteration  30: 372,776 ns/op
Iteration  31: 372,824 ns/op
Iteration  32: 383,783 ns/op
Iteration  33: 379,103 ns/op
Iteration  34: 372,723 ns/op
Iteration  35: 378,382 ns/op
Iteration  36: 373,505 ns/op
Iteration  37: 375,806 ns/op
Iteration  38: 372,613 ns/op
Iteration  39: 379,551 ns/op
Iteration  40: 377,432 ns/op
Iteration  41: 372,795 ns/op
Iteration  42: 375,007 ns/op
Iteration  43: 374,204 ns/op
Iteration  44: 381,570 ns/op
Iteration  45: 376,639 ns/op
Iteration  46: 372,239 ns/op
Iteration  47: 372,701 ns/op
Iteration  48: 374,202 ns/op
Iteration  49: 377,128 ns/op
Iteration  50: 376,883 ns/op
Iteration  51: 379,069 ns/op
Iteration  52: 372,617 ns/op
Iteration  53: 375,372 ns/op
Iteration  54: 372,986 ns/op
Iteration  55: 377,059 ns/op
Iteration  56: 373,917 ns/op
Iteration  57: 374,075 ns/op
Iteration  58: 372,123 ns/op
Iteration  59: 377,793 ns/op
Iteration  60: 372,192 ns/op
Iteration  61: 373,661 ns/op
Iteration  62: 375,925 ns/op
Iteration  63: 372,890 ns/op
Iteration  64: 381,969 ns/op
Iteration  65: 375,812 ns/op
Iteration  66: 373,048 ns/op
Iteration  67: 372,935 ns/op
Iteration  68: 373,569 ns/op
Iteration  69: 375,541 ns/op
Iteration  70: 376,617 ns/op
Iteration  71: 380,001 ns/op
Iteration  72: 377,833 ns/op
Iteration  73: 373,550 ns/op
Iteration  74: 373,939 ns/op
Iteration  75: 372,450 ns/op
Iteration  76: 372,689 ns/op
Iteration  77: 374,423 ns/op
Iteration  78: 374,118 ns/op
Iteration  79: 372,565 ns/op
Iteration  80: 374,783 ns/op
Iteration  81: 374,034 ns/op
Iteration  82: 374,441 ns/op
Iteration  83: 373,487 ns/op
Iteration  84: 373,066 ns/op
Iteration  85: 372,272 ns/op
Iteration  86: 372,303 ns/op
Iteration  87: 378,314 ns/op
Iteration  88: 376,539 ns/op
Iteration  89: 374,563 ns/op
Iteration  90: 376,517 ns/op
Iteration  91: 373,339 ns/op
Iteration  92: 372,274 ns/op
Iteration  93: 374,702 ns/op
Iteration  94: 373,895 ns/op
Iteration  95: 372,434 ns/op
Iteration  96: 372,948 ns/op
Iteration  97: 373,250 ns/op
Iteration  98: 372,828 ns/op
Iteration  99: 374,494 ns/op
Iteration 100: 375,176 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  374,643 ±(99.9%) 0,874 ns/op [Average]
  (min, avg, max) = (371,377, 374,643, 383,783), stdev = 2,576
  CI (99.9%): [373,769, 375,517] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)           (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-2.json  avgt  100  374,643 ± 0,874  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 868,933 ns/op
# Warmup Iteration   2: 814,949 ns/op
# Warmup Iteration   3: 810,292 ns/op
Iteration   1: 812,899 ns/op
Iteration   2: 806,682 ns/op
Iteration   3: 804,102 ns/op
Iteration   4: 807,809 ns/op
Iteration   5: 805,214 ns/op
Iteration   6: 810,599 ns/op
Iteration   7: 805,078 ns/op
Iteration   8: 808,626 ns/op
Iteration   9: 804,477 ns/op
Iteration  10: 808,869 ns/op
Iteration  11: 804,860 ns/op
Iteration  12: 809,567 ns/op
Iteration  13: 806,240 ns/op
Iteration  14: 805,696 ns/op
Iteration  15: 807,797 ns/op
Iteration  16: 807,471 ns/op
Iteration  17: 807,550 ns/op
Iteration  18: 806,536 ns/op
Iteration  19: 807,929 ns/op
Iteration  20: 808,841 ns/op
Iteration  21: 810,317 ns/op
Iteration  22: 809,026 ns/op
Iteration  23: 806,165 ns/op
Iteration  24: 810,333 ns/op
Iteration  25: 817,828 ns/op
Iteration  26: 805,447 ns/op
Iteration  27: 806,951 ns/op
Iteration  28: 808,037 ns/op
Iteration  29: 806,262 ns/op
Iteration  30: 811,279 ns/op
Iteration  31: 806,491 ns/op
Iteration  32: 806,007 ns/op
Iteration  33: 807,754 ns/op
Iteration  34: 809,398 ns/op
Iteration  35: 808,256 ns/op
Iteration  36: 805,474 ns/op
Iteration  37: 805,652 ns/op
Iteration  38: 812,363 ns/op
Iteration  39: 806,796 ns/op
Iteration  40: 811,588 ns/op
Iteration  41: 808,804 ns/op
Iteration  42: 806,066 ns/op
Iteration  43: 809,325 ns/op
Iteration  44: 806,721 ns/op
Iteration  45: 806,277 ns/op
Iteration  46: 809,362 ns/op
Iteration  47: 806,228 ns/op
Iteration  48: 804,650 ns/op
Iteration  49: 807,139 ns/op
Iteration  50: 806,337 ns/op
Iteration  51: 811,728 ns/op
Iteration  52: 805,000 ns/op
Iteration  53: 813,465 ns/op
Iteration  54: 806,575 ns/op
Iteration  55: 811,297 ns/op
Iteration  56: 808,008 ns/op
Iteration  57: 807,183 ns/op
Iteration  58: 805,731 ns/op
Iteration  59: 805,951 ns/op
Iteration  60: 807,866 ns/op
Iteration  61: 807,326 ns/op
Iteration  62: 809,349 ns/op
Iteration  63: 806,371 ns/op
Iteration  64: 808,092 ns/op
Iteration  65: 805,893 ns/op
Iteration  66: 807,377 ns/op
Iteration  67: 804,976 ns/op
Iteration  68: 806,533 ns/op
Iteration  69: 808,975 ns/op
Iteration  70: 807,155 ns/op
Iteration  71: 807,050 ns/op
Iteration  72: 808,089 ns/op
Iteration  73: 805,041 ns/op
Iteration  74: 807,681 ns/op
Iteration  75: 809,220 ns/op
Iteration  76: 811,197 ns/op
Iteration  77: 812,346 ns/op
Iteration  78: 811,617 ns/op
Iteration  79: 806,618 ns/op
Iteration  80: 807,167 ns/op
Iteration  81: 811,795 ns/op
Iteration  82: 805,457 ns/op
Iteration  83: 807,940 ns/op
Iteration  84: 822,803 ns/op
Iteration  85: 812,301 ns/op
Iteration  86: 813,780 ns/op
Iteration  87: 806,244 ns/op
Iteration  88: 820,891 ns/op
Iteration  89: 806,177 ns/op
Iteration  90: 812,506 ns/op
Iteration  91: 812,346 ns/op
Iteration  92: 805,872 ns/op
Iteration  93: 810,682 ns/op
Iteration  94: 806,809 ns/op
Iteration  95: 805,676 ns/op
Iteration  96: 808,752 ns/op
Iteration  97: 813,199 ns/op
Iteration  98: 806,717 ns/op
Iteration  99: 811,274 ns/op
Iteration 100: 806,435 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  808,377 ±(99.9%) 1,091 ns/op [Average]
  (min, avg, max) = (804,102, 808,377, 822,803), stdev = 3,216
  CI (99.9%): [807,286, 809,468] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)           (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-6.json  avgt  100  808,377 ± 1,091  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1447,990 ns/op
# Warmup Iteration   2: 1349,800 ns/op
# Warmup Iteration   3: 1363,120 ns/op
Iteration   1: 1356,440 ns/op
Iteration   2: 1370,576 ns/op
Iteration   3: 1362,978 ns/op
Iteration   4: 1355,974 ns/op
Iteration   5: 1352,680 ns/op
Iteration   6: 1362,956 ns/op
Iteration   7: 1369,272 ns/op
Iteration   8: 1361,116 ns/op
Iteration   9: 1358,064 ns/op
Iteration  10: 1357,811 ns/op
Iteration  11: 1359,615 ns/op
Iteration  12: 1356,710 ns/op
Iteration  13: 1363,312 ns/op
Iteration  14: 1368,229 ns/op
Iteration  15: 1359,911 ns/op
Iteration  16: 1365,155 ns/op
Iteration  17: 1364,430 ns/op
Iteration  18: 1363,508 ns/op
Iteration  19: 1358,963 ns/op
Iteration  20: 1360,329 ns/op
Iteration  21: 1367,589 ns/op
Iteration  22: 1366,431 ns/op
Iteration  23: 1359,773 ns/op
Iteration  24: 1355,475 ns/op
Iteration  25: 1359,930 ns/op
Iteration  26: 1361,527 ns/op
Iteration  27: 1359,323 ns/op
Iteration  28: 1360,704 ns/op
Iteration  29: 1359,679 ns/op
Iteration  30: 1372,094 ns/op
Iteration  31: 1358,636 ns/op
Iteration  32: 1358,963 ns/op
Iteration  33: 1360,500 ns/op
Iteration  34: 1365,319 ns/op
Iteration  35: 1372,379 ns/op
Iteration  36: 1356,464 ns/op
Iteration  37: 1357,396 ns/op
Iteration  38: 1362,052 ns/op
Iteration  39: 1362,455 ns/op
Iteration  40: 1360,404 ns/op
Iteration  41: 1356,927 ns/op
Iteration  42: 1369,064 ns/op
Iteration  43: 1366,487 ns/op
Iteration  44: 1356,741 ns/op
Iteration  45: 1369,768 ns/op
Iteration  46: 1362,689 ns/op
Iteration  47: 1387,390 ns/op
Iteration  48: 1366,957 ns/op
Iteration  49: 1361,331 ns/op
Iteration  50: 1360,595 ns/op
Iteration  51: 1357,456 ns/op
Iteration  52: 1356,844 ns/op
Iteration  53: 1363,024 ns/op
Iteration  54: 1359,522 ns/op
Iteration  55: 1356,126 ns/op
Iteration  56: 1359,522 ns/op
Iteration  57: 1377,027 ns/op
Iteration  58: 1360,175 ns/op
Iteration  59: 1370,585 ns/op
Iteration  60: 1360,719 ns/op
Iteration  61: 1357,991 ns/op
Iteration  62: 1364,222 ns/op
Iteration  63: 1360,776 ns/op
Iteration  64: 1379,010 ns/op
Iteration  65: 1367,015 ns/op
Iteration  66: 1378,722 ns/op
Iteration  67: 1365,164 ns/op
Iteration  68: 1364,639 ns/op
Iteration  69: 1359,207 ns/op
Iteration  70: 1389,437 ns/op
Iteration  71: 1366,254 ns/op
Iteration  72: 1371,844 ns/op
Iteration  73: 1361,634 ns/op
Iteration  74: 1359,657 ns/op
Iteration  75: 1366,956 ns/op
Iteration  76: 1370,348 ns/op
Iteration  77: 1369,697 ns/op
Iteration  78: 1383,073 ns/op
Iteration  79: 1361,588 ns/op
Iteration  80: 1366,523 ns/op
Iteration  81: 1359,419 ns/op
Iteration  82: 1358,807 ns/op
Iteration  83: 1377,598 ns/op
Iteration  84: 1370,356 ns/op
Iteration  85: 1374,371 ns/op
Iteration  86: 1365,305 ns/op
Iteration  87: 1361,664 ns/op
Iteration  88: 1368,899 ns/op
Iteration  89: 1358,022 ns/op
Iteration  90: 1365,578 ns/op
Iteration  91: 1360,521 ns/op
Iteration  92: 1360,526 ns/op
Iteration  93: 1362,471 ns/op
Iteration  94: 1368,654 ns/op
Iteration  95: 1365,214 ns/op
Iteration  96: 1369,286 ns/op
Iteration  97: 1361,023 ns/op
Iteration  98: 1365,293 ns/op
Iteration  99: 1370,980 ns/op
Iteration 100: 1365,933 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  1364,177 ±(99.9%) 2,298 ns/op [Average]
  (min, avg, max) = (1352,680, 1364,177, 1389,437), stdev = 6,775
  CI (99.9%): [1361,880, 1366,475] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)            (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-10.json  avgt  100  1364,177 ± 2,298  ns/op
# JMH version: 1.21
# VM version: JDK 1.8.0_232, OpenJDK 64-Bit Server VM, 25.232-b18
# VM invoker: /home/gardziol/.sdkman/candidates/java/8.0.232-zulu/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 3244,837 ns/op
# Warmup Iteration   2: 2984,675 ns/op
# Warmup Iteration   3: 3013,898 ns/op
Iteration   1: 3027,051 ns/op
Iteration   2: 3029,401 ns/op
Iteration   3: 3025,686 ns/op
Iteration   4: 3058,865 ns/op
Iteration   5: 3024,468 ns/op
Iteration   6: 3039,104 ns/op
Iteration   7: 3030,796 ns/op
Iteration   8: 3025,661 ns/op
Iteration   9: 3032,975 ns/op
Iteration  10: 3040,975 ns/op
Iteration  11: 3026,894 ns/op
Iteration  12: 3042,514 ns/op
Iteration  13: 3029,728 ns/op
Iteration  14: 3015,064 ns/op
Iteration  15: 3037,510 ns/op
Iteration  16: 3025,884 ns/op
Iteration  17: 3019,883 ns/op
Iteration  18: 3041,122 ns/op
Iteration  19: 3037,675 ns/op
Iteration  20: 3039,130 ns/op
Iteration  21: 3037,182 ns/op
Iteration  22: 3019,813 ns/op
Iteration  23: 3026,502 ns/op
Iteration  24: 3032,109 ns/op
Iteration  25: 3017,054 ns/op
Iteration  26: 3032,808 ns/op
Iteration  27: 3012,525 ns/op
Iteration  28: 3019,298 ns/op
Iteration  29: 3040,480 ns/op
Iteration  30: 3022,775 ns/op
Iteration  31: 3020,169 ns/op
Iteration  32: 3021,413 ns/op
Iteration  33: 3054,638 ns/op
Iteration  34: 3052,424 ns/op
Iteration  35: 3027,183 ns/op
Iteration  36: 3016,697 ns/op
Iteration  37: 3034,240 ns/op
Iteration  38: 3019,831 ns/op
Iteration  39: 3018,114 ns/op
Iteration  40: 3023,426 ns/op
Iteration  41: 3019,824 ns/op
Iteration  42: 3021,521 ns/op
Iteration  43: 3023,696 ns/op
Iteration  44: 3019,331 ns/op
Iteration  45: 3020,936 ns/op
Iteration  46: 3018,862 ns/op
Iteration  47: 3019,166 ns/op
Iteration  48: 3043,539 ns/op
Iteration  49: 3016,344 ns/op
Iteration  50: 3038,744 ns/op
Iteration  51: 3027,159 ns/op
Iteration  52: 3034,286 ns/op
Iteration  53: 3013,813 ns/op
Iteration  54: 3023,802 ns/op
Iteration  55: 3021,815 ns/op
Iteration  56: 3026,076 ns/op
Iteration  57: 3020,512 ns/op
Iteration  58: 3025,025 ns/op
Iteration  59: 3017,115 ns/op
Iteration  60: 3031,079 ns/op
Iteration  61: 3018,177 ns/op
Iteration  62: 3023,210 ns/op
Iteration  63: 3036,608 ns/op
Iteration  64: 3048,626 ns/op
Iteration  65: 3033,468 ns/op
Iteration  66: 3056,930 ns/op
Iteration  67: 3024,027 ns/op
Iteration  68: 3018,558 ns/op
Iteration  69: 3022,311 ns/op
Iteration  70: 3027,994 ns/op
Iteration  71: 3017,010 ns/op
Iteration  72: 3035,953 ns/op
Iteration  73: 3021,097 ns/op
Iteration  74: 3047,243 ns/op
Iteration  75: 3016,519 ns/op
Iteration  76: 3054,436 ns/op
Iteration  77: 3035,333 ns/op
Iteration  78: 3037,271 ns/op
Iteration  79: 3025,363 ns/op
Iteration  80: 3016,213 ns/op
Iteration  81: 3034,137 ns/op
Iteration  82: 3022,078 ns/op
Iteration  83: 3016,591 ns/op
Iteration  84: 3008,361 ns/op
Iteration  85: 3009,016 ns/op
Iteration  86: 3015,205 ns/op
Iteration  87: 3018,390 ns/op
Iteration  88: 3015,045 ns/op
Iteration  89: 3023,113 ns/op
Iteration  90: 3012,496 ns/op
Iteration  91: 3013,995 ns/op
Iteration  92: 3016,320 ns/op
Iteration  93: 3037,169 ns/op
Iteration  94: 3017,717 ns/op
Iteration  95: 3018,213 ns/op
Iteration  96: 3040,667 ns/op
Iteration  97: 3028,356 ns/op
Iteration  98: 3030,106 ns/op
Iteration  99: 3038,242 ns/op
Iteration 100: 3034,119 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  3027,474 ±(99.9%) 3,748 ns/op [Average]
  (min, avg, max) = (3008,361, 3027,474, 3058,865), stdev = 11,050
  CI (99.9%): [3023,726, 3031,222] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)            (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-20.json  avgt  100  3027,474 ± 3,748  ns/op

Using:

java: 11.0.5-open
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 472,437 ns/op
# Warmup Iteration   2: 421,660 ns/op
# Warmup Iteration   3: 425,221 ns/op
Iteration   1: 424,154 ns/op
Iteration   2: 429,483 ns/op
Iteration   3: 421,067 ns/op
Iteration   4: 424,717 ns/op
Iteration   5: 421,092 ns/op
Iteration   6: 421,846 ns/op
Iteration   7: 425,820 ns/op
Iteration   8: 426,921 ns/op
Iteration   9: 429,704 ns/op
Iteration  10: 423,520 ns/op
Iteration  11: 423,623 ns/op
Iteration  12: 421,510 ns/op
Iteration  13: 425,502 ns/op
Iteration  14: 426,502 ns/op
Iteration  15: 429,000 ns/op
Iteration  16: 429,766 ns/op
Iteration  17: 427,956 ns/op
Iteration  18: 424,523 ns/op
Iteration  19: 424,867 ns/op
Iteration  20: 430,550 ns/op
Iteration  21: 426,123 ns/op
Iteration  22: 422,134 ns/op
Iteration  23: 429,906 ns/op
Iteration  24: 425,795 ns/op
Iteration  25: 425,897 ns/op
Iteration  26: 426,670 ns/op
Iteration  27: 424,491 ns/op
Iteration  28: 421,904 ns/op
Iteration  29: 421,600 ns/op
Iteration  30: 423,323 ns/op
Iteration  31: 421,344 ns/op
Iteration  32: 421,991 ns/op
Iteration  33: 431,538 ns/op
Iteration  34: 423,364 ns/op
Iteration  35: 430,420 ns/op
Iteration  36: 427,365 ns/op
Iteration  37: 421,726 ns/op
Iteration  38: 422,333 ns/op
Iteration  39: 423,661 ns/op
Iteration  40: 423,729 ns/op
Iteration  41: 427,710 ns/op
Iteration  42: 432,209 ns/op
Iteration  43: 429,426 ns/op
Iteration  44: 422,642 ns/op
Iteration  45: 426,609 ns/op
Iteration  46: 435,188 ns/op
Iteration  47: 424,875 ns/op
Iteration  48: 422,754 ns/op
Iteration  49: 424,679 ns/op
Iteration  50: 422,323 ns/op
Iteration  51: 420,848 ns/op
Iteration  52: 423,686 ns/op
Iteration  53: 422,265 ns/op
Iteration  54: 420,916 ns/op
Iteration  55: 436,206 ns/op
Iteration  56: 425,496 ns/op
Iteration  57: 421,441 ns/op
Iteration  58: 424,113 ns/op
Iteration  59: 421,255 ns/op
Iteration  60: 424,211 ns/op
Iteration  61: 435,054 ns/op
Iteration  62: 440,453 ns/op
Iteration  63: 422,055 ns/op
Iteration  64: 422,919 ns/op
Iteration  65: 421,204 ns/op
Iteration  66: 421,489 ns/op
Iteration  67: 421,990 ns/op
Iteration  68: 421,239 ns/op
Iteration  69: 421,438 ns/op
Iteration  70: 421,159 ns/op
Iteration  71: 421,048 ns/op
Iteration  72: 422,395 ns/op
Iteration  73: 428,250 ns/op
Iteration  74: 425,101 ns/op
Iteration  75: 424,598 ns/op
Iteration  76: 431,615 ns/op
Iteration  77: 432,550 ns/op
Iteration  78: 444,281 ns/op
Iteration  79: 426,637 ns/op
Iteration  80: 426,124 ns/op
Iteration  81: 425,136 ns/op
Iteration  82: 421,247 ns/op
Iteration  83: 431,475 ns/op
Iteration  84: 434,155 ns/op
Iteration  85: 427,926 ns/op
Iteration  86: 430,228 ns/op
Iteration  87: 425,741 ns/op
Iteration  88: 438,029 ns/op
Iteration  89: 421,719 ns/op
Iteration  90: 429,327 ns/op
Iteration  91: 425,260 ns/op
Iteration  92: 430,558 ns/op
Iteration  93: 421,476 ns/op
Iteration  94: 421,827 ns/op
Iteration  95: 421,949 ns/op
Iteration  96: 424,812 ns/op
Iteration  97: 429,073 ns/op
Iteration  98: 424,487 ns/op
Iteration  99: 422,607 ns/op
Iteration 100: 430,101 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  425,850 ±(99.9%) 1,572 ns/op [Average]
  (min, avg, max) = (420,848, 425,850, 444,281), stdev = 4,634
  CI (99.9%): [424,278, 427,422] (assumes normal distribution)


# Run complete. Total time: 00:02:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                     (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-2.json  avgt  100  425,850 ± 1,572  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 927,458 ns/op
# Warmup Iteration   2: 869,613 ns/op
# Warmup Iteration   3: 862,172 ns/op
Iteration   1: 862,099 ns/op
Iteration   2: 864,370 ns/op
Iteration   3: 905,542 ns/op
Iteration   4: 863,585 ns/op
Iteration   5: 863,633 ns/op
Iteration   6: 869,661 ns/op
Iteration   7: 870,288 ns/op
Iteration   8: 884,824 ns/op
Iteration   9: 865,669 ns/op
Iteration  10: 865,063 ns/op
Iteration  11: 864,870 ns/op
Iteration  12: 865,349 ns/op
Iteration  13: 865,241 ns/op
Iteration  14: 864,512 ns/op
Iteration  15: 863,012 ns/op
Iteration  16: 873,532 ns/op
Iteration  17: 863,032 ns/op
Iteration  18: 877,463 ns/op
Iteration  19: 879,076 ns/op
Iteration  20: 887,256 ns/op
Iteration  21: 862,836 ns/op
Iteration  22: 862,473 ns/op
Iteration  23: 882,657 ns/op
Iteration  24: 897,249 ns/op
Iteration  25: 862,798 ns/op
Iteration  26: 860,682 ns/op
Iteration  27: 861,032 ns/op
Iteration  28: 860,608 ns/op
Iteration  29: 861,358 ns/op
Iteration  30: 861,890 ns/op
Iteration  31: 862,967 ns/op
Iteration  32: 861,766 ns/op
Iteration  33: 863,677 ns/op
Iteration  34: 865,979 ns/op
Iteration  35: 863,297 ns/op
Iteration  36: 874,996 ns/op
Iteration  37: 864,109 ns/op
Iteration  38: 863,475 ns/op
Iteration  39: 863,453 ns/op
Iteration  40: 863,712 ns/op
Iteration  41: 862,841 ns/op
Iteration  42: 863,041 ns/op
Iteration  43: 864,190 ns/op
Iteration  44: 861,679 ns/op
Iteration  45: 881,152 ns/op
Iteration  46: 861,478 ns/op
Iteration  47: 865,444 ns/op
Iteration  48: 882,404 ns/op
Iteration  49: 866,405 ns/op
Iteration  50: 863,920 ns/op
Iteration  51: 862,959 ns/op
Iteration  52: 862,710 ns/op
Iteration  53: 863,111 ns/op
Iteration  54: 861,448 ns/op
Iteration  55: 862,122 ns/op
Iteration  56: 862,474 ns/op
Iteration  57: 861,904 ns/op
Iteration  58: 862,205 ns/op
Iteration  59: 862,502 ns/op
Iteration  60: 861,685 ns/op
Iteration  61: 870,827 ns/op
Iteration  62: 889,770 ns/op
Iteration  63: 864,008 ns/op
Iteration  64: 863,221 ns/op
Iteration  65: 878,461 ns/op
Iteration  66: 866,462 ns/op
Iteration  67: 862,653 ns/op
Iteration  68: 862,331 ns/op
Iteration  69: 863,814 ns/op
Iteration  70: 864,739 ns/op
Iteration  71: 863,068 ns/op
Iteration  72: 862,972 ns/op
Iteration  73: 863,547 ns/op
Iteration  74: 864,036 ns/op
Iteration  75: 864,674 ns/op
Iteration  76: 887,242 ns/op
Iteration  77: 862,226 ns/op
Iteration  78: 862,521 ns/op
Iteration  79: 862,488 ns/op
Iteration  80: 862,615 ns/op
Iteration  81: 860,839 ns/op
Iteration  82: 860,967 ns/op
Iteration  83: 862,072 ns/op
Iteration  84: 865,034 ns/op
Iteration  85: 864,885 ns/op
Iteration  86: 861,981 ns/op
Iteration  87: 872,403 ns/op
Iteration  88: 870,599 ns/op
Iteration  89: 862,447 ns/op
Iteration  90: 861,882 ns/op
Iteration  91: 861,804 ns/op
Iteration  92: 862,992 ns/op
Iteration  93: 864,032 ns/op
Iteration  94: 863,392 ns/op
Iteration  95: 879,348 ns/op
Iteration  96: 864,207 ns/op
Iteration  97: 861,827 ns/op
Iteration  98: 862,295 ns/op
Iteration  99: 863,495 ns/op
Iteration 100: 863,064 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  866,660 ±(99.9%) 2,807 ns/op [Average]
  (min, avg, max) = (860,608, 866,660, 905,542), stdev = 8,277
  CI (99.9%): [863,853, 869,467] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                     (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-6.json  avgt  100  866,660 ± 2,807  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1513,605 ns/op
# Warmup Iteration   2: 1384,052 ns/op
# Warmup Iteration   3: 1389,756 ns/op
Iteration   1: 1381,240 ns/op
Iteration   2: 1378,340 ns/op
Iteration   3: 1384,132 ns/op
Iteration   4: 1380,485 ns/op
Iteration   5: 1381,014 ns/op
Iteration   6: 1384,642 ns/op
Iteration   7: 1419,236 ns/op
Iteration   8: 1387,934 ns/op
Iteration   9: 1418,313 ns/op
Iteration  10: 1418,291 ns/op
Iteration  11: 1377,225 ns/op
Iteration  12: 1374,554 ns/op
Iteration  13: 1378,488 ns/op
Iteration  14: 1379,045 ns/op
Iteration  15: 1380,421 ns/op
Iteration  16: 1429,609 ns/op
Iteration  17: 1386,901 ns/op
Iteration  18: 1412,400 ns/op
Iteration  19: 1379,915 ns/op
Iteration  20: 1375,264 ns/op
Iteration  21: 1379,640 ns/op
Iteration  22: 1380,956 ns/op
Iteration  23: 1394,374 ns/op
Iteration  24: 1409,086 ns/op
Iteration  25: 1377,830 ns/op
Iteration  26: 1448,858 ns/op
Iteration  27: 1402,147 ns/op
Iteration  28: 1391,215 ns/op
Iteration  29: 1410,745 ns/op
Iteration  30: 1393,213 ns/op
Iteration  31: 1413,272 ns/op
Iteration  32: 1380,343 ns/op
Iteration  33: 1384,994 ns/op
Iteration  34: 1383,188 ns/op
Iteration  35: 1376,500 ns/op
Iteration  36: 1381,571 ns/op
Iteration  37: 1384,397 ns/op
Iteration  38: 1374,162 ns/op
Iteration  39: 1413,663 ns/op
Iteration  40: 1377,819 ns/op
Iteration  41: 1382,798 ns/op
Iteration  42: 1369,538 ns/op
Iteration  43: 1374,434 ns/op
Iteration  44: 1375,873 ns/op
Iteration  45: 1373,927 ns/op
Iteration  46: 1369,965 ns/op
Iteration  47: 1368,958 ns/op
Iteration  48: 1373,754 ns/op
Iteration  49: 1375,530 ns/op
Iteration  50: 1374,351 ns/op
Iteration  51: 1369,596 ns/op
Iteration  52: 1378,934 ns/op
Iteration  53: 1408,094 ns/op
Iteration  54: 1374,330 ns/op
Iteration  55: 1373,477 ns/op
Iteration  56: 1377,094 ns/op
Iteration  57: 1370,063 ns/op
Iteration  58: 1373,290 ns/op
Iteration  59: 1386,527 ns/op
Iteration  60: 1373,172 ns/op
Iteration  61: 1373,989 ns/op
Iteration  62: 1377,508 ns/op
Iteration  63: 1374,708 ns/op
Iteration  64: 1379,623 ns/op
Iteration  65: 1369,453 ns/op
Iteration  66: 1378,359 ns/op
Iteration  67: 1374,501 ns/op
Iteration  68: 1377,463 ns/op
Iteration  69: 1370,418 ns/op
Iteration  70: 1375,818 ns/op
Iteration  71: 1397,454 ns/op
Iteration  72: 1375,698 ns/op
Iteration  73: 1374,538 ns/op
Iteration  74: 1374,000 ns/op
Iteration  75: 1376,945 ns/op
Iteration  76: 1375,805 ns/op
Iteration  77: 1400,621 ns/op
Iteration  78: 1376,794 ns/op
Iteration  79: 1376,555 ns/op
Iteration  80: 1379,473 ns/op
Iteration  81: 1377,833 ns/op
Iteration  82: 1402,272 ns/op
Iteration  83: 1378,154 ns/op
Iteration  84: 1485,151 ns/op
Iteration  85: 1571,120 ns/op
Iteration  86: 1681,166 ns/op
Iteration  87: 1855,477 ns/op
Iteration  88: 1584,149 ns/op
Iteration  89: 1495,774 ns/op
Iteration  90: 1570,866 ns/op
Iteration  91: 1494,161 ns/op
Iteration  92: 1498,019 ns/op
Iteration  93: 1528,127 ns/op
Iteration  94: 1497,681 ns/op
Iteration  95: 1491,814 ns/op
Iteration  96: 1495,752 ns/op
Iteration  97: 1491,820 ns/op
Iteration  98: 1608,785 ns/op
Iteration  99: 1750,919 ns/op
Iteration 100: 1601,434 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  1416,093 ±(99.9%) 28,257 ns/op [Average]
  (min, avg, max) = (1368,958, 1416,093, 1855,477), stdev = 83,317
  CI (99.9%): [1387,836, 1444,350] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                      (fileName)  Mode  Cnt     Score    Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-10.json  avgt  100  1416,093 ± 28,257  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 4187,677 ns/op
# Warmup Iteration   2: 3462,350 ns/op
# Warmup Iteration   3: 3418,790 ns/op
Iteration   1: 3407,851 ns/op
Iteration   2: 3448,836 ns/op
Iteration   3: 3439,698 ns/op
Iteration   4: 3423,923 ns/op
Iteration   5: 3416,212 ns/op
Iteration   6: 3420,294 ns/op
Iteration   7: 3428,353 ns/op
Iteration   8: 3516,800 ns/op
Iteration   9: 3407,362 ns/op
Iteration  10: 3485,153 ns/op
Iteration  11: 3429,187 ns/op
Iteration  12: 3433,193 ns/op
Iteration  13: 3450,182 ns/op
Iteration  14: 3433,176 ns/op
Iteration  15: 3457,729 ns/op
Iteration  16: 3510,657 ns/op
Iteration  17: 3540,872 ns/op
Iteration  18: 3506,496 ns/op
Iteration  19: 3452,570 ns/op
Iteration  20: 3476,511 ns/op
Iteration  21: 3433,666 ns/op
Iteration  22: 3497,904 ns/op
Iteration  23: 3478,443 ns/op
Iteration  24: 3458,197 ns/op
Iteration  25: 3502,429 ns/op
Iteration  26: 3451,733 ns/op
Iteration  27: 3610,979 ns/op
Iteration  28: 3603,413 ns/op
Iteration  29: 3451,007 ns/op
Iteration  30: 3468,116 ns/op
Iteration  31: 3411,905 ns/op
Iteration  32: 3434,040 ns/op
Iteration  33: 3447,117 ns/op
Iteration  34: 3452,153 ns/op
Iteration  35: 3499,370 ns/op
Iteration  36: 3456,743 ns/op
Iteration  37: 3449,022 ns/op
Iteration  38: 3461,275 ns/op
Iteration  39: 3521,896 ns/op
Iteration  40: 3447,517 ns/op
Iteration  41: 3416,421 ns/op
Iteration  42: 3462,554 ns/op
Iteration  43: 3430,468 ns/op
Iteration  44: 3537,690 ns/op
Iteration  45: 3479,572 ns/op
Iteration  46: 3454,454 ns/op
Iteration  47: 3428,921 ns/op
Iteration  48: 3562,426 ns/op
Iteration  49: 3468,878 ns/op
Iteration  50: 3591,989 ns/op
Iteration  51: 3474,577 ns/op
Iteration  52: 3439,803 ns/op
Iteration  53: 3421,545 ns/op
Iteration  54: 3441,289 ns/op
Iteration  55: 3437,192 ns/op
Iteration  56: 3451,810 ns/op
Iteration  57: 3505,861 ns/op
Iteration  58: 3527,037 ns/op
Iteration  59: 3584,084 ns/op
Iteration  60: 3498,425 ns/op
Iteration  61: 3468,795 ns/op
Iteration  62: 3436,178 ns/op
Iteration  63: 3518,377 ns/op
Iteration  64: 3435,779 ns/op
Iteration  65: 3457,052 ns/op
Iteration  66: 3434,564 ns/op
Iteration  67: 3463,218 ns/op
Iteration  68: 3459,013 ns/op
Iteration  69: 3413,197 ns/op
Iteration  70: 3454,250 ns/op
Iteration  71: 3491,516 ns/op
Iteration  72: 3585,810 ns/op
Iteration  73: 3435,599 ns/op
Iteration  74: 3422,482 ns/op
Iteration  75: 3456,523 ns/op
Iteration  76: 3450,625 ns/op
Iteration  77: 3496,578 ns/op
Iteration  78: 3457,166 ns/op
Iteration  79: 3559,737 ns/op
Iteration  80: 3424,423 ns/op
Iteration  81: 3442,740 ns/op
Iteration  82: 3452,199 ns/op
Iteration  83: 3469,262 ns/op
Iteration  84: 3611,225 ns/op
Iteration  85: 3436,634 ns/op
Iteration  86: 3563,406 ns/op
Iteration  87: 3513,958 ns/op
Iteration  88: 3418,944 ns/op
Iteration  89: 3484,645 ns/op
Iteration  90: 3497,696 ns/op
Iteration  91: 3605,122 ns/op
Iteration  92: 3576,397 ns/op
Iteration  93: 3478,143 ns/op
Iteration  94: 3465,841 ns/op
Iteration  95: 3413,473 ns/op
Iteration  96: 3440,984 ns/op
Iteration  97: 3472,209 ns/op
Iteration  98: 3461,456 ns/op
Iteration  99: 3429,212 ns/op
Iteration 100: 3630,091 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  3474,215 ±(99.9%) 17,995 ns/op [Average]
  (min, avg, max) = (3407,362, 3474,215, 3630,091), stdev = 53,059
  CI (99.9%): [3456,220, 3492,210] (assumes normal distribution)


# Run complete. Total time: 00:02:11

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                      (fileName)  Mode  Cnt     Score    Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-20.json  avgt  100  3474,215 ± 17,995  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 456,782 ns/op
# Warmup Iteration   2: 434,442 ns/op
# Warmup Iteration   3: 433,898 ns/op
Iteration   1: 429,895 ns/op
Iteration   2: 431,828 ns/op
Iteration   3: 431,163 ns/op
Iteration   4: 444,335 ns/op
Iteration   5: 430,598 ns/op
Iteration   6: 431,605 ns/op
Iteration   7: 445,824 ns/op
Iteration   8: 444,802 ns/op
Iteration   9: 430,871 ns/op
Iteration  10: 441,496 ns/op
Iteration  11: 436,321 ns/op
Iteration  12: 439,037 ns/op
Iteration  13: 430,420 ns/op
Iteration  14: 442,366 ns/op
Iteration  15: 437,322 ns/op
Iteration  16: 430,962 ns/op
Iteration  17: 430,931 ns/op
Iteration  18: 430,835 ns/op
Iteration  19: 436,552 ns/op
Iteration  20: 436,225 ns/op
Iteration  21: 434,024 ns/op
Iteration  22: 431,797 ns/op
Iteration  23: 430,844 ns/op
Iteration  24: 435,342 ns/op
Iteration  25: 431,418 ns/op
Iteration  26: 431,045 ns/op
Iteration  27: 430,634 ns/op
Iteration  28: 430,778 ns/op
Iteration  29: 430,849 ns/op
Iteration  30: 431,548 ns/op
Iteration  31: 436,812 ns/op
Iteration  32: 432,556 ns/op
Iteration  33: 437,755 ns/op
Iteration  34: 430,984 ns/op
Iteration  35: 432,021 ns/op
Iteration  36: 435,064 ns/op
Iteration  37: 446,302 ns/op
Iteration  38: 435,845 ns/op
Iteration  39: 430,661 ns/op
Iteration  40: 443,188 ns/op
Iteration  41: 434,216 ns/op
Iteration  42: 430,302 ns/op
Iteration  43: 430,254 ns/op
Iteration  44: 430,414 ns/op
Iteration  45: 429,924 ns/op
Iteration  46: 430,679 ns/op
Iteration  47: 429,869 ns/op
Iteration  48: 444,391 ns/op
Iteration  49: 431,132 ns/op
Iteration  50: 432,887 ns/op
Iteration  51: 430,449 ns/op
Iteration  52: 432,989 ns/op
Iteration  53: 431,054 ns/op
Iteration  54: 435,741 ns/op
Iteration  55: 441,048 ns/op
Iteration  56: 431,155 ns/op
Iteration  57: 435,430 ns/op
Iteration  58: 434,573 ns/op
Iteration  59: 436,278 ns/op
Iteration  60: 430,558 ns/op
Iteration  61: 431,577 ns/op
Iteration  62: 430,616 ns/op
Iteration  63: 436,262 ns/op
Iteration  64: 436,954 ns/op
Iteration  65: 437,322 ns/op
Iteration  66: 435,205 ns/op
Iteration  67: 432,247 ns/op
Iteration  68: 435,984 ns/op
Iteration  69: 430,116 ns/op
Iteration  70: 439,308 ns/op
Iteration  71: 430,872 ns/op
Iteration  72: 432,443 ns/op
Iteration  73: 431,722 ns/op
Iteration  74: 438,020 ns/op
Iteration  75: 437,368 ns/op
Iteration  76: 431,396 ns/op
Iteration  77: 436,112 ns/op
Iteration  78: 434,504 ns/op
Iteration  79: 437,408 ns/op
Iteration  80: 433,490 ns/op
Iteration  81: 432,793 ns/op
Iteration  82: 443,799 ns/op
Iteration  83: 431,029 ns/op
Iteration  84: 442,181 ns/op
Iteration  85: 436,365 ns/op
Iteration  86: 430,436 ns/op
Iteration  87: 430,474 ns/op
Iteration  88: 429,561 ns/op
Iteration  89: 429,967 ns/op
Iteration  90: 430,247 ns/op
Iteration  91: 430,719 ns/op
Iteration  92: 431,722 ns/op
Iteration  93: 430,324 ns/op
Iteration  94: 431,626 ns/op
Iteration  95: 438,244 ns/op
Iteration  96: 431,008 ns/op
Iteration  97: 430,289 ns/op
Iteration  98: 431,098 ns/op
Iteration  99: 431,974 ns/op
Iteration 100: 437,074 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  434,061 ±(99.9%) 1,453 ns/op [Average]
  (min, avg, max) = (429,561, 434,061, 446,302), stdev = 4,285
  CI (99.9%): [432,607, 435,514] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)               (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-2.json  avgt  100  434,061 ± 1,453  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1063,668 ns/op
# Warmup Iteration   2: 1016,787 ns/op
# Warmup Iteration   3: 1013,561 ns/op
Iteration   1: 1005,784 ns/op
Iteration   2: 1015,938 ns/op
Iteration   3: 1029,105 ns/op
Iteration   4: 1040,266 ns/op
Iteration   5: 1009,880 ns/op
Iteration   6: 1022,646 ns/op
Iteration   7: 1016,368 ns/op
Iteration   8: 1018,669 ns/op
Iteration   9: 1012,356 ns/op
Iteration  10: 1013,231 ns/op
Iteration  11: 1019,445 ns/op
Iteration  12: 1003,465 ns/op
Iteration  13: 1002,367 ns/op
Iteration  14: 1003,492 ns/op
Iteration  15: 1002,846 ns/op
Iteration  16: 1002,352 ns/op
Iteration  17: 1023,168 ns/op
Iteration  18: 1003,044 ns/op
Iteration  19: 1002,656 ns/op
Iteration  20: 1003,107 ns/op
Iteration  21: 1003,226 ns/op
Iteration  22: 1002,163 ns/op
Iteration  23: 1003,871 ns/op
Iteration  24: 1002,765 ns/op
Iteration  25: 1004,330 ns/op
Iteration  26: 1025,944 ns/op
Iteration  27: 1003,050 ns/op
Iteration  28: 1002,347 ns/op
Iteration  29: 1007,566 ns/op
Iteration  30: 1019,554 ns/op
Iteration  31: 1001,352 ns/op
Iteration  32: 1015,368 ns/op
Iteration  33: 1028,978 ns/op
Iteration  34: 1001,451 ns/op
Iteration  35: 1001,701 ns/op
Iteration  36: 1001,108 ns/op
Iteration  37: 1002,766 ns/op
Iteration  38: 1018,217 ns/op
Iteration  39: 1035,025 ns/op
Iteration  40: 1019,922 ns/op
Iteration  41: 1019,083 ns/op
Iteration  42: 1016,560 ns/op
Iteration  43: 1027,306 ns/op
Iteration  44: 1006,410 ns/op
Iteration  45: 1015,952 ns/op
Iteration  46: 1024,168 ns/op
Iteration  47: 1020,572 ns/op
Iteration  48: 1000,177 ns/op
Iteration  49: 1002,318 ns/op
Iteration  50: 1018,908 ns/op
Iteration  51: 1001,354 ns/op
Iteration  52: 1005,198 ns/op
Iteration  53: 1003,021 ns/op
Iteration  54: 1002,614 ns/op
Iteration  55: 1003,567 ns/op
Iteration  56: 1031,857 ns/op
Iteration  57: 1002,035 ns/op
Iteration  58: 1001,493 ns/op
Iteration  59: 1032,265 ns/op
Iteration  60: 1008,981 ns/op
Iteration  61: 1031,640 ns/op
Iteration  62: 1017,064 ns/op
Iteration  63: 1024,702 ns/op
Iteration  64: 1003,376 ns/op
Iteration  65: 1003,508 ns/op
Iteration  66: 1001,881 ns/op
Iteration  67: 1004,696 ns/op
Iteration  68: 1002,949 ns/op
Iteration  69: 1001,043 ns/op
Iteration  70: 1007,106 ns/op
Iteration  71: 1004,940 ns/op
Iteration  72: 1084,803 ns/op
Iteration  73: 1001,994 ns/op
Iteration  74: 1022,549 ns/op
Iteration  75: 1011,710 ns/op
Iteration  76: 1019,680 ns/op
Iteration  77: 1004,108 ns/op
Iteration  78: 1002,476 ns/op
Iteration  79: 1002,709 ns/op
Iteration  80: 1030,706 ns/op
Iteration  81: 1007,328 ns/op
Iteration  82: 1023,294 ns/op
Iteration  83: 1019,739 ns/op
Iteration  84: 1003,098 ns/op
Iteration  85: 1027,123 ns/op
Iteration  86: 1007,949 ns/op
Iteration  87: 1005,375 ns/op
Iteration  88: 1014,838 ns/op
Iteration  89: 1002,563 ns/op
Iteration  90: 1004,901 ns/op
Iteration  91: 1014,935 ns/op
Iteration  92: 1026,157 ns/op
Iteration  93: 1026,955 ns/op
Iteration  94: 1001,451 ns/op
Iteration  95: 1002,189 ns/op
Iteration  96: 1013,755 ns/op
Iteration  97: 1004,023 ns/op
Iteration  98: 1001,696 ns/op
Iteration  99: 1003,215 ns/op
Iteration 100: 1001,616 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  1011,906 ±(99.9%) 4,281 ns/op [Average]
  (min, avg, max) = (1000,177, 1011,906, 1084,803), stdev = 12,623
  CI (99.9%): [1007,624, 1016,187] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)               (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-6.json  avgt  100  1011,906 ± 4,281  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1672,934 ns/op
# Warmup Iteration   2: 1542,212 ns/op
# Warmup Iteration   3: 1544,058 ns/op
Iteration   1: 1553,223 ns/op
Iteration   2: 1541,554 ns/op
Iteration   3: 1540,903 ns/op
Iteration   4: 1541,383 ns/op
Iteration   5: 1541,850 ns/op
Iteration   6: 1542,329 ns/op
Iteration   7: 1542,115 ns/op
Iteration   8: 1541,116 ns/op
Iteration   9: 1542,582 ns/op
Iteration  10: 1580,928 ns/op
Iteration  11: 1569,256 ns/op
Iteration  12: 1544,790 ns/op
Iteration  13: 1539,661 ns/op
Iteration  14: 1545,250 ns/op
Iteration  15: 1590,828 ns/op
Iteration  16: 1543,245 ns/op
Iteration  17: 1541,410 ns/op
Iteration  18: 1544,190 ns/op
Iteration  19: 1548,123 ns/op
Iteration  20: 1541,519 ns/op
Iteration  21: 1542,876 ns/op
Iteration  22: 1543,455 ns/op
Iteration  23: 1574,286 ns/op
Iteration  24: 1542,335 ns/op
Iteration  25: 1542,143 ns/op
Iteration  26: 1542,492 ns/op
Iteration  27: 1548,570 ns/op
Iteration  28: 1542,479 ns/op
Iteration  29: 1541,912 ns/op
Iteration  30: 1543,216 ns/op
Iteration  31: 1588,182 ns/op
Iteration  32: 1605,561 ns/op
Iteration  33: 1541,817 ns/op
Iteration  34: 1548,958 ns/op
Iteration  35: 1542,359 ns/op
Iteration  36: 1546,704 ns/op
Iteration  37: 1541,020 ns/op
Iteration  38: 1542,552 ns/op
Iteration  39: 1542,466 ns/op
Iteration  40: 1548,555 ns/op
Iteration  41: 1544,188 ns/op
Iteration  42: 1543,112 ns/op
Iteration  43: 1542,963 ns/op
Iteration  44: 1540,873 ns/op
Iteration  45: 1549,812 ns/op
Iteration  46: 1557,212 ns/op
Iteration  47: 1560,038 ns/op
Iteration  48: 1542,270 ns/op
Iteration  49: 1543,482 ns/op
Iteration  50: 1546,803 ns/op
Iteration  51: 1539,898 ns/op
Iteration  52: 1549,790 ns/op
Iteration  53: 1542,553 ns/op
Iteration  54: 1541,254 ns/op
Iteration  55: 1541,866 ns/op
Iteration  56: 1541,579 ns/op
Iteration  57: 1542,219 ns/op
Iteration  58: 1543,685 ns/op
Iteration  59: 1541,112 ns/op
Iteration  60: 1543,636 ns/op
Iteration  61: 1540,279 ns/op
Iteration  62: 1543,550 ns/op
Iteration  63: 1543,183 ns/op
Iteration  64: 1543,150 ns/op
Iteration  65: 1543,201 ns/op
Iteration  66: 1545,538 ns/op
Iteration  67: 1544,686 ns/op
Iteration  68: 1541,245 ns/op
Iteration  69: 1541,808 ns/op
Iteration  70: 1542,991 ns/op
Iteration  71: 1542,979 ns/op
Iteration  72: 1540,655 ns/op
Iteration  73: 1540,965 ns/op
Iteration  74: 1541,308 ns/op
Iteration  75: 1548,236 ns/op
Iteration  76: 1542,816 ns/op
Iteration  77: 1542,038 ns/op
Iteration  78: 1545,024 ns/op
Iteration  79: 1540,381 ns/op
Iteration  80: 1543,150 ns/op
Iteration  81: 1542,663 ns/op
Iteration  82: 1542,099 ns/op
Iteration  83: 1546,000 ns/op
Iteration  84: 1543,602 ns/op
Iteration  85: 1549,846 ns/op
Iteration  86: 1541,019 ns/op
Iteration  87: 1542,438 ns/op
Iteration  88: 1552,166 ns/op
Iteration  89: 1545,757 ns/op
Iteration  90: 1539,585 ns/op
Iteration  91: 1544,241 ns/op
Iteration  92: 1543,123 ns/op
Iteration  93: 1540,640 ns/op
Iteration  94: 1541,877 ns/op
Iteration  95: 1550,634 ns/op
Iteration  96: 1542,358 ns/op
Iteration  97: 1540,316 ns/op
Iteration  98: 1558,010 ns/op
Iteration  99: 1543,557 ns/op
Iteration 100: 1541,103 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  1546,348 ±(99.9%) 3,685 ns/op [Average]
  (min, avg, max) = (1539,585, 1546,348, 1605,561), stdev = 10,866
  CI (99.9%): [1542,662, 1550,033] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-10.json  avgt  100  1546,348 ± 3,685  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 3368,179 ns/op
# Warmup Iteration   2: 3187,017 ns/op
# Warmup Iteration   3: 3223,021 ns/op
Iteration   1: 3177,114 ns/op
Iteration   2: 3178,878 ns/op
Iteration   3: 3186,756 ns/op
Iteration   4: 3181,411 ns/op
Iteration   5: 3184,990 ns/op
Iteration   6: 3213,354 ns/op
Iteration   7: 3234,505 ns/op
Iteration   8: 3261,888 ns/op
Iteration   9: 3240,309 ns/op
Iteration  10: 3304,338 ns/op
Iteration  11: 3186,785 ns/op
Iteration  12: 3176,201 ns/op
Iteration  13: 3200,490 ns/op
Iteration  14: 3174,487 ns/op
Iteration  15: 3173,605 ns/op
Iteration  16: 3240,430 ns/op
Iteration  17: 3176,761 ns/op
Iteration  18: 3176,626 ns/op
Iteration  19: 3183,486 ns/op
Iteration  20: 3262,494 ns/op
Iteration  21: 3245,031 ns/op
Iteration  22: 3176,907 ns/op
Iteration  23: 3181,825 ns/op
Iteration  24: 3177,947 ns/op
Iteration  25: 3172,709 ns/op
Iteration  26: 3173,636 ns/op
Iteration  27: 3177,059 ns/op
Iteration  28: 3174,682 ns/op
Iteration  29: 3198,698 ns/op
Iteration  30: 3173,339 ns/op
Iteration  31: 3179,392 ns/op
Iteration  32: 3221,100 ns/op
Iteration  33: 3222,068 ns/op
Iteration  34: 3179,532 ns/op
Iteration  35: 3202,186 ns/op
Iteration  36: 3169,588 ns/op
Iteration  37: 3173,980 ns/op
Iteration  38: 3174,548 ns/op
Iteration  39: 3171,648 ns/op
Iteration  40: 3177,237 ns/op
Iteration  41: 3178,972 ns/op
Iteration  42: 3303,126 ns/op
Iteration  43: 3175,141 ns/op
Iteration  44: 3243,399 ns/op
Iteration  45: 3301,343 ns/op
Iteration  46: 3185,191 ns/op
Iteration  47: 3174,033 ns/op
Iteration  48: 3267,649 ns/op
Iteration  49: 3237,786 ns/op
Iteration  50: 3177,086 ns/op
Iteration  51: 3176,329 ns/op
Iteration  52: 3174,323 ns/op
Iteration  53: 3174,138 ns/op
Iteration  54: 3181,764 ns/op
Iteration  55: 3176,158 ns/op
Iteration  56: 3174,866 ns/op
Iteration  57: 3169,533 ns/op
Iteration  58: 3216,217 ns/op
Iteration  59: 3184,626 ns/op
Iteration  60: 3247,605 ns/op
Iteration  61: 3229,385 ns/op
Iteration  62: 3180,669 ns/op
Iteration  63: 3237,419 ns/op
Iteration  64: 3178,761 ns/op
Iteration  65: 3176,987 ns/op
Iteration  66: 3238,043 ns/op
Iteration  67: 3175,651 ns/op
Iteration  68: 3184,416 ns/op
Iteration  69: 3171,266 ns/op
Iteration  70: 3254,140 ns/op
Iteration  71: 3174,666 ns/op
Iteration  72: 3171,161 ns/op
Iteration  73: 3172,284 ns/op
Iteration  74: 3238,930 ns/op
Iteration  75: 3172,078 ns/op
Iteration  76: 3175,022 ns/op
Iteration  77: 3233,041 ns/op
Iteration  78: 3217,652 ns/op
Iteration  79: 3173,900 ns/op
Iteration  80: 3175,658 ns/op
Iteration  81: 3176,001 ns/op
Iteration  82: 3176,643 ns/op
Iteration  83: 3304,335 ns/op
Iteration  84: 3186,682 ns/op
Iteration  85: 3177,020 ns/op
Iteration  86: 3172,149 ns/op
Iteration  87: 3207,165 ns/op
Iteration  88: 3179,041 ns/op
Iteration  89: 3190,527 ns/op
Iteration  90: 3183,877 ns/op
Iteration  91: 3185,413 ns/op
Iteration  92: 3177,018 ns/op
Iteration  93: 3169,141 ns/op
Iteration  94: 3220,182 ns/op
Iteration  95: 3190,793 ns/op
Iteration  96: 3183,660 ns/op
Iteration  97: 3171,538 ns/op
Iteration  98: 3171,468 ns/op
Iteration  99: 3201,540 ns/op
Iteration 100: 3186,213 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  3196,988 ±(99.9%) 11,511 ns/op [Average]
  (min, avg, max) = (3169,141, 3196,988, 3304,338), stdev = 33,939
  CI (99.9%): [3185,478, 3208,499] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                (fileName)  Mode  Cnt     Score    Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-20.json  avgt  100  3196,988 ± 11,511  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 482,463 ns/op
# Warmup Iteration   2: 457,972 ns/op
# Warmup Iteration   3: 457,812 ns/op
Iteration   1: 455,636 ns/op
Iteration   2: 473,866 ns/op
Iteration   3: 453,692 ns/op
Iteration   4: 451,514 ns/op
Iteration   5: 452,554 ns/op
Iteration   6: 460,080 ns/op
Iteration   7: 454,524 ns/op
Iteration   8: 461,848 ns/op
Iteration   9: 456,143 ns/op
Iteration  10: 451,486 ns/op
Iteration  11: 455,675 ns/op
Iteration  12: 463,837 ns/op
Iteration  13: 453,170 ns/op
Iteration  14: 450,591 ns/op
Iteration  15: 460,905 ns/op
Iteration  16: 454,764 ns/op
Iteration  17: 452,586 ns/op
Iteration  18: 456,860 ns/op
Iteration  19: 451,620 ns/op
Iteration  20: 450,371 ns/op
Iteration  21: 450,893 ns/op
Iteration  22: 450,415 ns/op
Iteration  23: 450,720 ns/op
Iteration  24: 459,598 ns/op
Iteration  25: 451,842 ns/op
Iteration  26: 456,624 ns/op
Iteration  27: 461,704 ns/op
Iteration  28: 451,044 ns/op
Iteration  29: 457,916 ns/op
Iteration  30: 450,899 ns/op
Iteration  31: 451,192 ns/op
Iteration  32: 451,120 ns/op
Iteration  33: 460,249 ns/op
Iteration  34: 463,590 ns/op
Iteration  35: 459,955 ns/op
Iteration  36: 450,313 ns/op
Iteration  37: 463,231 ns/op
Iteration  38: 465,935 ns/op
Iteration  39: 459,191 ns/op
Iteration  40: 463,230 ns/op
Iteration  41: 456,809 ns/op
Iteration  42: 449,875 ns/op
Iteration  43: 450,331 ns/op
Iteration  44: 450,313 ns/op
Iteration  45: 449,937 ns/op
Iteration  46: 452,264 ns/op
Iteration  47: 450,605 ns/op
Iteration  48: 471,356 ns/op
Iteration  49: 452,375 ns/op
Iteration  50: 455,180 ns/op
Iteration  51: 464,069 ns/op
Iteration  52: 465,860 ns/op
Iteration  53: 451,778 ns/op
Iteration  54: 456,900 ns/op
Iteration  55: 472,004 ns/op
Iteration  56: 455,408 ns/op
Iteration  57: 458,481 ns/op
Iteration  58: 462,631 ns/op
Iteration  59: 460,297 ns/op
Iteration  60: 458,431 ns/op
Iteration  61: 453,149 ns/op
Iteration  62: 452,455 ns/op
Iteration  63: 451,225 ns/op
Iteration  64: 452,418 ns/op
Iteration  65: 451,171 ns/op
Iteration  66: 453,027 ns/op
Iteration  67: 451,227 ns/op
Iteration  68: 449,974 ns/op
Iteration  69: 450,489 ns/op
Iteration  70: 469,677 ns/op
Iteration  71: 457,793 ns/op
Iteration  72: 458,149 ns/op
Iteration  73: 450,758 ns/op
Iteration  74: 470,415 ns/op
Iteration  75: 463,255 ns/op
Iteration  76: 450,450 ns/op
Iteration  77: 450,225 ns/op
Iteration  78: 464,482 ns/op
Iteration  79: 450,434 ns/op
Iteration  80: 450,683 ns/op
Iteration  81: 452,307 ns/op
Iteration  82: 451,259 ns/op
Iteration  83: 452,861 ns/op
Iteration  84: 459,115 ns/op
Iteration  85: 451,913 ns/op
Iteration  86: 464,061 ns/op
Iteration  87: 455,375 ns/op
Iteration  88: 454,215 ns/op
Iteration  89: 449,917 ns/op
Iteration  90: 449,826 ns/op
Iteration  91: 453,926 ns/op
Iteration  92: 451,548 ns/op
Iteration  93: 450,421 ns/op
Iteration  94: 459,991 ns/op
Iteration  95: 463,242 ns/op
Iteration  96: 456,806 ns/op
Iteration  97: 454,976 ns/op
Iteration  98: 450,114 ns/op
Iteration  99: 456,191 ns/op
Iteration 100: 449,971 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  455,858 ±(99.9%) 1,992 ns/op [Average]
  (min, avg, max) = (449,826, 455,858, 473,866), stdev = 5,873
  CI (99.9%): [453,866, 457,850] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)           (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-2.json  avgt  100  455,858 ± 1,992  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 999,171 ns/op
# Warmup Iteration   2: 949,803 ns/op
# Warmup Iteration   3: 940,172 ns/op
Iteration   1: 981,622 ns/op
Iteration   2: 958,351 ns/op
Iteration   3: 973,768 ns/op
Iteration   4: 962,679 ns/op
Iteration   5: 946,479 ns/op
Iteration   6: 937,805 ns/op
Iteration   7: 938,870 ns/op
Iteration   8: 936,828 ns/op
Iteration   9: 958,906 ns/op
Iteration  10: 957,398 ns/op
Iteration  11: 954,360 ns/op
Iteration  12: 963,860 ns/op
Iteration  13: 959,335 ns/op
Iteration  14: 984,402 ns/op
Iteration  15: 973,906 ns/op
Iteration  16: 954,245 ns/op
Iteration  17: 954,033 ns/op
Iteration  18: 953,735 ns/op
Iteration  19: 971,329 ns/op
Iteration  20: 988,918 ns/op
Iteration  21: 968,654 ns/op
Iteration  22: 959,987 ns/op
Iteration  23: 979,844 ns/op
Iteration  24: 955,148 ns/op
Iteration  25: 954,068 ns/op
Iteration  26: 955,301 ns/op
Iteration  27: 952,987 ns/op
Iteration  28: 954,527 ns/op
Iteration  29: 952,891 ns/op
Iteration  30: 969,586 ns/op
Iteration  31: 954,130 ns/op
Iteration  32: 953,580 ns/op
Iteration  33: 952,477 ns/op
Iteration  34: 958,980 ns/op
Iteration  35: 970,321 ns/op
Iteration  36: 954,660 ns/op
Iteration  37: 954,003 ns/op
Iteration  38: 955,048 ns/op
Iteration  39: 973,848 ns/op
Iteration  40: 1016,333 ns/op
Iteration  41: 954,241 ns/op
Iteration  42: 974,860 ns/op
Iteration  43: 976,869 ns/op
Iteration  44: 956,539 ns/op
Iteration  45: 979,802 ns/op
Iteration  46: 954,555 ns/op
Iteration  47: 953,870 ns/op
Iteration  48: 954,166 ns/op
Iteration  49: 953,269 ns/op
Iteration  50: 961,015 ns/op
Iteration  51: 954,452 ns/op
Iteration  52: 954,933 ns/op
Iteration  53: 955,655 ns/op
Iteration  54: 953,942 ns/op
Iteration  55: 953,578 ns/op
Iteration  56: 954,034 ns/op
Iteration  57: 953,746 ns/op
Iteration  58: 953,104 ns/op
Iteration  59: 954,010 ns/op
Iteration  60: 951,722 ns/op
Iteration  61: 953,727 ns/op
Iteration  62: 954,185 ns/op
Iteration  63: 952,911 ns/op
Iteration  64: 953,110 ns/op
Iteration  65: 951,947 ns/op
Iteration  66: 955,281 ns/op
Iteration  67: 952,731 ns/op
Iteration  68: 953,026 ns/op
Iteration  69: 958,501 ns/op
Iteration  70: 991,343 ns/op
Iteration  71: 969,511 ns/op
Iteration  72: 1000,066 ns/op
Iteration  73: 966,664 ns/op
Iteration  74: 977,280 ns/op
Iteration  75: 960,807 ns/op
Iteration  76: 967,995 ns/op
Iteration  77: 966,583 ns/op
Iteration  78: 954,082 ns/op
Iteration  79: 996,426 ns/op
Iteration  80: 961,388 ns/op
Iteration  81: 959,328 ns/op
Iteration  82: 992,078 ns/op
Iteration  83: 955,871 ns/op
Iteration  84: 973,599 ns/op
Iteration  85: 957,751 ns/op
Iteration  86: 992,235 ns/op
Iteration  87: 955,340 ns/op
Iteration  88: 971,595 ns/op
Iteration  89: 998,362 ns/op
Iteration  90: 967,767 ns/op
Iteration  91: 970,379 ns/op
Iteration  92: 983,133 ns/op
Iteration  93: 967,443 ns/op
Iteration  94: 956,037 ns/op
Iteration  95: 954,839 ns/op
Iteration  96: 953,165 ns/op
Iteration  97: 956,135 ns/op
Iteration  98: 951,635 ns/op
Iteration  99: 973,400 ns/op
Iteration 100: 983,949 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  962,872 ±(99.9%) 4,796 ns/op [Average]
  (min, avg, max) = (936,828, 962,872, 1016,333), stdev = 14,141
  CI (99.9%): [958,076, 967,668] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)           (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-6.json  avgt  100  962,872 ± 4,796  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1801,964 ns/op
# Warmup Iteration   2: 1705,590 ns/op
# Warmup Iteration   3: 1689,994 ns/op
Iteration   1: 1687,830 ns/op
Iteration   2: 1715,628 ns/op
Iteration   3: 1693,010 ns/op
Iteration   4: 1748,786 ns/op
Iteration   5: 1696,154 ns/op
Iteration   6: 1724,523 ns/op
Iteration   7: 1714,757 ns/op
Iteration   8: 1706,495 ns/op
Iteration   9: 1686,943 ns/op
Iteration  10: 1688,172 ns/op
Iteration  11: 1686,603 ns/op
Iteration  12: 1713,369 ns/op
Iteration  13: 1688,424 ns/op
Iteration  14: 1692,418 ns/op
Iteration  15: 1718,789 ns/op
Iteration  16: 1727,864 ns/op
Iteration  17: 1697,115 ns/op
Iteration  18: 1682,219 ns/op
Iteration  19: 1684,411 ns/op
Iteration  20: 1703,916 ns/op
Iteration  21: 1680,496 ns/op
Iteration  22: 1685,130 ns/op
Iteration  23: 1684,169 ns/op
Iteration  24: 1687,153 ns/op
Iteration  25: 1681,677 ns/op
Iteration  26: 1681,730 ns/op
Iteration  27: 1682,293 ns/op
Iteration  28: 1680,085 ns/op
Iteration  29: 1682,131 ns/op
Iteration  30: 1683,049 ns/op
Iteration  31: 1683,217 ns/op
Iteration  32: 1680,974 ns/op
Iteration  33: 1717,084 ns/op
Iteration  34: 1703,762 ns/op
Iteration  35: 1686,794 ns/op
Iteration  36: 1682,973 ns/op
Iteration  37: 1683,924 ns/op
Iteration  38: 1688,347 ns/op
Iteration  39: 1714,105 ns/op
Iteration  40: 1707,315 ns/op
Iteration  41: 1701,369 ns/op
Iteration  42: 1694,936 ns/op
Iteration  43: 1733,918 ns/op
Iteration  44: 1681,529 ns/op
Iteration  45: 1680,815 ns/op
Iteration  46: 1682,812 ns/op
Iteration  47: 1682,432 ns/op
Iteration  48: 1682,179 ns/op
Iteration  49: 1691,465 ns/op
Iteration  50: 1688,826 ns/op
Iteration  51: 1739,436 ns/op
Iteration  52: 1749,671 ns/op
Iteration  53: 1685,295 ns/op
Iteration  54: 1683,491 ns/op
Iteration  55: 1680,127 ns/op
Iteration  56: 1682,529 ns/op
Iteration  57: 1681,281 ns/op
Iteration  58: 1684,274 ns/op
Iteration  59: 1773,449 ns/op
Iteration  60: 1679,176 ns/op
Iteration  61: 1682,343 ns/op
Iteration  62: 1683,236 ns/op
Iteration  63: 1731,473 ns/op
Iteration  64: 1721,469 ns/op
Iteration  65: 1680,842 ns/op
Iteration  66: 1691,459 ns/op
Iteration  67: 1703,903 ns/op
Iteration  68: 1723,746 ns/op
Iteration  69: 1681,894 ns/op
Iteration  70: 1679,488 ns/op
Iteration  71: 1682,234 ns/op
Iteration  72: 1699,407 ns/op
Iteration  73: 1681,786 ns/op
Iteration  74: 1681,907 ns/op
Iteration  75: 1722,806 ns/op
Iteration  76: 1708,666 ns/op
Iteration  77: 1718,124 ns/op
Iteration  78: 1681,753 ns/op
Iteration  79: 1714,199 ns/op
Iteration  80: 1681,489 ns/op
Iteration  81: 1728,625 ns/op
Iteration  82: 1698,874 ns/op
Iteration  83: 1757,474 ns/op
Iteration  84: 1685,213 ns/op
Iteration  85: 1686,567 ns/op
Iteration  86: 1740,945 ns/op
Iteration  87: 1718,780 ns/op
Iteration  88: 1683,574 ns/op
Iteration  89: 1681,494 ns/op
Iteration  90: 1682,531 ns/op
Iteration  91: 1684,863 ns/op
Iteration  92: 1681,632 ns/op
Iteration  93: 1718,825 ns/op
Iteration  94: 1725,632 ns/op
Iteration  95: 1680,339 ns/op
Iteration  96: 1681,005 ns/op
Iteration  97: 1679,865 ns/op
Iteration  98: 1681,467 ns/op
Iteration  99: 1683,669 ns/op
Iteration 100: 1687,937 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  1697,144 ±(99.9%) 7,044 ns/op [Average]
  (min, avg, max) = (1679,176, 1697,144, 1773,449), stdev = 20,770
  CI (99.9%): [1690,100, 1704,188] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)            (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-10.json  avgt  100  1697,144 ± 7,044  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 3881,522 ns/op
# Warmup Iteration   2: 3662,248 ns/op
# Warmup Iteration   3: 3664,894 ns/op
Iteration   1: 3709,631 ns/op
Iteration   2: 3674,521 ns/op
Iteration   3: 3688,149 ns/op
Iteration   4: 3695,009 ns/op
Iteration   5: 3625,380 ns/op
Iteration   6: 3623,540 ns/op
Iteration   7: 3717,040 ns/op
Iteration   8: 3627,322 ns/op
Iteration   9: 3765,958 ns/op
Iteration  10: 3629,820 ns/op
Iteration  11: 3627,974 ns/op
Iteration  12: 3635,162 ns/op
Iteration  13: 3626,911 ns/op
Iteration  14: 3645,179 ns/op
Iteration  15: 3642,841 ns/op
Iteration  16: 3662,960 ns/op
Iteration  17: 3643,821 ns/op
Iteration  18: 3649,445 ns/op
Iteration  19: 3746,655 ns/op
Iteration  20: 3785,750 ns/op
Iteration  21: 3640,405 ns/op
Iteration  22: 3648,438 ns/op
Iteration  23: 3652,706 ns/op
Iteration  24: 3674,832 ns/op
Iteration  25: 3653,280 ns/op
Iteration  26: 3736,649 ns/op
Iteration  27: 3638,725 ns/op
Iteration  28: 3728,134 ns/op
Iteration  29: 3724,062 ns/op
Iteration  30: 3651,167 ns/op
Iteration  31: 3782,099 ns/op
Iteration  32: 3643,731 ns/op
Iteration  33: 3725,145 ns/op
Iteration  34: 3672,524 ns/op
Iteration  35: 3719,023 ns/op
Iteration  36: 3761,900 ns/op
Iteration  37: 3725,992 ns/op
Iteration  38: 3638,771 ns/op
Iteration  39: 3684,711 ns/op
Iteration  40: 3654,027 ns/op
Iteration  41: 3728,604 ns/op
Iteration  42: 3773,751 ns/op
Iteration  43: 3666,019 ns/op
Iteration  44: 3860,811 ns/op
Iteration  45: 3641,117 ns/op
Iteration  46: 3644,957 ns/op
Iteration  47: 3665,953 ns/op
Iteration  48: 3653,846 ns/op
Iteration  49: 3648,774 ns/op
Iteration  50: 3642,747 ns/op
Iteration  51: 3636,510 ns/op
Iteration  52: 3641,216 ns/op
Iteration  53: 3737,083 ns/op
Iteration  54: 3640,437 ns/op
Iteration  55: 3721,773 ns/op
Iteration  56: 3652,011 ns/op
Iteration  57: 3639,335 ns/op
Iteration  58: 3648,678 ns/op
Iteration  59: 3728,300 ns/op
Iteration  60: 3700,392 ns/op
Iteration  61: 3639,719 ns/op
Iteration  62: 3719,187 ns/op
Iteration  63: 3647,007 ns/op
Iteration  64: 3783,210 ns/op
Iteration  65: 3639,488 ns/op
Iteration  66: 3639,761 ns/op
Iteration  67: 3735,096 ns/op
Iteration  68: 3633,515 ns/op
Iteration  69: 3641,024 ns/op
Iteration  70: 3679,543 ns/op
Iteration  71: 3641,733 ns/op
Iteration  72: 3728,141 ns/op
Iteration  73: 3638,864 ns/op
Iteration  74: 3638,353 ns/op
Iteration  75: 3770,724 ns/op
Iteration  76: 3646,030 ns/op
Iteration  77: 3637,808 ns/op
Iteration  78: 3642,092 ns/op
Iteration  79: 3645,653 ns/op
Iteration  80: 3636,625 ns/op
Iteration  81: 3641,409 ns/op
Iteration  82: 3647,471 ns/op
Iteration  83: 3648,255 ns/op
Iteration  84: 3651,195 ns/op
Iteration  85: 3636,778 ns/op
Iteration  86: 3636,962 ns/op
Iteration  87: 3637,806 ns/op
Iteration  88: 3639,742 ns/op
Iteration  89: 3637,288 ns/op
Iteration  90: 3657,747 ns/op
Iteration  91: 3642,480 ns/op
Iteration  92: 3641,521 ns/op
Iteration  93: 3776,309 ns/op
Iteration  94: 3648,612 ns/op
Iteration  95: 3692,587 ns/op
Iteration  96: 3648,609 ns/op
Iteration  97: 3639,223 ns/op
Iteration  98: 3638,986 ns/op
Iteration  99: 3652,674 ns/op
Iteration 100: 3642,195 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  3672,931 ±(99.9%) 16,449 ns/op [Average]
  (min, avg, max) = (3623,540, 3672,931, 3860,811), stdev = 48,501
  CI (99.9%): [3656,482, 3689,381] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)            (fileName)  Mode  Cnt     Score    Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-20.json  avgt  100  3672,931 ± 16,449  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
461,940 ns/op
# Warmup Iteration   2: 421,226 ns/op
# Warmup Iteration   3: 420,101 ns/op
Iteration   1: 420,231 ns/op
Iteration   2: 427,101 ns/op
Iteration   3: 426,873 ns/op
Iteration   4: 423,207 ns/op
Iteration   5: 429,731 ns/op
Iteration   6: 428,173 ns/op
Iteration   7: 419,050 ns/op
Iteration   8: 422,913 ns/op
Iteration   9: 421,273 ns/op
Iteration  10: 434,265 ns/op
Iteration  11: 417,810 ns/op
Iteration  12: 417,062 ns/op
Iteration  13: 427,060 ns/op
Iteration  14: 418,130 ns/op
Iteration  15: 419,346 ns/op
Iteration  16: 418,062 ns/op
Iteration  17: 432,692 ns/op
Iteration  18: 418,012 ns/op
Iteration  19: 432,937 ns/op
Iteration  20: 435,653 ns/op
Iteration  21: 423,456 ns/op
Iteration  22: 428,735 ns/op
Iteration  23: 432,033 ns/op
Iteration  24: 423,061 ns/op
Iteration  25: 425,198 ns/op
Iteration  26: 421,911 ns/op
Iteration  27: 425,083 ns/op
Iteration  28: 430,212 ns/op
Iteration  29: 433,822 ns/op
Iteration  30: 419,160 ns/op
Iteration  31: 426,955 ns/op
Iteration  32: 421,253 ns/op
Iteration  33: 426,275 ns/op
Iteration  34: 418,195 ns/op
Iteration  35: 418,673 ns/op
Iteration  36: 424,082 ns/op
Iteration  37: 420,286 ns/op
Iteration  38: 419,398 ns/op
Iteration  39: 429,730 ns/op
Iteration  40: 433,375 ns/op
Iteration  41: 435,309 ns/op
Iteration  42: 423,681 ns/op
Iteration  43: 448,337 ns/op
Iteration  44: 419,513 ns/op
Iteration  45: 418,012 ns/op
Iteration  46: 417,154 ns/op
Iteration  47: 417,543 ns/op
Iteration  48: 429,338 ns/op
Iteration  49: 423,760 ns/op
Iteration  50: 422,612 ns/op
Iteration  51: 418,354 ns/op
Iteration  52: 419,476 ns/op
Iteration  53: 426,506 ns/op
Iteration  54: 424,549 ns/op
Iteration  55: 417,402 ns/op
Iteration  56: 417,054 ns/op
Iteration  57: 417,879 ns/op
Iteration  58: 424,044 ns/op
Iteration  59: 422,043 ns/op
Iteration  60: 422,593 ns/op
Iteration  61: 417,243 ns/op
Iteration  62: 428,414 ns/op
Iteration  63: 418,586 ns/op
Iteration  64: 417,594 ns/op
Iteration  65: 416,772 ns/op
Iteration  66: 416,916 ns/op
Iteration  67: 423,436 ns/op
Iteration  68: 418,939 ns/op
Iteration  69: 431,277 ns/op
Iteration  70: 424,153 ns/op
Iteration  71: 423,596 ns/op
Iteration  72: 417,295 ns/op
Iteration  73: 418,275 ns/op
Iteration  74: 417,683 ns/op
Iteration  75: 419,750 ns/op
Iteration  76: 416,833 ns/op
Iteration  77: 427,432 ns/op
Iteration  78: 421,177 ns/op
Iteration  79: 422,379 ns/op
Iteration  80: 425,955 ns/op
Iteration  81: 425,439 ns/op
Iteration  82: 417,609 ns/op
Iteration  83: 423,741 ns/op
Iteration  84: 417,337 ns/op
Iteration  85: 417,948 ns/op
Iteration  86: 417,081 ns/op
Iteration  87: 417,348 ns/op
Iteration  88: 418,720 ns/op
Iteration  89: 423,267 ns/op
Iteration  90: 416,602 ns/op
Iteration  91: 417,501 ns/op
Iteration  92: 426,664 ns/op
Iteration  93: 416,951 ns/op
Iteration  94: 432,429 ns/op
Iteration  95: 417,526 ns/op
Iteration  96: 417,735 ns/op
Iteration  97: 417,614 ns/op
Iteration  98: 419,342 ns/op
Iteration  99: 416,940 ns/op
Iteration 100: 419,912 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  422,770 ±(99.9%) 1,981 ns/op [Average]
  (min, avg, max) = (416,602, 422,770, 448,337), stdev = 5,840
  CI (99.9%): [420,790, 424,751] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                     (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-2.json  avgt  100  422,770 ± 1,981  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
879,539 ns/op
# Warmup Iteration   2: 814,635 ns/op
# Warmup Iteration   3: 809,357 ns/op
Iteration   1: 805,721 ns/op
Iteration   2: 805,929 ns/op
Iteration   3: 811,047 ns/op
Iteration   4: 803,687 ns/op
Iteration   5: 803,902 ns/op
Iteration   6: 802,778 ns/op
Iteration   7: 806,784 ns/op
Iteration   8: 803,281 ns/op
Iteration   9: 804,745 ns/op
Iteration  10: 804,103 ns/op
Iteration  11: 803,378 ns/op
Iteration  12: 811,092 ns/op
Iteration  13: 803,648 ns/op
Iteration  14: 804,585 ns/op
Iteration  15: 804,272 ns/op
Iteration  16: 803,706 ns/op
Iteration  17: 805,026 ns/op
Iteration  18: 805,167 ns/op
Iteration  19: 806,255 ns/op
Iteration  20: 810,724 ns/op
Iteration  21: 834,320 ns/op
Iteration  22: 808,901 ns/op
Iteration  23: 807,312 ns/op
Iteration  24: 806,173 ns/op
Iteration  25: 810,128 ns/op
Iteration  26: 823,226 ns/op
Iteration  27: 804,936 ns/op
Iteration  28: 805,562 ns/op
Iteration  29: 804,882 ns/op
Iteration  30: 825,766 ns/op
Iteration  31: 813,800 ns/op
Iteration  32: 804,942 ns/op
Iteration  33: 806,508 ns/op
Iteration  34: 815,927 ns/op
Iteration  35: 803,514 ns/op
Iteration  36: 804,375 ns/op
Iteration  37: 805,872 ns/op
Iteration  38: 806,365 ns/op
Iteration  39: 804,978 ns/op
Iteration  40: 809,222 ns/op
Iteration  41: 816,311 ns/op
Iteration  42: 808,543 ns/op
Iteration  43: 805,766 ns/op
Iteration  44: 804,727 ns/op
Iteration  45: 805,081 ns/op
Iteration  46: 805,158 ns/op
Iteration  47: 806,107 ns/op
Iteration  48: 805,843 ns/op
Iteration  49: 816,157 ns/op
Iteration  50: 805,244 ns/op
Iteration  51: 805,392 ns/op
Iteration  52: 807,392 ns/op
Iteration  53: 823,603 ns/op
Iteration  54: 804,939 ns/op
Iteration  55: 805,056 ns/op
Iteration  56: 805,416 ns/op
Iteration  57: 836,040 ns/op
Iteration  58: 808,223 ns/op
Iteration  59: 805,863 ns/op
Iteration  60: 812,264 ns/op
Iteration  61: 830,639 ns/op
Iteration  62: 813,046 ns/op
Iteration  63: 808,621 ns/op
Iteration  64: 804,934 ns/op
Iteration  65: 805,743 ns/op
Iteration  66: 805,549 ns/op
Iteration  67: 805,243 ns/op
Iteration  68: 807,918 ns/op
Iteration  69: 804,989 ns/op
Iteration  70: 806,153 ns/op
Iteration  71: 806,097 ns/op
Iteration  72: 805,028 ns/op
Iteration  73: 805,608 ns/op
Iteration  74: 804,983 ns/op
Iteration  75: 806,429 ns/op
Iteration  76: 805,059 ns/op
Iteration  77: 834,043 ns/op
Iteration  78: 815,751 ns/op
Iteration  79: 805,097 ns/op
Iteration  80: 811,329 ns/op
Iteration  81: 806,132 ns/op
Iteration  82: 803,992 ns/op
Iteration  83: 809,615 ns/op
Iteration  84: 815,787 ns/op
Iteration  85: 812,285 ns/op
Iteration  86: 839,834 ns/op
Iteration  87: 806,030 ns/op
Iteration  88: 805,635 ns/op
Iteration  89: 805,308 ns/op
Iteration  90: 821,507 ns/op
Iteration  91: 804,128 ns/op
Iteration  92: 805,679 ns/op
Iteration  93: 806,158 ns/op
Iteration  94: 804,331 ns/op
Iteration  95: 805,032 ns/op
Iteration  96: 806,790 ns/op
Iteration  97: 805,604 ns/op
Iteration  98: 805,290 ns/op
Iteration  99: 804,959 ns/op
Iteration 100: 804,520 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  808,805 ±(99.9%) 2,564 ns/op [Average]
  (min, avg, max) = (802,778, 808,805, 839,834), stdev = 7,561
  CI (99.9%): [806,241, 811,370] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                     (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-6.json  avgt  100  808,805 ± 2,564  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1525,274 ns/op
# Warmup Iteration   2: 1440,616 ns/op
# Warmup Iteration   3: 1439,139 ns/op
Iteration   1: 1423,029 ns/op
Iteration   2: 1426,837 ns/op
Iteration   3: 1453,541 ns/op
Iteration   4: 1466,813 ns/op
Iteration   5: 1426,558 ns/op
Iteration   6: 1429,619 ns/op
Iteration   7: 1426,480 ns/op
Iteration   8: 1424,889 ns/op
Iteration   9: 1425,131 ns/op
Iteration  10: 1425,496 ns/op
Iteration  11: 1426,329 ns/op
Iteration  12: 1425,439 ns/op
Iteration  13: 1425,960 ns/op
Iteration  14: 1456,855 ns/op
Iteration  15: 1441,292 ns/op
Iteration  16: 1454,571 ns/op
Iteration  17: 1446,358 ns/op
Iteration  18: 1453,140 ns/op
Iteration  19: 1452,614 ns/op
Iteration  20: 1437,508 ns/op
Iteration  21: 1491,639 ns/op
Iteration  22: 1507,291 ns/op
Iteration  23: 1451,392 ns/op
Iteration  24: 1442,867 ns/op
Iteration  25: 1442,100 ns/op
Iteration  26: 1446,473 ns/op
Iteration  27: 1429,705 ns/op
Iteration  28: 1453,694 ns/op
Iteration  29: 1433,877 ns/op
Iteration  30: 1448,786 ns/op
Iteration  31: 1470,087 ns/op
Iteration  32: 1435,903 ns/op
Iteration  33: 1519,689 ns/op
Iteration  34: 1435,249 ns/op
Iteration  35: 1432,856 ns/op
Iteration  36: 1427,455 ns/op
Iteration  37: 1438,056 ns/op
Iteration  38: 1448,790 ns/op
Iteration  39: 1434,985 ns/op
Iteration  40: 1442,756 ns/op
Iteration  41: 1432,377 ns/op
Iteration  42: 1438,995 ns/op
Iteration  43: 1462,543 ns/op
Iteration  44: 1429,233 ns/op
Iteration  45: 1433,496 ns/op
Iteration  46: 1447,601 ns/op
Iteration  47: 1492,798 ns/op
Iteration  48: 1484,326 ns/op
Iteration  49: 1449,154 ns/op
Iteration  50: 1465,598 ns/op
Iteration  51: 1435,233 ns/op
Iteration  52: 1447,171 ns/op
Iteration  53: 1441,326 ns/op
Iteration  54: 1487,361 ns/op
Iteration  55: 1456,681 ns/op
Iteration  56: 1433,165 ns/op
Iteration  57: 1498,219 ns/op
Iteration  58: 1458,851 ns/op
Iteration  59: 1454,333 ns/op
Iteration  60: 1440,596 ns/op
Iteration  61: 1431,873 ns/op
Iteration  62: 1462,419 ns/op
Iteration  63: 1472,608 ns/op
Iteration  64: 1438,553 ns/op
Iteration  65: 1439,581 ns/op
Iteration  66: 1441,459 ns/op
Iteration  67: 1429,399 ns/op
Iteration  68: 1442,768 ns/op
Iteration  69: 1450,994 ns/op
Iteration  70: 1431,343 ns/op
Iteration  71: 1451,107 ns/op
Iteration  72: 1435,718 ns/op
Iteration  73: 1451,917 ns/op
Iteration  74: 1442,498 ns/op
Iteration  75: 1463,134 ns/op
Iteration  76: 1436,674 ns/op
Iteration  77: 1445,062 ns/op
Iteration  78: 1439,963 ns/op
Iteration  79: 1433,870 ns/op
Iteration  80: 1439,685 ns/op
Iteration  81: 1433,129 ns/op
Iteration  82: 1481,105 ns/op
Iteration  83: 1463,430 ns/op
Iteration  84: 1443,564 ns/op
Iteration  85: 1448,725 ns/op
Iteration  86: 1442,071 ns/op
Iteration  87: 1431,923 ns/op
Iteration  88: 1455,425 ns/op
Iteration  89: 1443,699 ns/op
Iteration  90: 1451,878 ns/op
Iteration  91: 1444,387 ns/op
Iteration  92: 1435,823 ns/op
Iteration  93: 1435,913 ns/op
Iteration  94: 1437,098 ns/op
Iteration  95: 1493,350 ns/op
Iteration  96: 1475,074 ns/op
Iteration  97: 1435,863 ns/op
Iteration  98: 1444,559 ns/op
Iteration  99: 1443,361 ns/op
Iteration 100: 1442,532 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  1447,347 ±(99.9%) 6,532 ns/op [Average]
  (min, avg, max) = (1423,029, 1447,347, 1519,689), stdev = 19,260
  CI (99.9%): [1440,815, 1453,879] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                      (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-10.json  avgt  100  1447,347 ± 6,532  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
4006,470 ns/op
# Warmup Iteration   2: 3744,262 ns/op
# Warmup Iteration   3: 3740,038 ns/op
Iteration   1: 3713,324 ns/op
Iteration   2: 3717,006 ns/op
Iteration   3: 3733,781 ns/op
Iteration   4: 3753,659 ns/op
Iteration   5: 3747,943 ns/op
Iteration   6: 3693,549 ns/op
Iteration   7: 3713,104 ns/op
Iteration   8: 3750,496 ns/op
Iteration   9: 3804,285 ns/op
Iteration  10: 3714,286 ns/op
Iteration  11: 3691,141 ns/op
Iteration  12: 3736,051 ns/op
Iteration  13: 3752,406 ns/op
Iteration  14: 3717,886 ns/op
Iteration  15: 3736,923 ns/op
Iteration  16: 3715,199 ns/op
Iteration  17: 3826,146 ns/op
Iteration  18: 3749,028 ns/op
Iteration  19: 3771,361 ns/op
Iteration  20: 3744,213 ns/op
Iteration  21: 3721,649 ns/op
Iteration  22: 3727,749 ns/op
Iteration  23: 3747,581 ns/op
Iteration  24: 3775,224 ns/op
Iteration  25: 3736,401 ns/op
Iteration  26: 3720,293 ns/op
Iteration  27: 3778,507 ns/op
Iteration  28: 3719,536 ns/op
Iteration  29: 3741,042 ns/op
Iteration  30: 3741,776 ns/op
Iteration  31: 3730,595 ns/op
Iteration  32: 3841,449 ns/op
Iteration  33: 3797,440 ns/op
Iteration  34: 3717,796 ns/op
Iteration  35: 3846,801 ns/op
Iteration  36: 3801,733 ns/op
Iteration  37: 3759,973 ns/op
Iteration  38: 3760,635 ns/op
Iteration  39: 3789,909 ns/op
Iteration  40: 3793,226 ns/op
Iteration  41: 3759,306 ns/op
Iteration  42: 3747,337 ns/op
Iteration  43: 3721,157 ns/op
Iteration  44: 3717,961 ns/op
Iteration  45: 3732,378 ns/op
Iteration  46: 3761,226 ns/op
Iteration  47: 3734,448 ns/op
Iteration  48: 3852,591 ns/op
Iteration  49: 3722,256 ns/op
Iteration  50: 3756,443 ns/op
Iteration  51: 3721,550 ns/op
Iteration  52: 3764,796 ns/op
Iteration  53: 3761,656 ns/op
Iteration  54: 3721,930 ns/op
Iteration  55: 3753,367 ns/op
Iteration  56: 3743,123 ns/op
Iteration  57: 3720,723 ns/op
Iteration  58: 3736,366 ns/op
Iteration  59: 3808,328 ns/op
Iteration  60: 3716,058 ns/op
Iteration  61: 3763,251 ns/op
Iteration  62: 3775,342 ns/op
Iteration  63: 3741,781 ns/op
Iteration  64: 3760,925 ns/op
Iteration  65: 3724,981 ns/op
Iteration  66: 3715,789 ns/op
Iteration  67: 3728,263 ns/op
Iteration  68: 3753,899 ns/op
Iteration  69: 3897,868 ns/op
Iteration  70: 3722,106 ns/op
Iteration  71: 3721,321 ns/op
Iteration  72: 3745,614 ns/op
Iteration  73: 3788,596 ns/op
Iteration  74: 3746,806 ns/op
Iteration  75: 3771,418 ns/op
Iteration  76: 3731,223 ns/op
Iteration  77: 3736,280 ns/op
Iteration  78: 3723,472 ns/op
Iteration  79: 3739,963 ns/op
Iteration  80: 3721,075 ns/op
Iteration  81: 3800,807 ns/op
Iteration  82: 3721,957 ns/op
Iteration  83: 3754,670 ns/op
Iteration  84: 3756,380 ns/op
Iteration  85: 3736,474 ns/op
Iteration  86: 3782,476 ns/op
Iteration  87: 3718,361 ns/op
Iteration  88: 3714,419 ns/op
Iteration  89: 3819,926 ns/op
Iteration  90: 3764,908 ns/op
Iteration  91: 3764,274 ns/op
Iteration  92: 3777,990 ns/op
Iteration  93: 3714,753 ns/op
Iteration  94: 3745,180 ns/op
Iteration  95: 3767,617 ns/op
Iteration  96: 3731,868 ns/op
Iteration  97: 3716,823 ns/op
Iteration  98: 3727,822 ns/op
Iteration  99: 3862,354 ns/op
Iteration 100: 3757,671 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  3751,308 ±(99.9%) 12,664 ns/op [Average]
  (min, avg, max) = (3691,141, 3751,308, 3897,868), stdev = 37,339
  CI (99.9%): [3738,644, 3763,972] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                      (fileName)  Mode  Cnt     Score    Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-20.json  avgt  100  3751,308 ± 12,664  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
463,019 ns/op
# Warmup Iteration   2: 432,738 ns/op
# Warmup Iteration   3: 431,501 ns/op
Iteration   1: 426,421 ns/op
Iteration   2: 427,717 ns/op
Iteration   3: 436,114 ns/op
Iteration   4: 435,489 ns/op
Iteration   5: 425,876 ns/op
Iteration   6: 429,315 ns/op
Iteration   7: 440,246 ns/op
Iteration   8: 426,510 ns/op
Iteration   9: 426,694 ns/op
Iteration  10: 426,010 ns/op
Iteration  11: 426,036 ns/op
Iteration  12: 426,699 ns/op
Iteration  13: 432,513 ns/op
Iteration  14: 428,659 ns/op
Iteration  15: 428,220 ns/op
Iteration  16: 435,781 ns/op
Iteration  17: 435,004 ns/op
Iteration  18: 436,623 ns/op
Iteration  19: 448,874 ns/op
Iteration  20: 429,947 ns/op
Iteration  21: 433,811 ns/op
Iteration  22: 444,130 ns/op
Iteration  23: 432,852 ns/op
Iteration  24: 427,986 ns/op
Iteration  25: 443,032 ns/op
Iteration  26: 431,112 ns/op
Iteration  27: 433,747 ns/op
Iteration  28: 434,774 ns/op
Iteration  29: 438,321 ns/op
Iteration  30: 434,388 ns/op
Iteration  31: 431,682 ns/op
Iteration  32: 438,159 ns/op
Iteration  33: 428,093 ns/op
Iteration  34: 439,654 ns/op
Iteration  35: 448,296 ns/op
Iteration  36: 427,273 ns/op
Iteration  37: 432,889 ns/op
Iteration  38: 432,929 ns/op
Iteration  39: 432,986 ns/op
Iteration  40: 438,891 ns/op
Iteration  41: 431,828 ns/op
Iteration  42: 433,811 ns/op
Iteration  43: 430,606 ns/op
Iteration  44: 429,518 ns/op
Iteration  45: 427,856 ns/op
Iteration  46: 430,449 ns/op
Iteration  47: 427,546 ns/op
Iteration  48: 439,213 ns/op
Iteration  49: 429,643 ns/op
Iteration  50: 433,297 ns/op
Iteration  51: 437,041 ns/op
Iteration  52: 430,107 ns/op
Iteration  53: 431,029 ns/op
Iteration  54: 427,760 ns/op
Iteration  55: 427,490 ns/op
Iteration  56: 427,875 ns/op
Iteration  57: 427,738 ns/op
Iteration  58: 427,956 ns/op
Iteration  59: 427,669 ns/op
Iteration  60: 427,243 ns/op
Iteration  61: 430,164 ns/op
Iteration  62: 445,554 ns/op
Iteration  63: 443,041 ns/op
Iteration  64: 431,849 ns/op
Iteration  65: 437,491 ns/op
Iteration  66: 436,094 ns/op
Iteration  67: 428,687 ns/op
Iteration  68: 434,935 ns/op
Iteration  69: 427,138 ns/op
Iteration  70: 427,597 ns/op
Iteration  71: 427,506 ns/op
Iteration  72: 426,694 ns/op
Iteration  73: 427,301 ns/op
Iteration  74: 427,111 ns/op
Iteration  75: 428,598 ns/op
Iteration  76: 434,015 ns/op
Iteration  77: 444,299 ns/op
Iteration  78: 458,070 ns/op
Iteration  79: 440,797 ns/op
Iteration  80: 441,184 ns/op
Iteration  81: 433,682 ns/op
Iteration  82: 439,399 ns/op
Iteration  83: 431,804 ns/op
Iteration  84: 443,174 ns/op
Iteration  85: 428,149 ns/op
Iteration  86: 430,933 ns/op
Iteration  87: 431,471 ns/op
Iteration  88: 429,408 ns/op
Iteration  89: 427,330 ns/op
Iteration  90: 428,373 ns/op
Iteration  91: 444,693 ns/op
Iteration  92: 428,239 ns/op
Iteration  93: 443,697 ns/op
Iteration  94: 428,781 ns/op
Iteration  95: 433,687 ns/op
Iteration  96: 434,148 ns/op
Iteration  97: 427,416 ns/op
Iteration  98: 429,368 ns/op
Iteration  99: 429,249 ns/op
Iteration 100: 428,352 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  432,889 ±(99.9%) 2,111 ns/op [Average]
  (min, avg, max) = (425,876, 432,889, 458,070), stdev = 6,226
  CI (99.9%): [430,778, 435,001] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)               (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-2.json  avgt  100  432,889 ± 2,111  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1053,628 ns/op
# Warmup Iteration   2: 987,256 ns/op
# Warmup Iteration   3: 978,138 ns/op
Iteration   1: 990,456 ns/op
Iteration   2: 980,134 ns/op
Iteration   3: 980,385 ns/op
Iteration   4: 979,616 ns/op
Iteration   5: 1021,566 ns/op
Iteration   6: 1007,456 ns/op
Iteration   7: 982,253 ns/op
Iteration   8: 1001,223 ns/op
Iteration   9: 979,338 ns/op
Iteration  10: 989,668 ns/op
Iteration  11: 978,636 ns/op
Iteration  12: 978,659 ns/op
Iteration  13: 984,136 ns/op
Iteration  14: 981,007 ns/op
Iteration  15: 1005,478 ns/op
Iteration  16: 981,547 ns/op
Iteration  17: 994,382 ns/op
Iteration  18: 989,999 ns/op
Iteration  19: 993,511 ns/op
Iteration  20: 979,637 ns/op
Iteration  21: 992,470 ns/op
Iteration  22: 986,406 ns/op
Iteration  23: 1011,092 ns/op
Iteration  24: 1006,592 ns/op
Iteration  25: 984,122 ns/op
Iteration  26: 983,613 ns/op
Iteration  27: 989,501 ns/op
Iteration  28: 979,071 ns/op
Iteration  29: 1019,462 ns/op
Iteration  30: 981,515 ns/op
Iteration  31: 1000,052 ns/op
Iteration  32: 980,124 ns/op
Iteration  33: 1026,064 ns/op
Iteration  34: 1000,519 ns/op
Iteration  35: 999,811 ns/op
Iteration  36: 980,064 ns/op
Iteration  37: 978,169 ns/op
Iteration  38: 980,483 ns/op
Iteration  39: 979,416 ns/op
Iteration  40: 1016,086 ns/op
Iteration  41: 982,963 ns/op
Iteration  42: 1024,669 ns/op
Iteration  43: 1016,218 ns/op
Iteration  44: 984,501 ns/op
Iteration  45: 989,823 ns/op
Iteration  46: 983,527 ns/op
Iteration  47: 990,456 ns/op
Iteration  48: 986,843 ns/op
Iteration  49: 980,848 ns/op
Iteration  50: 979,926 ns/op
Iteration  51: 978,389 ns/op
Iteration  52: 988,742 ns/op
Iteration  53: 981,497 ns/op
Iteration  54: 980,793 ns/op
Iteration  55: 979,892 ns/op
Iteration  56: 989,776 ns/op
Iteration  57: 981,223 ns/op
Iteration  58: 1022,074 ns/op
Iteration  59: 982,310 ns/op
Iteration  60: 978,685 ns/op
Iteration  61: 981,100 ns/op
Iteration  62: 981,011 ns/op
Iteration  63: 997,298 ns/op
Iteration  64: 997,571 ns/op
Iteration  65: 995,675 ns/op
Iteration  66: 981,453 ns/op
Iteration  67: 980,965 ns/op
Iteration  68: 978,221 ns/op
Iteration  69: 997,809 ns/op
Iteration  70: 980,391 ns/op
Iteration  71: 996,125 ns/op
Iteration  72: 983,104 ns/op
Iteration  73: 982,954 ns/op
Iteration  74: 980,948 ns/op
Iteration  75: 982,695 ns/op
Iteration  76: 981,216 ns/op
Iteration  77: 979,241 ns/op
Iteration  78: 980,514 ns/op
Iteration  79: 980,921 ns/op
Iteration  80: 980,857 ns/op
Iteration  81: 980,354 ns/op
Iteration  82: 998,995 ns/op
Iteration  83: 980,023 ns/op
Iteration  84: 987,825 ns/op
Iteration  85: 983,008 ns/op
Iteration  86: 980,000 ns/op
Iteration  87: 1011,737 ns/op
Iteration  88: 985,632 ns/op
Iteration  89: 979,684 ns/op
Iteration  90: 986,175 ns/op
Iteration  91: 994,397 ns/op
Iteration  92: 980,964 ns/op
Iteration  93: 980,254 ns/op
Iteration  94: 981,519 ns/op
Iteration  95: 990,568 ns/op
Iteration  96: 985,069 ns/op
Iteration  97: 979,631 ns/op
Iteration  98: 978,943 ns/op
Iteration  99: 981,017 ns/op
Iteration 100: 1032,704 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  988,954 ±(99.9%) 4,331 ns/op [Average]
  (min, avg, max) = (978,169, 988,954, 1032,704), stdev = 12,770
  CI (99.9%): [984,623, 993,285] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)               (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-6.json  avgt  100  988,954 ± 4,331  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1625,901 ns/op
# Warmup Iteration   2: 1517,581 ns/op
# Warmup Iteration   3: 1525,987 ns/op
Iteration   1: 1515,615 ns/op
Iteration   2: 1520,677 ns/op
Iteration   3: 1529,227 ns/op
Iteration   4: 1544,024 ns/op
Iteration   5: 1616,526 ns/op
Iteration   6: 1562,168 ns/op
Iteration   7: 1556,780 ns/op
Iteration   8: 1551,278 ns/op
Iteration   9: 1516,692 ns/op
Iteration  10: 1537,547 ns/op
Iteration  11: 1520,448 ns/op
Iteration  12: 1517,679 ns/op
Iteration  13: 1517,256 ns/op
Iteration  14: 1522,820 ns/op
Iteration  15: 1522,050 ns/op
Iteration  16: 1521,821 ns/op
Iteration  17: 1520,798 ns/op
Iteration  18: 1521,897 ns/op
Iteration  19: 1532,435 ns/op
Iteration  20: 1523,197 ns/op
Iteration  21: 1522,780 ns/op
Iteration  22: 1527,556 ns/op
Iteration  23: 1523,033 ns/op
Iteration  24: 1522,300 ns/op
Iteration  25: 1538,109 ns/op
Iteration  26: 1522,512 ns/op
Iteration  27: 1522,138 ns/op
Iteration  28: 1522,639 ns/op
Iteration  29: 1525,069 ns/op
Iteration  30: 1566,037 ns/op
Iteration  31: 1522,685 ns/op
Iteration  32: 1555,265 ns/op
Iteration  33: 1552,853 ns/op
Iteration  34: 1526,926 ns/op
Iteration  35: 1522,745 ns/op
Iteration  36: 1554,796 ns/op
Iteration  37: 1526,318 ns/op
Iteration  38: 1522,969 ns/op
Iteration  39: 1551,517 ns/op
Iteration  40: 1524,719 ns/op
Iteration  41: 1523,061 ns/op
Iteration  42: 1529,132 ns/op
Iteration  43: 1553,874 ns/op
Iteration  44: 1520,677 ns/op
Iteration  45: 1533,120 ns/op
Iteration  46: 1540,241 ns/op
Iteration  47: 1521,562 ns/op
Iteration  48: 1528,679 ns/op
Iteration  49: 1523,531 ns/op
Iteration  50: 1523,791 ns/op
Iteration  51: 1530,529 ns/op
Iteration  52: 1525,124 ns/op
Iteration  53: 1523,956 ns/op
Iteration  54: 1520,812 ns/op
Iteration  55: 1570,524 ns/op
Iteration  56: 1562,381 ns/op
Iteration  57: 1521,310 ns/op
Iteration  58: 1523,758 ns/op
Iteration  59: 1521,945 ns/op
Iteration  60: 1524,085 ns/op
Iteration  61: 1523,559 ns/op
Iteration  62: 1523,157 ns/op
Iteration  63: 1522,527 ns/op
Iteration  64: 1524,460 ns/op
Iteration  65: 1523,609 ns/op
Iteration  66: 1523,111 ns/op
Iteration  67: 1525,052 ns/op
Iteration  68: 1520,649 ns/op
Iteration  69: 1522,826 ns/op
Iteration  70: 1521,247 ns/op
Iteration  71: 1526,793 ns/op
Iteration  72: 1524,190 ns/op
Iteration  73: 1521,843 ns/op
Iteration  74: 1522,410 ns/op
Iteration  75: 1523,359 ns/op
Iteration  76: 1554,362 ns/op
Iteration  77: 1520,919 ns/op
Iteration  78: 1522,691 ns/op
Iteration  79: 1521,782 ns/op
Iteration  80: 1523,169 ns/op
Iteration  81: 1530,463 ns/op
Iteration  82: 1524,794 ns/op
Iteration  83: 1527,565 ns/op
Iteration  84: 1564,260 ns/op
Iteration  85: 1529,190 ns/op
Iteration  86: 1523,566 ns/op
Iteration  87: 1521,332 ns/op
Iteration  88: 1521,848 ns/op
Iteration  89: 1520,923 ns/op
Iteration  90: 1522,299 ns/op
Iteration  91: 1523,478 ns/op
Iteration  92: 1522,945 ns/op
Iteration  93: 1520,737 ns/op
Iteration  94: 1522,264 ns/op
Iteration  95: 1522,224 ns/op
Iteration  96: 1522,417 ns/op
Iteration  97: 1545,499 ns/op
Iteration  98: 1522,657 ns/op
Iteration  99: 1554,156 ns/op
Iteration 100: 1526,179 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  1530,065 ±(99.9%) 5,252 ns/op [Average]
  (min, avg, max) = (1515,615, 1530,065, 1616,526), stdev = 15,486
  CI (99.9%): [1524,813, 1535,317] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)                (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-10.json  avgt  100  1530,065 ± 5,252  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3412,503 ns/op
# Warmup Iteration   2: 3225,997 ns/op
# Warmup Iteration   3: 3246,164 ns/op
Iteration   1: 3320,536 ns/op
Iteration   2: 3303,270 ns/op
Iteration   3: 3313,401 ns/op
Iteration   4: 3216,047 ns/op
Iteration   5: 3211,694 ns/op
Iteration   6: 3213,096 ns/op
Iteration   7: 3226,601 ns/op
Iteration   8: 3265,037 ns/op
Iteration   9: 3248,364 ns/op
Iteration  10: 3213,605 ns/op
Iteration  11: 3224,905 ns/op
Iteration  12: 3215,815 ns/op
Iteration  13: 3214,556 ns/op
Iteration  14: 3243,409 ns/op
Iteration  15: 3247,033 ns/op
Iteration  16: 3233,724 ns/op
Iteration  17: 3377,586 ns/op
Iteration  18: 3299,010 ns/op
Iteration  19: 3295,062 ns/op
Iteration  20: 3256,686 ns/op
Iteration  21: 3231,936 ns/op
Iteration  22: 3236,919 ns/op
Iteration  23: 3239,711 ns/op
Iteration  24: 3231,771 ns/op
Iteration  25: 3233,633 ns/op
Iteration  26: 3233,936 ns/op
Iteration  27: 3238,521 ns/op
Iteration  28: 3230,892 ns/op
Iteration  29: 3230,974 ns/op
Iteration  30: 3236,419 ns/op
Iteration  31: 3239,795 ns/op
Iteration  32: 3246,959 ns/op
Iteration  33: 3346,646 ns/op
Iteration  34: 3238,704 ns/op
Iteration  35: 3234,773 ns/op
Iteration  36: 3235,101 ns/op
Iteration  37: 3231,615 ns/op
Iteration  38: 3235,293 ns/op
Iteration  39: 3235,495 ns/op
Iteration  40: 3238,974 ns/op
Iteration  41: 3238,709 ns/op
Iteration  42: 3235,034 ns/op
Iteration  43: 3231,583 ns/op
Iteration  44: 3234,343 ns/op
Iteration  45: 3234,050 ns/op
Iteration  46: 3231,434 ns/op
Iteration  47: 3235,361 ns/op
Iteration  48: 3233,190 ns/op
Iteration  49: 3295,184 ns/op
Iteration  50: 3233,403 ns/op
Iteration  51: 3231,358 ns/op
Iteration  52: 3243,518 ns/op
Iteration  53: 3257,467 ns/op
Iteration  54: 3237,887 ns/op
Iteration  55: 3233,120 ns/op
Iteration  56: 3278,863 ns/op
Iteration  57: 3231,652 ns/op
Iteration  58: 3236,446 ns/op
Iteration  59: 3235,288 ns/op
Iteration  60: 3235,499 ns/op
Iteration  61: 3238,617 ns/op
Iteration  62: 3233,688 ns/op
Iteration  63: 3288,306 ns/op
Iteration  64: 3362,222 ns/op
Iteration  65: 3238,500 ns/op
Iteration  66: 3236,826 ns/op
Iteration  67: 3238,566 ns/op
Iteration  68: 3447,365 ns/op
Iteration  69: 3236,211 ns/op
Iteration  70: 3416,309 ns/op
Iteration  71: 3237,610 ns/op
Iteration  72: 3307,331 ns/op
Iteration  73: 3233,280 ns/op
Iteration  74: 3315,927 ns/op
Iteration  75: 3284,186 ns/op
Iteration  76: 3261,261 ns/op
Iteration  77: 3389,222 ns/op
Iteration  78: 3235,038 ns/op
Iteration  79: 3234,555 ns/op
Iteration  80: 3234,435 ns/op
Iteration  81: 3236,667 ns/op
Iteration  82: 3233,089 ns/op
Iteration  83: 3238,576 ns/op
Iteration  84: 3239,733 ns/op
Iteration  85: 3258,306 ns/op
Iteration  86: 3338,776 ns/op
Iteration  87: 3232,444 ns/op
Iteration  88: 3233,409 ns/op
Iteration  89: 3258,948 ns/op
Iteration  90: 3231,520 ns/op
Iteration  91: 3273,540 ns/op
Iteration  92: 3237,821 ns/op
Iteration  93: 3233,553 ns/op
Iteration  94: 3233,497 ns/op
Iteration  95: 3235,179 ns/op
Iteration  96: 3234,399 ns/op
Iteration  97: 3233,812 ns/op
Iteration  98: 3232,289 ns/op
Iteration  99: 3240,469 ns/op
Iteration 100: 3251,439 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  3253,678 ±(99.9%) 14,633 ns/op [Average]
  (min, avg, max) = (3211,694, 3253,678, 3447,365), stdev = 43,146
  CI (99.9%): [3239,045, 3268,311] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)                (fileName)  Mode  Cnt     Score    Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-20.json  avgt  100  3253,678 ± 14,633  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
472,880 ns/op
# Warmup Iteration   2: 441,773 ns/op
# Warmup Iteration   3: 460,689 ns/op
Iteration   1: 464,794 ns/op
Iteration   2: 459,856 ns/op
Iteration   3: 469,442 ns/op
Iteration   4: 461,146 ns/op
Iteration   5: 460,818 ns/op
Iteration   6: 459,098 ns/op
Iteration   7: 477,575 ns/op
Iteration   8: 463,764 ns/op
Iteration   9: 461,299 ns/op
Iteration  10: 459,550 ns/op
Iteration  11: 459,595 ns/op
Iteration  12: 459,069 ns/op
Iteration  13: 467,137 ns/op
Iteration  14: 458,969 ns/op
Iteration  15: 462,303 ns/op
Iteration  16: 459,931 ns/op
Iteration  17: 460,089 ns/op
Iteration  18: 459,446 ns/op
Iteration  19: 459,717 ns/op
Iteration  20: 460,270 ns/op
Iteration  21: 460,453 ns/op
Iteration  22: 458,768 ns/op
Iteration  23: 469,869 ns/op
Iteration  24: 459,602 ns/op
Iteration  25: 460,785 ns/op
Iteration  26: 459,506 ns/op
Iteration  27: 460,261 ns/op
Iteration  28: 459,311 ns/op
Iteration  29: 459,995 ns/op
Iteration  30: 460,313 ns/op
Iteration  31: 460,297 ns/op
Iteration  32: 459,535 ns/op
Iteration  33: 460,474 ns/op
Iteration  34: 458,915 ns/op
Iteration  35: 462,219 ns/op
Iteration  36: 464,879 ns/op
Iteration  37: 460,590 ns/op
Iteration  38: 462,313 ns/op
Iteration  39: 460,367 ns/op
Iteration  40: 460,299 ns/op
Iteration  41: 468,454 ns/op
Iteration  42: 460,705 ns/op
Iteration  43: 459,825 ns/op
Iteration  44: 460,175 ns/op
Iteration  45: 467,063 ns/op
Iteration  46: 460,294 ns/op
Iteration  47: 459,464 ns/op
Iteration  48: 459,938 ns/op
Iteration  49: 459,472 ns/op
Iteration  50: 460,254 ns/op
Iteration  51: 460,001 ns/op
Iteration  52: 462,036 ns/op
Iteration  53: 459,060 ns/op
Iteration  54: 462,576 ns/op
Iteration  55: 459,631 ns/op
Iteration  56: 459,827 ns/op
Iteration  57: 459,595 ns/op
Iteration  58: 460,749 ns/op
Iteration  59: 459,172 ns/op
Iteration  60: 460,750 ns/op
Iteration  61: 461,413 ns/op
Iteration  62: 460,980 ns/op
Iteration  63: 459,460 ns/op
Iteration  64: 461,450 ns/op
Iteration  65: 459,541 ns/op
Iteration  66: 460,280 ns/op
Iteration  67: 459,923 ns/op
Iteration  68: 460,268 ns/op
Iteration  69: 460,153 ns/op
Iteration  70: 460,311 ns/op
Iteration  71: 459,479 ns/op
Iteration  72: 460,020 ns/op
Iteration  73: 461,518 ns/op
Iteration  74: 460,988 ns/op
Iteration  75: 460,837 ns/op
Iteration  76: 460,641 ns/op
Iteration  77: 462,312 ns/op
Iteration  78: 460,980 ns/op
Iteration  79: 460,192 ns/op
Iteration  80: 460,328 ns/op
Iteration  81: 460,397 ns/op
Iteration  82: 460,106 ns/op
Iteration  83: 459,784 ns/op
Iteration  84: 460,628 ns/op
Iteration  85: 459,824 ns/op
Iteration  86: 459,812 ns/op
Iteration  87: 460,065 ns/op
Iteration  88: 460,018 ns/op
Iteration  89: 462,622 ns/op
Iteration  90: 461,189 ns/op
Iteration  91: 460,501 ns/op
Iteration  92: 460,350 ns/op
Iteration  93: 468,290 ns/op
Iteration  94: 461,891 ns/op
Iteration  95: 460,401 ns/op
Iteration  96: 460,455 ns/op
Iteration  97: 460,938 ns/op
Iteration  98: 459,497 ns/op
Iteration  99: 459,098 ns/op
Iteration 100: 459,591 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  461,082 ±(99.9%) 0,937 ns/op [Average]
  (min, avg, max) = (458,768, 461,082, 477,575), stdev = 2,764
  CI (99.9%): [460,144, 462,019] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)           (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-2.json  avgt  100  461,082 ± 0,937  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
988,935 ns/op
# Warmup Iteration   2: 931,770 ns/op
# Warmup Iteration   3: 930,521 ns/op
Iteration   1: 917,450 ns/op
Iteration   2: 931,336 ns/op
Iteration   3: 921,231 ns/op
Iteration   4: 955,729 ns/op
Iteration   5: 925,502 ns/op
Iteration   6: 923,609 ns/op
Iteration   7: 922,912 ns/op
Iteration   8: 919,362 ns/op
Iteration   9: 919,845 ns/op
Iteration  10: 919,985 ns/op
Iteration  11: 921,193 ns/op
Iteration  12: 921,119 ns/op
Iteration  13: 941,968 ns/op
Iteration  14: 944,526 ns/op
Iteration  15: 936,394 ns/op
Iteration  16: 941,846 ns/op
Iteration  17: 944,498 ns/op
Iteration  18: 964,144 ns/op
Iteration  19: 926,936 ns/op
Iteration  20: 929,049 ns/op
Iteration  21: 947,699 ns/op
Iteration  22: 958,858 ns/op
Iteration  23: 934,150 ns/op
Iteration  24: 930,541 ns/op
Iteration  25: 933,387 ns/op
Iteration  26: 940,595 ns/op
Iteration  27: 927,315 ns/op
Iteration  28: 942,447 ns/op
Iteration  29: 934,390 ns/op
Iteration  30: 980,013 ns/op
Iteration  31: 961,855 ns/op
Iteration  32: 927,114 ns/op
Iteration  33: 938,643 ns/op
Iteration  34: 932,169 ns/op
Iteration  35: 928,931 ns/op
Iteration  36: 927,149 ns/op
Iteration  37: 927,747 ns/op
Iteration  38: 927,518 ns/op
Iteration  39: 926,270 ns/op
Iteration  40: 928,303 ns/op
Iteration  41: 930,778 ns/op
Iteration  42: 931,436 ns/op
Iteration  43: 927,524 ns/op
Iteration  44: 931,492 ns/op
Iteration  45: 926,471 ns/op
Iteration  46: 959,170 ns/op
Iteration  47: 930,247 ns/op
Iteration  48: 926,853 ns/op
Iteration  49: 927,918 ns/op
Iteration  50: 927,387 ns/op
Iteration  51: 926,771 ns/op
Iteration  52: 928,994 ns/op
Iteration  53: 980,175 ns/op
Iteration  54: 959,795 ns/op
Iteration  55: 947,549 ns/op
Iteration  56: 926,845 ns/op
Iteration  57: 927,602 ns/op
Iteration  58: 928,143 ns/op
Iteration  59: 936,108 ns/op
Iteration  60: 943,167 ns/op
Iteration  61: 951,220 ns/op
Iteration  62: 943,328 ns/op
Iteration  63: 947,008 ns/op
Iteration  64: 937,633 ns/op
Iteration  65: 927,844 ns/op
Iteration  66: 944,669 ns/op
Iteration  67: 930,628 ns/op
Iteration  68: 967,527 ns/op
Iteration  69: 927,411 ns/op
Iteration  70: 941,987 ns/op
Iteration  71: 928,832 ns/op
Iteration  72: 927,054 ns/op
Iteration  73: 942,407 ns/op
Iteration  74: 926,450 ns/op
Iteration  75: 929,753 ns/op
Iteration  76: 928,530 ns/op
Iteration  77: 943,002 ns/op
Iteration  78: 926,638 ns/op
Iteration  79: 927,186 ns/op
Iteration  80: 927,501 ns/op
Iteration  81: 964,139 ns/op
Iteration  82: 943,186 ns/op
Iteration  83: 930,044 ns/op
Iteration  84: 929,254 ns/op
Iteration  85: 956,099 ns/op
Iteration  86: 943,491 ns/op
Iteration  87: 928,926 ns/op
Iteration  88: 925,838 ns/op
Iteration  89: 927,743 ns/op
Iteration  90: 943,204 ns/op
Iteration  91: 934,154 ns/op
Iteration  92: 947,594 ns/op
Iteration  93: 927,605 ns/op
Iteration  94: 938,247 ns/op
Iteration  95: 964,372 ns/op
Iteration  96: 926,606 ns/op
Iteration  97: 943,499 ns/op
Iteration  98: 977,124 ns/op
Iteration  99: 953,663 ns/op
Iteration 100: 931,565 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  936,711 ±(99.9%) 4,692 ns/op [Average]
  (min, avg, max) = (917,450, 936,711, 980,175), stdev = 13,834
  CI (99.9%): [932,019, 941,403] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)           (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-6.json  avgt  100  936,711 ± 4,692  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1639,713 ns/op
# Warmup Iteration   2: 1557,622 ns/op
# Warmup Iteration   3: 1551,648 ns/op
Iteration   1: 1555,685 ns/op
Iteration   2: 1537,046 ns/op
Iteration   3: 1532,659 ns/op
Iteration   4: 1568,733 ns/op
Iteration   5: 1566,303 ns/op
Iteration   6: 1533,636 ns/op
Iteration   7: 1573,668 ns/op
Iteration   8: 1529,875 ns/op
Iteration   9: 1535,748 ns/op
Iteration  10: 1569,663 ns/op
Iteration  11: 1568,124 ns/op
Iteration  12: 1532,034 ns/op
Iteration  13: 1531,198 ns/op
Iteration  14: 1545,399 ns/op
Iteration  15: 1522,782 ns/op
Iteration  16: 1527,665 ns/op
Iteration  17: 1526,719 ns/op
Iteration  18: 1528,666 ns/op
Iteration  19: 1559,849 ns/op
Iteration  20: 1534,384 ns/op
Iteration  21: 1530,770 ns/op
Iteration  22: 1542,145 ns/op
Iteration  23: 1563,285 ns/op
Iteration  24: 1525,003 ns/op
Iteration  25: 1528,134 ns/op
Iteration  26: 1524,993 ns/op
Iteration  27: 1525,429 ns/op
Iteration  28: 1525,746 ns/op
Iteration  29: 1525,128 ns/op
Iteration  30: 1528,918 ns/op
Iteration  31: 1526,442 ns/op
Iteration  32: 1525,890 ns/op
Iteration  33: 1530,748 ns/op
Iteration  34: 1531,116 ns/op
Iteration  35: 1526,190 ns/op
Iteration  36: 1524,807 ns/op
Iteration  37: 1524,674 ns/op
Iteration  38: 1527,074 ns/op
Iteration  39: 1525,652 ns/op
Iteration  40: 1530,026 ns/op
Iteration  41: 1527,274 ns/op
Iteration  42: 1532,430 ns/op
Iteration  43: 1559,910 ns/op
Iteration  44: 1528,555 ns/op
Iteration  45: 1524,709 ns/op
Iteration  46: 1525,333 ns/op
Iteration  47: 1524,051 ns/op
Iteration  48: 1551,118 ns/op
Iteration  49: 1535,763 ns/op
Iteration  50: 1564,641 ns/op
Iteration  51: 1524,483 ns/op
Iteration  52: 1526,420 ns/op
Iteration  53: 1537,502 ns/op
Iteration  54: 1521,285 ns/op
Iteration  55: 1528,390 ns/op
Iteration  56: 1524,533 ns/op
Iteration  57: 1526,215 ns/op
Iteration  58: 1524,441 ns/op
Iteration  59: 1525,954 ns/op
Iteration  60: 1525,871 ns/op
Iteration  61: 1526,062 ns/op
Iteration  62: 1526,271 ns/op
Iteration  63: 1528,364 ns/op
Iteration  64: 1524,394 ns/op
Iteration  65: 1526,600 ns/op
Iteration  66: 1524,595 ns/op
Iteration  67: 1525,831 ns/op
Iteration  68: 1536,777 ns/op
Iteration  69: 1527,885 ns/op
Iteration  70: 1563,565 ns/op
Iteration  71: 1529,405 ns/op
Iteration  72: 1551,779 ns/op
Iteration  73: 1572,938 ns/op
Iteration  74: 1525,036 ns/op
Iteration  75: 1525,882 ns/op
Iteration  76: 1526,589 ns/op
Iteration  77: 1524,866 ns/op
Iteration  78: 1523,133 ns/op
Iteration  79: 1537,115 ns/op
Iteration  80: 1526,971 ns/op
Iteration  81: 1526,106 ns/op
Iteration  82: 1527,886 ns/op
Iteration  83: 1524,639 ns/op
Iteration  84: 1532,666 ns/op
Iteration  85: 1527,155 ns/op
Iteration  86: 1577,319 ns/op
Iteration  87: 1567,514 ns/op
Iteration  88: 1524,965 ns/op
Iteration  89: 1523,642 ns/op
Iteration  90: 1530,075 ns/op
Iteration  91: 1527,524 ns/op
Iteration  92: 1566,325 ns/op
Iteration  93: 1523,030 ns/op
Iteration  94: 1525,451 ns/op
Iteration  95: 1563,149 ns/op
Iteration  96: 1524,686 ns/op
Iteration  97: 1555,347 ns/op
Iteration  98: 1528,088 ns/op
Iteration  99: 1559,104 ns/op
Iteration 100: 1528,697 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  1535,283 ±(99.9%) 5,170 ns/op [Average]
  (min, avg, max) = (1521,285, 1535,283, 1577,319), stdev = 15,244
  CI (99.9%): [1530,113, 1540,453] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)            (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-10.json  avgt  100  1535,283 ± 5,170  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-open/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3768,101 ns/op
# Warmup Iteration   2: 3511,461 ns/op
# Warmup Iteration   3: 3500,232 ns/op
Iteration   1: 3503,099 ns/op
Iteration   2: 3496,806 ns/op
Iteration   3: 3506,718 ns/op
Iteration   4: 3489,331 ns/op
Iteration   5: 3497,509 ns/op
Iteration   6: 3494,059 ns/op
Iteration   7: 3524,338 ns/op
Iteration   8: 3569,119 ns/op
Iteration   9: 3490,290 ns/op
Iteration  10: 3546,212 ns/op
Iteration  11: 3490,555 ns/op
Iteration  12: 3498,920 ns/op
Iteration  13: 3499,328 ns/op
Iteration  14: 3545,086 ns/op
Iteration  15: 3474,550 ns/op
Iteration  16: 3476,877 ns/op
Iteration  17: 3472,157 ns/op
Iteration  18: 3611,222 ns/op
Iteration  19: 3545,527 ns/op
Iteration  20: 3487,770 ns/op
Iteration  21: 3517,685 ns/op
Iteration  22: 3494,343 ns/op
Iteration  23: 3732,087 ns/op
Iteration  24: 3487,730 ns/op
Iteration  25: 3477,165 ns/op
Iteration  26: 3475,229 ns/op
Iteration  27: 3480,513 ns/op
Iteration  28: 3475,948 ns/op
Iteration  29: 3473,737 ns/op
Iteration  30: 3483,913 ns/op
Iteration  31: 3568,825 ns/op
Iteration  32: 3612,155 ns/op
Iteration  33: 3477,747 ns/op
Iteration  34: 3509,179 ns/op
Iteration  35: 3477,727 ns/op
Iteration  36: 3585,729 ns/op
Iteration  37: 3478,163 ns/op
Iteration  38: 3572,610 ns/op
Iteration  39: 3479,821 ns/op
Iteration  40: 3480,866 ns/op
Iteration  41: 3505,483 ns/op
Iteration  42: 3474,173 ns/op
Iteration  43: 3479,534 ns/op
Iteration  44: 3476,572 ns/op
Iteration  45: 3485,216 ns/op
Iteration  46: 3474,161 ns/op
Iteration  47: 3477,525 ns/op
Iteration  48: 3475,261 ns/op
Iteration  49: 3478,679 ns/op
Iteration  50: 3488,356 ns/op
Iteration  51: 3477,656 ns/op
Iteration  52: 3485,871 ns/op
Iteration  53: 3482,035 ns/op
Iteration  54: 3480,390 ns/op
Iteration  55: 3479,894 ns/op
Iteration  56: 3480,882 ns/op
Iteration  57: 3475,308 ns/op
Iteration  58: 3477,026 ns/op
Iteration  59: 3478,194 ns/op
Iteration  60: 3475,204 ns/op
Iteration  61: 3483,531 ns/op
Iteration  62: 3477,090 ns/op
Iteration  63: 3501,812 ns/op
Iteration  64: 3473,615 ns/op
Iteration  65: 3632,894 ns/op
Iteration  66: 3478,677 ns/op
Iteration  67: 3535,974 ns/op
Iteration  68: 3480,664 ns/op
Iteration  69: 3477,781 ns/op
Iteration  70: 3576,358 ns/op
Iteration  71: 3481,668 ns/op
Iteration  72: 3480,392 ns/op
Iteration  73: 3475,171 ns/op
Iteration  74: 3478,010 ns/op
Iteration  75: 3486,325 ns/op
Iteration  76: 3476,673 ns/op
Iteration  77: 3487,346 ns/op
Iteration  78: 3481,367 ns/op
Iteration  79: 3479,823 ns/op
Iteration  80: 3481,986 ns/op
Iteration  81: 3480,247 ns/op
Iteration  82: 3476,824 ns/op
Iteration  83: 3475,985 ns/op
Iteration  84: 3482,855 ns/op
Iteration  85: 3536,850 ns/op
Iteration  86: 3480,183 ns/op
Iteration  87: 3479,539 ns/op
Iteration  88: 3473,049 ns/op
Iteration  89: 3478,377 ns/op
Iteration  90: 3477,541 ns/op
Iteration  91: 3488,254 ns/op
Iteration  92: 3477,277 ns/op
Iteration  93: 3712,201 ns/op
Iteration  94: 3612,844 ns/op
Iteration  95: 3477,550 ns/op
Iteration  96: 3520,868 ns/op
Iteration  97: 3552,643 ns/op
Iteration  98: 3475,650 ns/op
Iteration  99: 3471,877 ns/op
Iteration 100: 3490,918 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  3502,168 ±(99.9%) 16,169 ns/op [Average]
  (min, avg, max) = (3471,877, 3502,168, 3732,087), stdev = 47,674
  CI (99.9%): [3485,999, 3518,336] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)            (fileName)  Mode  Cnt     Score    Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-20.json  avgt  100  3502,168 ± 16,169  ns/op

Using:

java: 11.0.5-zulu
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 444,127 ns/op
# Warmup Iteration   2: 420,310 ns/op
# Warmup Iteration   3: 425,752 ns/op
Iteration   1: 433,843 ns/op
Iteration   2: 415,760 ns/op
Iteration   3: 425,124 ns/op
Iteration   4: 419,819 ns/op
Iteration   5: 418,502 ns/op
Iteration   6: 419,067 ns/op
Iteration   7: 438,229 ns/op
Iteration   8: 415,173 ns/op
Iteration   9: 434,555 ns/op
Iteration  10: 424,032 ns/op
Iteration  11: 414,820 ns/op
Iteration  12: 414,790 ns/op
Iteration  13: 426,932 ns/op
Iteration  14: 418,053 ns/op
Iteration  15: 419,450 ns/op
Iteration  16: 431,743 ns/op
Iteration  17: 420,445 ns/op
Iteration  18: 419,283 ns/op
Iteration  19: 420,004 ns/op
Iteration  20: 418,652 ns/op
Iteration  21: 418,406 ns/op
Iteration  22: 421,458 ns/op
Iteration  23: 419,927 ns/op
Iteration  24: 422,041 ns/op
Iteration  25: 428,723 ns/op
Iteration  26: 436,847 ns/op
Iteration  27: 427,424 ns/op
Iteration  28: 423,017 ns/op
Iteration  29: 423,633 ns/op
Iteration  30: 423,146 ns/op
Iteration  31: 428,153 ns/op
Iteration  32: 420,543 ns/op
Iteration  33: 425,231 ns/op
Iteration  34: 427,075 ns/op
Iteration  35: 428,821 ns/op
Iteration  36: 424,218 ns/op
Iteration  37: 420,342 ns/op
Iteration  38: 437,713 ns/op
Iteration  39: 432,789 ns/op
Iteration  40: 419,854 ns/op
Iteration  41: 422,947 ns/op
Iteration  42: 425,107 ns/op
Iteration  43: 425,999 ns/op
Iteration  44: 427,567 ns/op
Iteration  45: 427,639 ns/op
Iteration  46: 426,535 ns/op
Iteration  47: 423,501 ns/op
Iteration  48: 432,251 ns/op
Iteration  49: 431,964 ns/op
Iteration  50: 419,599 ns/op
Iteration  51: 419,982 ns/op
Iteration  52: 418,966 ns/op
Iteration  53: 419,756 ns/op
Iteration  54: 420,318 ns/op
Iteration  55: 419,725 ns/op
Iteration  56: 430,850 ns/op
Iteration  57: 422,679 ns/op
Iteration  58: 421,155 ns/op
Iteration  59: 418,992 ns/op
Iteration  60: 420,445 ns/op
Iteration  61: 420,172 ns/op
Iteration  62: 424,118 ns/op
Iteration  63: 425,350 ns/op
Iteration  64: 421,087 ns/op
Iteration  65: 431,204 ns/op
Iteration  66: 425,493 ns/op
Iteration  67: 421,997 ns/op
Iteration  68: 425,222 ns/op
Iteration  69: 433,887 ns/op
Iteration  70: 428,799 ns/op
Iteration  71: 430,332 ns/op
Iteration  72: 424,216 ns/op
Iteration  73: 425,247 ns/op
Iteration  74: 426,967 ns/op
Iteration  75: 434,416 ns/op
Iteration  76: 419,422 ns/op
Iteration  77: 425,275 ns/op
Iteration  78: 421,253 ns/op
Iteration  79: 425,147 ns/op
Iteration  80: 421,070 ns/op
Iteration  81: 431,318 ns/op
Iteration  82: 428,710 ns/op
Iteration  83: 428,312 ns/op
Iteration  84: 421,610 ns/op
Iteration  85: 421,297 ns/op
Iteration  86: 422,081 ns/op
Iteration  87: 420,631 ns/op
Iteration  88: 420,905 ns/op
Iteration  89: 429,330 ns/op
Iteration  90: 429,372 ns/op
Iteration  91: 433,603 ns/op
Iteration  92: 428,195 ns/op
Iteration  93: 425,202 ns/op
Iteration  94: 435,411 ns/op
Iteration  95: 425,596 ns/op
Iteration  96: 420,765 ns/op
Iteration  97: 429,547 ns/op
Iteration  98: 421,019 ns/op
Iteration  99: 431,909 ns/op
Iteration 100: 421,272 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  424,704 ±(99.9%) 1,837 ns/op [Average]
  (min, avg, max) = (414,790, 424,704, 438,229), stdev = 5,417
  CI (99.9%): [422,866, 426,541] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                     (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-2.json  avgt  100  424,704 ± 1,837  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 960,754 ns/op
# Warmup Iteration   2: 914,227 ns/op
# Warmup Iteration   3: 912,246 ns/op
Iteration   1: 894,449 ns/op
Iteration   2: 904,751 ns/op
Iteration   3: 895,877 ns/op
Iteration   4: 897,931 ns/op
Iteration   5: 908,601 ns/op
Iteration   6: 904,003 ns/op
Iteration   7: 903,484 ns/op
Iteration   8: 897,802 ns/op
Iteration   9: 894,405 ns/op
Iteration  10: 904,101 ns/op
Iteration  11: 897,642 ns/op
Iteration  12: 901,779 ns/op
Iteration  13: 894,219 ns/op
Iteration  14: 897,174 ns/op
Iteration  15: 896,080 ns/op
Iteration  16: 896,519 ns/op
Iteration  17: 909,975 ns/op
Iteration  18: 946,882 ns/op
Iteration  19: 913,604 ns/op
Iteration  20: 912,942 ns/op
Iteration  21: 907,286 ns/op
Iteration  22: 929,273 ns/op
Iteration  23: 923,178 ns/op
Iteration  24: 933,272 ns/op
Iteration  25: 912,550 ns/op
Iteration  26: 921,020 ns/op
Iteration  27: 901,869 ns/op
Iteration  28: 899,666 ns/op
Iteration  29: 906,016 ns/op
Iteration  30: 921,654 ns/op
Iteration  31: 914,082 ns/op
Iteration  32: 901,051 ns/op
Iteration  33: 898,642 ns/op
Iteration  34: 915,058 ns/op
Iteration  35: 909,744 ns/op
Iteration  36: 901,763 ns/op
Iteration  37: 901,878 ns/op
Iteration  38: 918,156 ns/op
Iteration  39: 906,580 ns/op
Iteration  40: 900,424 ns/op
Iteration  41: 897,495 ns/op
Iteration  42: 910,904 ns/op
Iteration  43: 895,950 ns/op
Iteration  44: 911,573 ns/op
Iteration  45: 896,009 ns/op
Iteration  46: 895,569 ns/op
Iteration  47: 918,123 ns/op
Iteration  48: 898,168 ns/op
Iteration  49: 915,009 ns/op
Iteration  50: 936,251 ns/op
Iteration  51: 904,122 ns/op
Iteration  52: 897,826 ns/op
Iteration  53: 927,918 ns/op
Iteration  54: 949,190 ns/op
Iteration  55: 895,432 ns/op
Iteration  56: 908,376 ns/op
Iteration  57: 895,820 ns/op
Iteration  58: 915,213 ns/op
Iteration  59: 901,669 ns/op
Iteration  60: 942,504 ns/op
Iteration  61: 918,292 ns/op
Iteration  62: 900,663 ns/op
Iteration  63: 898,693 ns/op
Iteration  64: 904,459 ns/op
Iteration  65: 914,006 ns/op
Iteration  66: 897,822 ns/op
Iteration  67: 915,504 ns/op
Iteration  68: 895,219 ns/op
Iteration  69: 931,714 ns/op
Iteration  70: 911,905 ns/op
Iteration  71: 897,128 ns/op
Iteration  72: 896,464 ns/op
Iteration  73: 896,102 ns/op
Iteration  74: 895,597 ns/op
Iteration  75: 915,080 ns/op
Iteration  76: 907,017 ns/op
Iteration  77: 930,164 ns/op
Iteration  78: 931,098 ns/op
Iteration  79: 915,500 ns/op
Iteration  80: 898,817 ns/op
Iteration  81: 901,710 ns/op
Iteration  82: 900,796 ns/op
Iteration  83: 916,778 ns/op
Iteration  84: 903,723 ns/op
Iteration  85: 928,329 ns/op
Iteration  86: 935,627 ns/op
Iteration  87: 896,249 ns/op
Iteration  88: 896,000 ns/op
Iteration  89: 895,981 ns/op
Iteration  90: 897,514 ns/op
Iteration  91: 917,474 ns/op
Iteration  92: 896,683 ns/op
Iteration  93: 911,972 ns/op
Iteration  94: 915,456 ns/op
Iteration  95: 905,220 ns/op
Iteration  96: 896,433 ns/op
Iteration  97: 896,197 ns/op
Iteration  98: 895,275 ns/op
Iteration  99: 898,536 ns/op
Iteration 100: 895,308 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  907,810 ±(99.9%) 4,394 ns/op [Average]
  (min, avg, max) = (894,219, 907,810, 949,190), stdev = 12,955
  CI (99.9%): [903,416, 912,204] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                     (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-6.json  avgt  100  907,810 ± 4,394  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1506,730 ns/op
# Warmup Iteration   2: 1369,881 ns/op
# Warmup Iteration   3: 1350,471 ns/op
Iteration   1: 1349,386 ns/op
Iteration   2: 1341,813 ns/op
Iteration   3: 1349,028 ns/op
Iteration   4: 1392,337 ns/op
Iteration   5: 1430,299 ns/op
Iteration   6: 1379,248 ns/op
Iteration   7: 1342,143 ns/op
Iteration   8: 1381,887 ns/op
Iteration   9: 1356,271 ns/op
Iteration  10: 1332,215 ns/op
Iteration  11: 1355,270 ns/op
Iteration  12: 1364,898 ns/op
Iteration  13: 1373,429 ns/op
Iteration  14: 1349,497 ns/op
Iteration  15: 1378,921 ns/op
Iteration  16: 1358,429 ns/op
Iteration  17: 1386,645 ns/op
Iteration  18: 1388,622 ns/op
Iteration  19: 1350,030 ns/op
Iteration  20: 1358,308 ns/op
Iteration  21: 1359,737 ns/op
Iteration  22: 1343,340 ns/op
Iteration  23: 1348,009 ns/op
Iteration  24: 1353,106 ns/op
Iteration  25: 1355,131 ns/op
Iteration  26: 1358,723 ns/op
Iteration  27: 1350,927 ns/op
Iteration  28: 1352,127 ns/op
Iteration  29: 1353,871 ns/op
Iteration  30: 1360,778 ns/op
Iteration  31: 1369,776 ns/op
Iteration  32: 1395,678 ns/op
Iteration  33: 1371,253 ns/op
Iteration  34: 1359,343 ns/op
Iteration  35: 1407,841 ns/op
Iteration  36: 1347,312 ns/op
Iteration  37: 1360,328 ns/op
Iteration  38: 1348,965 ns/op
Iteration  39: 1349,023 ns/op
Iteration  40: 1364,501 ns/op
Iteration  41: 1417,198 ns/op
Iteration  42: 1377,360 ns/op
Iteration  43: 1363,347 ns/op
Iteration  44: 1378,589 ns/op
Iteration  45: 1350,301 ns/op
Iteration  46: 1346,977 ns/op
Iteration  47: 1372,815 ns/op
Iteration  48: 1351,054 ns/op
Iteration  49: 1359,682 ns/op
Iteration  50: 1355,901 ns/op
Iteration  51: 1369,088 ns/op
Iteration  52: 1350,264 ns/op
Iteration  53: 1364,563 ns/op
Iteration  54: 1349,449 ns/op
Iteration  55: 1353,558 ns/op
Iteration  56: 1370,998 ns/op
Iteration  57: 1352,832 ns/op
Iteration  58: 1352,247 ns/op
Iteration  59: 1353,532 ns/op
Iteration  60: 1358,557 ns/op
Iteration  61: 1398,943 ns/op
Iteration  62: 1382,802 ns/op
Iteration  63: 1385,567 ns/op
Iteration  64: 1388,584 ns/op
Iteration  65: 1408,181 ns/op
Iteration  66: 1345,102 ns/op
Iteration  67: 1375,258 ns/op
Iteration  68: 1377,700 ns/op
Iteration  69: 1383,157 ns/op
Iteration  70: 1403,837 ns/op
Iteration  71: 1412,986 ns/op
Iteration  72: 1388,241 ns/op
Iteration  73: 1375,732 ns/op
Iteration  74: 1404,863 ns/op
Iteration  75: 1364,217 ns/op
Iteration  76: 1352,585 ns/op
Iteration  77: 1379,735 ns/op
Iteration  78: 1364,580 ns/op
Iteration  79: 1374,575 ns/op
Iteration  80: 1370,974 ns/op
Iteration  81: 1359,711 ns/op
Iteration  82: 1360,364 ns/op
Iteration  83: 1342,609 ns/op
Iteration  84: 1357,342 ns/op
Iteration  85: 1358,048 ns/op
Iteration  86: 1343,487 ns/op
Iteration  87: 1362,947 ns/op
Iteration  88: 1367,187 ns/op
Iteration  89: 1365,799 ns/op
Iteration  90: 1358,879 ns/op
Iteration  91: 1362,584 ns/op
Iteration  92: 1357,155 ns/op
Iteration  93: 1346,977 ns/op
Iteration  94: 1353,613 ns/op
Iteration  95: 1345,141 ns/op
Iteration  96: 1345,479 ns/op
Iteration  97: 1355,431 ns/op
Iteration  98: 1360,728 ns/op
Iteration  99: 1362,210 ns/op
Iteration 100: 1357,751 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  1365,378 ±(99.9%) 6,378 ns/op [Average]
  (min, avg, max) = (1332,215, 1365,378, 1430,299), stdev = 18,806
  CI (99.9%): [1359,000, 1371,756] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                      (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-10.json  avgt  100  1365,378 ± 6,378  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 3739,878 ns/op
# Warmup Iteration   2: 3477,646 ns/op
# Warmup Iteration   3: 3414,981 ns/op
Iteration   1: 3558,014 ns/op
Iteration   2: 3416,901 ns/op
Iteration   3: 3420,655 ns/op
Iteration   4: 3411,124 ns/op
Iteration   5: 3449,553 ns/op
Iteration   6: 3422,591 ns/op
Iteration   7: 3457,708 ns/op
Iteration   8: 3415,555 ns/op
Iteration   9: 3399,404 ns/op
Iteration  10: 3462,677 ns/op
Iteration  11: 3404,424 ns/op
Iteration  12: 3497,263 ns/op
Iteration  13: 3461,802 ns/op
Iteration  14: 3624,724 ns/op
Iteration  15: 3470,728 ns/op
Iteration  16: 3473,267 ns/op
Iteration  17: 3430,638 ns/op
Iteration  18: 3495,860 ns/op
Iteration  19: 3465,313 ns/op
Iteration  20: 3459,246 ns/op
Iteration  21: 3482,101 ns/op
Iteration  22: 3507,052 ns/op
Iteration  23: 3476,786 ns/op
Iteration  24: 3475,403 ns/op
Iteration  25: 3492,178 ns/op
Iteration  26: 3405,003 ns/op
Iteration  27: 3468,836 ns/op
Iteration  28: 3482,989 ns/op
Iteration  29: 3458,910 ns/op
Iteration  30: 3534,915 ns/op
Iteration  31: 3466,607 ns/op
Iteration  32: 3443,441 ns/op
Iteration  33: 3543,808 ns/op
Iteration  34: 3425,356 ns/op
Iteration  35: 3412,194 ns/op
Iteration  36: 3434,699 ns/op
Iteration  37: 3453,324 ns/op
Iteration  38: 3446,828 ns/op
Iteration  39: 3457,993 ns/op
Iteration  40: 3492,514 ns/op
Iteration  41: 3503,477 ns/op
Iteration  42: 3418,937 ns/op
Iteration  43: 3472,933 ns/op
Iteration  44: 3423,330 ns/op
Iteration  45: 3467,367 ns/op
Iteration  46: 3441,796 ns/op
Iteration  47: 3420,329 ns/op
Iteration  48: 3477,603 ns/op
Iteration  49: 3516,504 ns/op
Iteration  50: 3439,439 ns/op
Iteration  51: 3574,209 ns/op
Iteration  52: 3441,508 ns/op
Iteration  53: 3447,298 ns/op
Iteration  54: 3456,696 ns/op
Iteration  55: 3421,555 ns/op
Iteration  56: 3631,539 ns/op
Iteration  57: 3408,665 ns/op
Iteration  58: 3428,303 ns/op
Iteration  59: 3485,827 ns/op
Iteration  60: 3568,547 ns/op
Iteration  61: 3468,593 ns/op
Iteration  62: 3434,064 ns/op
Iteration  63: 3476,738 ns/op
Iteration  64: 3484,990 ns/op
Iteration  65: 3483,562 ns/op
Iteration  66: 3435,896 ns/op
Iteration  67: 3447,565 ns/op
Iteration  68: 3443,609 ns/op
Iteration  69: 3458,375 ns/op
Iteration  70: 3470,527 ns/op
Iteration  71: 3453,753 ns/op
Iteration  72: 3472,588 ns/op
Iteration  73: 3421,528 ns/op
Iteration  74: 3484,585 ns/op
Iteration  75: 3473,738 ns/op
Iteration  76: 3511,404 ns/op
Iteration  77: 3477,723 ns/op
Iteration  78: 3453,730 ns/op
Iteration  79: 3445,324 ns/op
Iteration  80: 3482,711 ns/op
Iteration  81: 3444,928 ns/op
Iteration  82: 3454,170 ns/op
Iteration  83: 3431,443 ns/op
Iteration  84: 3444,031 ns/op
Iteration  85: 3431,957 ns/op
Iteration  86: 3443,747 ns/op
Iteration  87: 3538,372 ns/op
Iteration  88: 3467,214 ns/op
Iteration  89: 3479,912 ns/op
Iteration  90: 3463,348 ns/op
Iteration  91: 3440,033 ns/op
Iteration  92: 3561,702 ns/op
Iteration  93: 3438,081 ns/op
Iteration  94: 3487,454 ns/op
Iteration  95: 3428,127 ns/op
Iteration  96: 3440,648 ns/op
Iteration  97: 3423,072 ns/op
Iteration  98: 3522,026 ns/op
Iteration  99: 3424,869 ns/op
Iteration 100: 3434,535 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  3464,849 ±(99.9%) 14,898 ns/op [Average]
  (min, avg, max) = (3399,404, 3464,849, 3631,539), stdev = 43,928
  CI (99.9%): [3449,951, 3479,748] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             (className)                      (fileName)  Mode  Cnt     Score    Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-20.json  avgt  100  3464,849 ± 14,898  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 466,033 ns/op
# Warmup Iteration   2: 427,834 ns/op
# Warmup Iteration   3: 427,324 ns/op
Iteration   1: 434,691 ns/op
Iteration   2: 429,347 ns/op
Iteration   3: 426,248 ns/op
Iteration   4: 426,146 ns/op
Iteration   5: 431,108 ns/op
Iteration   6: 432,659 ns/op
Iteration   7: 432,928 ns/op
Iteration   8: 434,160 ns/op
Iteration   9: 426,350 ns/op
Iteration  10: 435,608 ns/op
Iteration  11: 438,013 ns/op
Iteration  12: 429,754 ns/op
Iteration  13: 432,199 ns/op
Iteration  14: 450,818 ns/op
Iteration  15: 458,310 ns/op
Iteration  16: 422,429 ns/op
Iteration  17: 432,619 ns/op
Iteration  18: 422,591 ns/op
Iteration  19: 423,524 ns/op
Iteration  20: 422,345 ns/op
Iteration  21: 422,152 ns/op
Iteration  22: 423,513 ns/op
Iteration  23: 423,089 ns/op
Iteration  24: 421,927 ns/op
Iteration  25: 423,084 ns/op
Iteration  26: 422,272 ns/op
Iteration  27: 422,712 ns/op
Iteration  28: 422,463 ns/op
Iteration  29: 422,863 ns/op
Iteration  30: 421,950 ns/op
Iteration  31: 422,596 ns/op
Iteration  32: 421,610 ns/op
Iteration  33: 423,262 ns/op
Iteration  34: 422,158 ns/op
Iteration  35: 428,164 ns/op
Iteration  36: 422,193 ns/op
Iteration  37: 422,600 ns/op
Iteration  38: 427,176 ns/op
Iteration  39: 422,080 ns/op
Iteration  40: 423,668 ns/op
Iteration  41: 422,045 ns/op
Iteration  42: 421,867 ns/op
Iteration  43: 421,833 ns/op
Iteration  44: 421,813 ns/op
Iteration  45: 424,826 ns/op
Iteration  46: 427,830 ns/op
Iteration  47: 422,318 ns/op
Iteration  48: 424,870 ns/op
Iteration  49: 422,048 ns/op
Iteration  50: 426,630 ns/op
Iteration  51: 428,019 ns/op
Iteration  52: 423,527 ns/op
Iteration  53: 428,534 ns/op
Iteration  54: 427,306 ns/op
Iteration  55: 423,796 ns/op
Iteration  56: 422,498 ns/op
Iteration  57: 422,342 ns/op
Iteration  58: 422,734 ns/op
Iteration  59: 423,146 ns/op
Iteration  60: 422,015 ns/op
Iteration  61: 431,223 ns/op
Iteration  62: 426,727 ns/op
Iteration  63: 422,436 ns/op
Iteration  64: 425,736 ns/op
Iteration  65: 424,857 ns/op
Iteration  66: 422,464 ns/op
Iteration  67: 422,922 ns/op
Iteration  68: 427,489 ns/op
Iteration  69: 422,680 ns/op
Iteration  70: 429,078 ns/op
Iteration  71: 422,699 ns/op
Iteration  72: 422,423 ns/op
Iteration  73: 422,355 ns/op
Iteration  74: 421,623 ns/op
Iteration  75: 423,200 ns/op
Iteration  76: 422,219 ns/op
Iteration  77: 422,884 ns/op
Iteration  78: 422,110 ns/op
Iteration  79: 422,474 ns/op
Iteration  80: 422,053 ns/op
Iteration  81: 429,185 ns/op
Iteration  82: 422,502 ns/op
Iteration  83: 422,283 ns/op
Iteration  84: 423,092 ns/op
Iteration  85: 422,741 ns/op
Iteration  86: 422,169 ns/op
Iteration  87: 430,152 ns/op
Iteration  88: 423,528 ns/op
Iteration  89: 427,120 ns/op
Iteration  90: 424,561 ns/op
Iteration  91: 426,401 ns/op
Iteration  92: 422,805 ns/op
Iteration  93: 439,671 ns/op
Iteration  94: 422,662 ns/op
Iteration  95: 422,919 ns/op
Iteration  96: 422,102 ns/op
Iteration  97: 423,521 ns/op
Iteration  98: 422,373 ns/op
Iteration  99: 422,167 ns/op
Iteration 100: 422,145 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  425,571 ±(99.9%) 1,957 ns/op [Average]
  (min, avg, max) = (421,610, 425,571, 458,310), stdev = 5,771
  CI (99.9%): [423,614, 427,529] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)               (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-2.json  avgt  100  425,571 ± 1,957  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1067,095 ns/op
# Warmup Iteration   2: 1017,504 ns/op
# Warmup Iteration   3: 1015,167 ns/op
Iteration   1: 1019,585 ns/op
Iteration   2: 1005,044 ns/op
Iteration   3: 1022,779 ns/op
Iteration   4: 1016,855 ns/op
Iteration   5: 1039,727 ns/op
Iteration   6: 1017,508 ns/op
Iteration   7: 1003,728 ns/op
Iteration   8: 1005,860 ns/op
Iteration   9: 1007,109 ns/op
Iteration  10: 998,116 ns/op
Iteration  11: 1006,540 ns/op
Iteration  12: 1045,221 ns/op
Iteration  13: 1007,229 ns/op
Iteration  14: 1047,088 ns/op
Iteration  15: 1006,871 ns/op
Iteration  16: 1008,210 ns/op
Iteration  17: 1009,042 ns/op
Iteration  18: 1007,371 ns/op
Iteration  19: 1014,731 ns/op
Iteration  20: 1021,696 ns/op
Iteration  21: 1012,183 ns/op
Iteration  22: 1023,807 ns/op
Iteration  23: 1056,904 ns/op
Iteration  24: 1012,089 ns/op
Iteration  25: 1023,614 ns/op
Iteration  26: 1047,719 ns/op
Iteration  27: 1013,877 ns/op
Iteration  28: 1009,354 ns/op
Iteration  29: 1006,507 ns/op
Iteration  30: 1006,633 ns/op
Iteration  31: 1020,679 ns/op
Iteration  32: 1006,739 ns/op
Iteration  33: 1030,388 ns/op
Iteration  34: 1020,705 ns/op
Iteration  35: 1014,957 ns/op
Iteration  36: 1009,403 ns/op
Iteration  37: 1018,590 ns/op
Iteration  38: 1009,734 ns/op
Iteration  39: 1009,725 ns/op
Iteration  40: 1009,636 ns/op
Iteration  41: 1063,739 ns/op
Iteration  42: 1007,416 ns/op
Iteration  43: 1007,611 ns/op
Iteration  44: 1006,938 ns/op
Iteration  45: 1006,405 ns/op
Iteration  46: 1007,868 ns/op
Iteration  47: 1031,469 ns/op
Iteration  48: 1032,411 ns/op
Iteration  49: 1025,256 ns/op
Iteration  50: 1006,850 ns/op
Iteration  51: 1007,839 ns/op
Iteration  52: 1008,518 ns/op
Iteration  53: 1006,965 ns/op
Iteration  54: 1025,726 ns/op
Iteration  55: 1013,989 ns/op
Iteration  56: 1006,921 ns/op
Iteration  57: 1006,843 ns/op
Iteration  58: 1010,719 ns/op
Iteration  59: 1005,946 ns/op
Iteration  60: 1027,017 ns/op
Iteration  61: 1008,331 ns/op
Iteration  62: 1008,554 ns/op
Iteration  63: 1029,125 ns/op
Iteration  64: 1007,251 ns/op
Iteration  65: 1006,957 ns/op
Iteration  66: 1007,873 ns/op
Iteration  67: 1007,809 ns/op
Iteration  68: 1007,029 ns/op
Iteration  69: 1008,442 ns/op
Iteration  70: 1008,391 ns/op
Iteration  71: 1006,334 ns/op
Iteration  72: 1008,337 ns/op
Iteration  73: 1006,034 ns/op
Iteration  74: 1009,013 ns/op
Iteration  75: 1034,721 ns/op
Iteration  76: 1008,477 ns/op
Iteration  77: 1015,132 ns/op
Iteration  78: 1008,456 ns/op
Iteration  79: 1022,549 ns/op
Iteration  80: 1006,293 ns/op
Iteration  81: 1029,149 ns/op
Iteration  82: 1044,378 ns/op
Iteration  83: 1023,055 ns/op
Iteration  84: 1009,260 ns/op
Iteration  85: 1011,223 ns/op
Iteration  86: 1029,315 ns/op
Iteration  87: 1035,458 ns/op
Iteration  88: 1006,640 ns/op
Iteration  89: 1035,884 ns/op
Iteration  90: 1007,326 ns/op
Iteration  91: 1013,592 ns/op
Iteration  92: 1041,253 ns/op
Iteration  93: 1067,442 ns/op
Iteration  94: 1021,582 ns/op
Iteration  95: 1057,345 ns/op
Iteration  96: 1035,754 ns/op
Iteration  97: 1013,020 ns/op
Iteration  98: 1018,697 ns/op
Iteration  99: 1016,947 ns/op
Iteration 100: 1028,116 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  1017,605 ±(99.9%) 4,883 ns/op [Average]
  (min, avg, max) = (998,116, 1017,605, 1067,442), stdev = 14,397
  CI (99.9%): [1012,723, 1022,488] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)               (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-6.json  avgt  100  1017,605 ± 4,883  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1654,831 ns/op
# Warmup Iteration   2: 1564,547 ns/op
# Warmup Iteration   3: 1555,595 ns/op
Iteration   1: 1532,985 ns/op
Iteration   2: 1543,074 ns/op
Iteration   3: 1550,788 ns/op
Iteration   4: 1539,057 ns/op
Iteration   5: 1537,008 ns/op
Iteration   6: 1535,490 ns/op
Iteration   7: 1582,234 ns/op
Iteration   8: 1537,058 ns/op
Iteration   9: 1532,700 ns/op
Iteration  10: 1537,818 ns/op
Iteration  11: 1535,223 ns/op
Iteration  12: 1564,482 ns/op
Iteration  13: 1534,078 ns/op
Iteration  14: 1524,185 ns/op
Iteration  15: 1522,957 ns/op
Iteration  16: 1523,059 ns/op
Iteration  17: 1524,346 ns/op
Iteration  18: 1565,398 ns/op
Iteration  19: 1608,150 ns/op
Iteration  20: 1602,766 ns/op
Iteration  21: 1533,501 ns/op
Iteration  22: 1525,652 ns/op
Iteration  23: 1523,648 ns/op
Iteration  24: 1524,623 ns/op
Iteration  25: 1523,224 ns/op
Iteration  26: 1523,045 ns/op
Iteration  27: 1521,787 ns/op
Iteration  28: 1522,220 ns/op
Iteration  29: 1521,359 ns/op
Iteration  30: 1521,109 ns/op
Iteration  31: 1527,842 ns/op
Iteration  32: 1522,272 ns/op
Iteration  33: 1527,113 ns/op
Iteration  34: 1627,483 ns/op
Iteration  35: 1567,037 ns/op
Iteration  36: 1523,509 ns/op
Iteration  37: 1529,863 ns/op
Iteration  38: 1531,083 ns/op
Iteration  39: 1557,449 ns/op
Iteration  40: 1526,139 ns/op
Iteration  41: 1523,602 ns/op
Iteration  42: 1520,478 ns/op
Iteration  43: 1524,014 ns/op
Iteration  44: 1542,722 ns/op
Iteration  45: 1544,242 ns/op
Iteration  46: 1550,151 ns/op
Iteration  47: 1527,884 ns/op
Iteration  48: 1576,304 ns/op
Iteration  49: 1523,461 ns/op
Iteration  50: 1550,913 ns/op
Iteration  51: 1528,850 ns/op
Iteration  52: 1522,835 ns/op
Iteration  53: 1524,059 ns/op
Iteration  54: 1521,664 ns/op
Iteration  55: 1523,094 ns/op
Iteration  56: 1535,403 ns/op
Iteration  57: 1569,761 ns/op
Iteration  58: 1530,913 ns/op
Iteration  59: 1535,254 ns/op
Iteration  60: 1578,522 ns/op
Iteration  61: 1525,654 ns/op
Iteration  62: 1551,309 ns/op
Iteration  63: 1521,801 ns/op
Iteration  64: 1523,533 ns/op
Iteration  65: 1523,075 ns/op
Iteration  66: 1523,913 ns/op
Iteration  67: 1521,294 ns/op
Iteration  68: 1522,435 ns/op
Iteration  69: 1525,239 ns/op
Iteration  70: 1521,095 ns/op
Iteration  71: 1522,843 ns/op
Iteration  72: 1520,480 ns/op
Iteration  73: 1521,608 ns/op
Iteration  74: 1522,298 ns/op
Iteration  75: 1529,250 ns/op
Iteration  76: 1527,234 ns/op
Iteration  77: 1527,314 ns/op
Iteration  78: 1530,713 ns/op
Iteration  79: 1527,455 ns/op
Iteration  80: 1521,613 ns/op
Iteration  81: 1523,784 ns/op
Iteration  82: 1576,262 ns/op
Iteration  83: 1537,885 ns/op
Iteration  84: 1606,226 ns/op
Iteration  85: 1523,571 ns/op
Iteration  86: 1539,761 ns/op
Iteration  87: 1522,355 ns/op
Iteration  88: 1534,294 ns/op
Iteration  89: 1524,427 ns/op
Iteration  90: 1521,843 ns/op
Iteration  91: 1539,049 ns/op
Iteration  92: 1534,712 ns/op
Iteration  93: 1521,597 ns/op
Iteration  94: 1560,937 ns/op
Iteration  95: 1529,055 ns/op
Iteration  96: 1555,288 ns/op
Iteration  97: 1532,559 ns/op
Iteration  98: 1536,836 ns/op
Iteration  99: 1538,822 ns/op
Iteration 100: 1566,526 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  1537,029 ±(99.9%) 7,279 ns/op [Average]
  (min, avg, max) = (1520,478, 1537,029, 1627,483), stdev = 21,461
  CI (99.9%): [1529,750, 1544,308] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-10.json  avgt  100  1537,029 ± 7,279  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 3542,415 ns/op
# Warmup Iteration   2: 3258,369 ns/op
# Warmup Iteration   3: 3284,486 ns/op
Iteration   1: 3237,532 ns/op
Iteration   2: 3230,833 ns/op
Iteration   3: 3226,008 ns/op
Iteration   4: 3228,946 ns/op
Iteration   5: 3245,345 ns/op
Iteration   6: 3231,353 ns/op
Iteration   7: 3229,854 ns/op
Iteration   8: 3229,003 ns/op
Iteration   9: 3235,187 ns/op
Iteration  10: 3326,542 ns/op
Iteration  11: 3231,112 ns/op
Iteration  12: 3304,555 ns/op
Iteration  13: 3229,750 ns/op
Iteration  14: 3219,185 ns/op
Iteration  15: 3217,482 ns/op
Iteration  16: 3230,156 ns/op
Iteration  17: 3221,250 ns/op
Iteration  18: 3296,070 ns/op
Iteration  19: 3231,721 ns/op
Iteration  20: 3220,811 ns/op
Iteration  21: 3319,482 ns/op
Iteration  22: 3240,273 ns/op
Iteration  23: 3240,680 ns/op
Iteration  24: 3215,163 ns/op
Iteration  25: 3221,062 ns/op
Iteration  26: 3224,168 ns/op
Iteration  27: 3260,801 ns/op
Iteration  28: 3273,868 ns/op
Iteration  29: 3217,345 ns/op
Iteration  30: 3220,369 ns/op
Iteration  31: 3216,389 ns/op
Iteration  32: 3213,739 ns/op
Iteration  33: 3357,091 ns/op
Iteration  34: 3313,801 ns/op
Iteration  35: 3219,356 ns/op
Iteration  36: 3219,271 ns/op
Iteration  37: 3220,478 ns/op
Iteration  38: 3215,803 ns/op
Iteration  39: 3315,581 ns/op
Iteration  40: 3225,619 ns/op
Iteration  41: 3218,666 ns/op
Iteration  42: 3227,057 ns/op
Iteration  43: 3308,811 ns/op
Iteration  44: 3216,466 ns/op
Iteration  45: 3312,764 ns/op
Iteration  46: 3231,108 ns/op
Iteration  47: 3216,476 ns/op
Iteration  48: 3314,447 ns/op
Iteration  49: 3217,249 ns/op
Iteration  50: 3216,692 ns/op
Iteration  51: 3215,899 ns/op
Iteration  52: 3222,991 ns/op
Iteration  53: 3246,583 ns/op
Iteration  54: 3247,881 ns/op
Iteration  55: 3219,394 ns/op
Iteration  56: 3260,160 ns/op
Iteration  57: 3214,338 ns/op
Iteration  58: 3222,266 ns/op
Iteration  59: 3218,436 ns/op
Iteration  60: 3244,531 ns/op
Iteration  61: 3349,289 ns/op
Iteration  62: 3229,468 ns/op
Iteration  63: 3312,628 ns/op
Iteration  64: 3229,650 ns/op
Iteration  65: 3314,322 ns/op
Iteration  66: 3229,028 ns/op
Iteration  67: 3323,426 ns/op
Iteration  68: 3224,349 ns/op
Iteration  69: 3218,795 ns/op
Iteration  70: 3217,843 ns/op
Iteration  71: 3221,078 ns/op
Iteration  72: 3364,478 ns/op
Iteration  73: 3224,015 ns/op
Iteration  74: 3422,575 ns/op
Iteration  75: 3219,522 ns/op
Iteration  76: 3219,880 ns/op
Iteration  77: 3233,818 ns/op
Iteration  78: 3243,072 ns/op
Iteration  79: 3236,622 ns/op
Iteration  80: 3312,015 ns/op
Iteration  81: 3312,863 ns/op
Iteration  82: 3213,955 ns/op
Iteration  83: 3225,981 ns/op
Iteration  84: 3221,601 ns/op
Iteration  85: 3218,961 ns/op
Iteration  86: 3214,724 ns/op
Iteration  87: 3218,393 ns/op
Iteration  88: 3218,820 ns/op
Iteration  89: 3219,667 ns/op
Iteration  90: 3213,127 ns/op
Iteration  91: 3217,812 ns/op
Iteration  92: 3257,200 ns/op
Iteration  93: 3243,843 ns/op
Iteration  94: 3323,513 ns/op
Iteration  95: 3219,180 ns/op
Iteration  96: 3223,213 ns/op
Iteration  97: 3214,783 ns/op
Iteration  98: 3219,876 ns/op
Iteration  99: 3222,125 ns/op
Iteration 100: 3219,177 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  3245,499 ±(99.9%) 14,506 ns/op [Average]
  (min, avg, max) = (3213,127, 3245,499, 3422,575), stdev = 42,770
  CI (99.9%): [3230,994, 3260,005] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                (fileName)  Mode  Cnt     Score    Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-20.json  avgt  100  3245,499 ± 14,506  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 482,828 ns/op
# Warmup Iteration   2: 446,584 ns/op
# Warmup Iteration   3: 442,051 ns/op
Iteration   1: 458,064 ns/op
Iteration   2: 441,218 ns/op
Iteration   3: 446,459 ns/op
Iteration   4: 453,930 ns/op
Iteration   5: 445,248 ns/op
Iteration   6: 451,305 ns/op
Iteration   7: 442,533 ns/op
Iteration   8: 444,647 ns/op
Iteration   9: 442,567 ns/op
Iteration  10: 452,289 ns/op
Iteration  11: 446,936 ns/op
Iteration  12: 451,667 ns/op
Iteration  13: 440,531 ns/op
Iteration  14: 444,030 ns/op
Iteration  15: 453,376 ns/op
Iteration  16: 440,806 ns/op
Iteration  17: 446,392 ns/op
Iteration  18: 447,580 ns/op
Iteration  19: 442,149 ns/op
Iteration  20: 442,229 ns/op
Iteration  21: 443,342 ns/op
Iteration  22: 440,923 ns/op
Iteration  23: 440,772 ns/op
Iteration  24: 440,770 ns/op
Iteration  25: 441,127 ns/op
Iteration  26: 440,173 ns/op
Iteration  27: 440,143 ns/op
Iteration  28: 440,456 ns/op
Iteration  29: 440,974 ns/op
Iteration  30: 440,737 ns/op
Iteration  31: 440,241 ns/op
Iteration  32: 444,094 ns/op
Iteration  33: 446,303 ns/op
Iteration  34: 451,674 ns/op
Iteration  35: 447,656 ns/op
Iteration  36: 445,924 ns/op
Iteration  37: 457,046 ns/op
Iteration  38: 448,675 ns/op
Iteration  39: 450,052 ns/op
Iteration  40: 440,429 ns/op
Iteration  41: 451,909 ns/op
Iteration  42: 441,565 ns/op
Iteration  43: 444,846 ns/op
Iteration  44: 444,843 ns/op
Iteration  45: 444,957 ns/op
Iteration  46: 440,951 ns/op
Iteration  47: 447,602 ns/op
Iteration  48: 441,670 ns/op
Iteration  49: 440,673 ns/op
Iteration  50: 449,899 ns/op
Iteration  51: 442,356 ns/op
Iteration  52: 443,297 ns/op
Iteration  53: 454,690 ns/op
Iteration  54: 444,363 ns/op
Iteration  55: 443,761 ns/op
Iteration  56: 442,206 ns/op
Iteration  57: 440,238 ns/op
Iteration  58: 444,520 ns/op
Iteration  59: 453,913 ns/op
Iteration  60: 448,204 ns/op
Iteration  61: 442,687 ns/op
Iteration  62: 446,113 ns/op
Iteration  63: 445,508 ns/op
Iteration  64: 441,686 ns/op
Iteration  65: 440,621 ns/op
Iteration  66: 440,999 ns/op
Iteration  67: 441,559 ns/op
Iteration  68: 440,633 ns/op
Iteration  69: 444,474 ns/op
Iteration  70: 458,776 ns/op
Iteration  71: 446,331 ns/op
Iteration  72: 440,223 ns/op
Iteration  73: 446,778 ns/op
Iteration  74: 445,090 ns/op
Iteration  75: 445,452 ns/op
Iteration  76: 451,124 ns/op
Iteration  77: 442,673 ns/op
Iteration  78: 441,988 ns/op
Iteration  79: 440,444 ns/op
Iteration  80: 440,394 ns/op
Iteration  81: 440,367 ns/op
Iteration  82: 440,738 ns/op
Iteration  83: 441,309 ns/op
Iteration  84: 441,214 ns/op
Iteration  85: 441,813 ns/op
Iteration  86: 452,327 ns/op
Iteration  87: 440,469 ns/op
Iteration  88: 443,359 ns/op
Iteration  89: 440,561 ns/op
Iteration  90: 440,294 ns/op
Iteration  91: 440,331 ns/op
Iteration  92: 441,241 ns/op
Iteration  93: 446,027 ns/op
Iteration  94: 448,256 ns/op
Iteration  95: 445,627 ns/op
Iteration  96: 445,293 ns/op
Iteration  97: 456,138 ns/op
Iteration  98: 447,661 ns/op
Iteration  99: 446,084 ns/op
Iteration 100: 446,030 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  444,906 ±(99.9%) 1,578 ns/op [Average]
  (min, avg, max) = (440,143, 444,906, 458,776), stdev = 4,653
  CI (99.9%): [443,328, 446,484] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)           (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-2.json  avgt  100  444,906 ± 1,578  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1013,687 ns/op
# Warmup Iteration   2: 955,310 ns/op
# Warmup Iteration   3: 947,166 ns/op
Iteration   1: 977,282 ns/op
Iteration   2: 948,486 ns/op
Iteration   3: 986,061 ns/op
Iteration   4: 965,252 ns/op
Iteration   5: 945,105 ns/op
Iteration   6: 946,466 ns/op
Iteration   7: 991,060 ns/op
Iteration   8: 986,152 ns/op
Iteration   9: 944,437 ns/op
Iteration  10: 986,627 ns/op
Iteration  11: 980,068 ns/op
Iteration  12: 980,978 ns/op
Iteration  13: 945,601 ns/op
Iteration  14: 945,022 ns/op
Iteration  15: 944,764 ns/op
Iteration  16: 961,852 ns/op
Iteration  17: 945,683 ns/op
Iteration  18: 946,001 ns/op
Iteration  19: 946,828 ns/op
Iteration  20: 947,781 ns/op
Iteration  21: 944,211 ns/op
Iteration  22: 945,757 ns/op
Iteration  23: 943,509 ns/op
Iteration  24: 944,071 ns/op
Iteration  25: 943,422 ns/op
Iteration  26: 962,147 ns/op
Iteration  27: 942,854 ns/op
Iteration  28: 961,774 ns/op
Iteration  29: 942,596 ns/op
Iteration  30: 961,597 ns/op
Iteration  31: 964,110 ns/op
Iteration  32: 958,342 ns/op
Iteration  33: 945,788 ns/op
Iteration  34: 944,137 ns/op
Iteration  35: 944,059 ns/op
Iteration  36: 943,669 ns/op
Iteration  37: 945,812 ns/op
Iteration  38: 945,160 ns/op
Iteration  39: 943,576 ns/op
Iteration  40: 954,794 ns/op
Iteration  41: 969,114 ns/op
Iteration  42: 943,635 ns/op
Iteration  43: 944,806 ns/op
Iteration  44: 962,727 ns/op
Iteration  45: 945,200 ns/op
Iteration  46: 943,082 ns/op
Iteration  47: 944,997 ns/op
Iteration  48: 960,491 ns/op
Iteration  49: 962,378 ns/op
Iteration  50: 944,331 ns/op
Iteration  51: 962,098 ns/op
Iteration  52: 971,583 ns/op
Iteration  53: 944,888 ns/op
Iteration  54: 943,696 ns/op
Iteration  55: 946,932 ns/op
Iteration  56: 947,923 ns/op
Iteration  57: 957,121 ns/op
Iteration  58: 943,904 ns/op
Iteration  59: 946,651 ns/op
Iteration  60: 965,674 ns/op
Iteration  61: 944,189 ns/op
Iteration  62: 964,711 ns/op
Iteration  63: 946,562 ns/op
Iteration  64: 970,152 ns/op
Iteration  65: 974,746 ns/op
Iteration  66: 945,769 ns/op
Iteration  67: 957,487 ns/op
Iteration  68: 948,101 ns/op
Iteration  69: 944,183 ns/op
Iteration  70: 943,184 ns/op
Iteration  71: 944,334 ns/op
Iteration  72: 943,452 ns/op
Iteration  73: 942,167 ns/op
Iteration  74: 943,444 ns/op
Iteration  75: 943,368 ns/op
Iteration  76: 945,223 ns/op
Iteration  77: 948,621 ns/op
Iteration  78: 947,365 ns/op
Iteration  79: 996,987 ns/op
Iteration  80: 964,531 ns/op
Iteration  81: 943,351 ns/op
Iteration  82: 943,893 ns/op
Iteration  83: 965,905 ns/op
Iteration  84: 944,557 ns/op
Iteration  85: 964,618 ns/op
Iteration  86: 964,728 ns/op
Iteration  87: 964,843 ns/op
Iteration  88: 944,547 ns/op
Iteration  89: 943,401 ns/op
Iteration  90: 943,897 ns/op
Iteration  91: 949,658 ns/op
Iteration  92: 944,757 ns/op
Iteration  93: 945,633 ns/op
Iteration  94: 944,884 ns/op
Iteration  95: 965,627 ns/op
Iteration  96: 944,680 ns/op
Iteration  97: 942,704 ns/op
Iteration  98: 945,550 ns/op
Iteration  99: 947,258 ns/op
Iteration 100: 950,157 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  953,173 ±(99.9%) 4,403 ns/op [Average]
  (min, avg, max) = (942,167, 953,173, 996,987), stdev = 12,983
  CI (99.9%): [948,770, 957,577] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)           (fileName)  Mode  Cnt    Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-6.json  avgt  100  953,173 ± 4,403  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 1690,949 ns/op
# Warmup Iteration   2: 1591,410 ns/op
# Warmup Iteration   3: 1612,152 ns/op
Iteration   1: 1601,568 ns/op
Iteration   2: 1587,286 ns/op
Iteration   3: 1652,738 ns/op
Iteration   4: 1609,430 ns/op
Iteration   5: 1608,371 ns/op
Iteration   6: 1571,195 ns/op
Iteration   7: 1599,440 ns/op
Iteration   8: 1586,854 ns/op
Iteration   9: 1571,932 ns/op
Iteration  10: 1569,482 ns/op
Iteration  11: 1572,684 ns/op
Iteration  12: 1613,238 ns/op
Iteration  13: 1634,075 ns/op
Iteration  14: 1567,819 ns/op
Iteration  15: 1577,767 ns/op
Iteration  16: 1612,401 ns/op
Iteration  17: 1560,097 ns/op
Iteration  18: 1561,188 ns/op
Iteration  19: 1561,715 ns/op
Iteration  20: 1565,315 ns/op
Iteration  21: 1567,202 ns/op
Iteration  22: 1617,973 ns/op
Iteration  23: 1589,787 ns/op
Iteration  24: 1577,661 ns/op
Iteration  25: 1559,840 ns/op
Iteration  26: 1561,285 ns/op
Iteration  27: 1589,503 ns/op
Iteration  28: 1590,915 ns/op
Iteration  29: 1597,352 ns/op
Iteration  30: 1604,248 ns/op
Iteration  31: 1607,956 ns/op
Iteration  32: 1562,028 ns/op
Iteration  33: 1562,944 ns/op
Iteration  34: 1568,165 ns/op
Iteration  35: 1632,555 ns/op
Iteration  36: 1559,689 ns/op
Iteration  37: 1562,159 ns/op
Iteration  38: 1560,396 ns/op
Iteration  39: 1587,886 ns/op
Iteration  40: 1602,998 ns/op
Iteration  41: 1587,762 ns/op
Iteration  42: 1560,687 ns/op
Iteration  43: 1559,501 ns/op
Iteration  44: 1586,260 ns/op
Iteration  45: 1572,835 ns/op
Iteration  46: 1568,855 ns/op
Iteration  47: 1615,990 ns/op
Iteration  48: 1564,001 ns/op
Iteration  49: 1561,348 ns/op
Iteration  50: 1564,148 ns/op
Iteration  51: 1569,480 ns/op
Iteration  52: 1561,544 ns/op
Iteration  53: 1560,644 ns/op
Iteration  54: 1560,812 ns/op
Iteration  55: 1559,507 ns/op
Iteration  56: 1558,994 ns/op
Iteration  57: 1557,723 ns/op
Iteration  58: 1566,280 ns/op
Iteration  59: 1559,280 ns/op
Iteration  60: 1576,533 ns/op
Iteration  61: 1613,581 ns/op
Iteration  62: 1579,721 ns/op
Iteration  63: 1563,867 ns/op
Iteration  64: 1559,471 ns/op
Iteration  65: 1558,959 ns/op
Iteration  66: 1560,867 ns/op
Iteration  67: 1559,844 ns/op
Iteration  68: 1559,263 ns/op
Iteration  69: 1560,337 ns/op
Iteration  70: 1559,903 ns/op
Iteration  71: 1560,465 ns/op
Iteration  72: 1560,114 ns/op
Iteration  73: 1558,074 ns/op
Iteration  74: 1566,053 ns/op
Iteration  75: 1560,773 ns/op
Iteration  76: 1560,614 ns/op
Iteration  77: 1600,956 ns/op
Iteration  78: 1586,210 ns/op
Iteration  79: 1561,652 ns/op
Iteration  80: 1619,788 ns/op
Iteration  81: 1559,229 ns/op
Iteration  82: 1560,918 ns/op
Iteration  83: 1560,633 ns/op
Iteration  84: 1559,800 ns/op
Iteration  85: 1598,034 ns/op
Iteration  86: 1560,121 ns/op
Iteration  87: 1629,266 ns/op
Iteration  88: 1573,220 ns/op
Iteration  89: 1559,562 ns/op
Iteration  90: 1560,368 ns/op
Iteration  91: 1561,105 ns/op
Iteration  92: 1576,137 ns/op
Iteration  93: 1592,742 ns/op
Iteration  94: 1562,820 ns/op
Iteration  95: 1585,572 ns/op
Iteration  96: 1559,625 ns/op
Iteration  97: 1602,280 ns/op
Iteration  98: 1573,230 ns/op
Iteration  99: 1563,118 ns/op
Iteration 100: 1564,249 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  1576,919 ±(99.9%) 7,352 ns/op [Average]
  (min, avg, max) = (1557,723, 1576,919, 1652,738), stdev = 21,679
  CI (99.9%): [1569,566, 1584,271] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)            (fileName)  Mode  Cnt     Score   Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-10.json  avgt  100  1576,919 ± 7,352  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: 3909,658 ns/op
# Warmup Iteration   2: 3683,556 ns/op
# Warmup Iteration   3: 3696,366 ns/op
Iteration   1: 3673,385 ns/op
Iteration   2: 3739,991 ns/op
Iteration   3: 3707,404 ns/op
Iteration   4: 3830,398 ns/op
Iteration   5: 3669,712 ns/op
Iteration   6: 3668,004 ns/op
Iteration   7: 3733,527 ns/op
Iteration   8: 3676,451 ns/op
Iteration   9: 3698,316 ns/op
Iteration  10: 3660,025 ns/op
Iteration  11: 3656,005 ns/op
Iteration  12: 3664,438 ns/op
Iteration  13: 3658,233 ns/op
Iteration  14: 3666,228 ns/op
Iteration  15: 3823,678 ns/op
Iteration  16: 3859,277 ns/op
Iteration  17: 3764,711 ns/op
Iteration  18: 3667,556 ns/op
Iteration  19: 3732,606 ns/op
Iteration  20: 3687,505 ns/op
Iteration  21: 3739,276 ns/op
Iteration  22: 3740,754 ns/op
Iteration  23: 3748,383 ns/op
Iteration  24: 3667,593 ns/op
Iteration  25: 3662,410 ns/op
Iteration  26: 3668,582 ns/op
Iteration  27: 3674,497 ns/op
Iteration  28: 3767,647 ns/op
Iteration  29: 3718,494 ns/op
Iteration  30: 3666,243 ns/op
Iteration  31: 3786,445 ns/op
Iteration  32: 3751,264 ns/op
Iteration  33: 3711,045 ns/op
Iteration  34: 3666,313 ns/op
Iteration  35: 3663,854 ns/op
Iteration  36: 3818,485 ns/op
Iteration  37: 3829,608 ns/op
Iteration  38: 3687,915 ns/op
Iteration  39: 3664,026 ns/op
Iteration  40: 3669,074 ns/op
Iteration  41: 3714,779 ns/op
Iteration  42: 3665,604 ns/op
Iteration  43: 3661,284 ns/op
Iteration  44: 3665,003 ns/op
Iteration  45: 3672,040 ns/op
Iteration  46: 3674,411 ns/op
Iteration  47: 3675,460 ns/op
Iteration  48: 3668,249 ns/op
Iteration  49: 3715,600 ns/op
Iteration  50: 3669,720 ns/op
Iteration  51: 3663,715 ns/op
Iteration  52: 3685,408 ns/op
Iteration  53: 3680,279 ns/op
Iteration  54: 3764,590 ns/op
Iteration  55: 3679,979 ns/op
Iteration  56: 3666,958 ns/op
Iteration  57: 3662,442 ns/op
Iteration  58: 3669,144 ns/op
Iteration  59: 3665,384 ns/op
Iteration  60: 3706,353 ns/op
Iteration  61: 3735,257 ns/op
Iteration  62: 3695,293 ns/op
Iteration  63: 3762,764 ns/op
Iteration  64: 3753,455 ns/op
Iteration  65: 3959,428 ns/op
Iteration  66: 3706,135 ns/op
Iteration  67: 3723,431 ns/op
Iteration  68: 3664,374 ns/op
Iteration  69: 3664,635 ns/op
Iteration  70: 3675,611 ns/op
Iteration  71: 3669,936 ns/op
Iteration  72: 3661,138 ns/op
Iteration  73: 3663,932 ns/op
Iteration  74: 3702,357 ns/op
Iteration  75: 3682,562 ns/op
Iteration  76: 3750,923 ns/op
Iteration  77: 3670,439 ns/op
Iteration  78: 3672,181 ns/op
Iteration  79: 3750,077 ns/op
Iteration  80: 3663,564 ns/op
Iteration  81: 3681,840 ns/op
Iteration  82: 3670,619 ns/op
Iteration  83: 3668,169 ns/op
Iteration  84: 3754,451 ns/op
Iteration  85: 3665,225 ns/op
Iteration  86: 3721,872 ns/op
Iteration  87: 3751,215 ns/op
Iteration  88: 3763,961 ns/op
Iteration  89: 3678,408 ns/op
Iteration  90: 3659,843 ns/op
Iteration  91: 3737,818 ns/op
Iteration  92: 3766,605 ns/op
Iteration  93: 3800,872 ns/op
Iteration  94: 3674,377 ns/op
Iteration  95: 3679,146 ns/op
Iteration  96: 3722,680 ns/op
Iteration  97: 3744,363 ns/op
Iteration  98: 3663,750 ns/op
Iteration  99: 3696,782 ns/op
Iteration 100: 3681,968 ns/op


Result "dev.jgardo.jackson.benchmark.NoChangesBenchmark.benchmark":
  3705,772 ±(99.9%) 18,154 ns/op [Average]
  (min, avg, max) = (3656,005, 3705,772, 3959,428), stdev = 53,529
  CI (99.9%): [3687,618, 3723,927] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        (className)            (fileName)  Mode  Cnt     Score    Error  Units
NoChangesBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-20.json  avgt  100  3705,772 ± 18,154  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
448,256 ns/op
# Warmup Iteration   2: 415,535 ns/op
# Warmup Iteration   3: 415,597 ns/op
Iteration   1: 421,806 ns/op
Iteration   2: 411,763 ns/op
Iteration   3: 411,942 ns/op
Iteration   4: 418,893 ns/op
Iteration   5: 412,007 ns/op
Iteration   6: 416,931 ns/op
Iteration   7: 413,302 ns/op
Iteration   8: 418,014 ns/op
Iteration   9: 419,523 ns/op
Iteration  10: 411,951 ns/op
Iteration  11: 413,118 ns/op
Iteration  12: 417,484 ns/op
Iteration  13: 411,329 ns/op
Iteration  14: 410,855 ns/op
Iteration  15: 412,549 ns/op
Iteration  16: 410,594 ns/op
Iteration  17: 423,210 ns/op
Iteration  18: 416,435 ns/op
Iteration  19: 410,778 ns/op
Iteration  20: 421,395 ns/op
Iteration  21: 412,322 ns/op
Iteration  22: 417,138 ns/op
Iteration  23: 409,985 ns/op
Iteration  24: 410,292 ns/op
Iteration  25: 418,226 ns/op
Iteration  26: 410,860 ns/op
Iteration  27: 419,120 ns/op
Iteration  28: 410,272 ns/op
Iteration  29: 411,002 ns/op
Iteration  30: 422,359 ns/op
Iteration  31: 409,492 ns/op
Iteration  32: 410,945 ns/op
Iteration  33: 413,894 ns/op
Iteration  34: 417,327 ns/op
Iteration  35: 411,922 ns/op
Iteration  36: 410,805 ns/op
Iteration  37: 411,930 ns/op
Iteration  38: 413,973 ns/op
Iteration  39: 421,114 ns/op
Iteration  40: 412,212 ns/op
Iteration  41: 411,713 ns/op
Iteration  42: 410,603 ns/op
Iteration  43: 412,399 ns/op
Iteration  44: 413,068 ns/op
Iteration  45: 411,319 ns/op
Iteration  46: 426,146 ns/op
Iteration  47: 413,939 ns/op
Iteration  48: 411,268 ns/op
Iteration  49: 416,118 ns/op
Iteration  50: 414,281 ns/op
Iteration  51: 410,901 ns/op
Iteration  52: 425,560 ns/op
Iteration  53: 413,015 ns/op
Iteration  54: 411,523 ns/op
Iteration  55: 414,494 ns/op
Iteration  56: 411,101 ns/op
Iteration  57: 411,187 ns/op
Iteration  58: 416,984 ns/op
Iteration  59: 409,799 ns/op
Iteration  60: 410,558 ns/op
Iteration  61: 410,881 ns/op
Iteration  62: 411,208 ns/op
Iteration  63: 410,808 ns/op
Iteration  64: 411,534 ns/op
Iteration  65: 411,580 ns/op
Iteration  66: 411,563 ns/op
Iteration  67: 412,965 ns/op
Iteration  68: 413,239 ns/op
Iteration  69: 412,427 ns/op
Iteration  70: 416,812 ns/op
Iteration  71: 411,183 ns/op
Iteration  72: 412,138 ns/op
Iteration  73: 424,170 ns/op
Iteration  74: 411,905 ns/op
Iteration  75: 416,793 ns/op
Iteration  76: 414,737 ns/op
Iteration  77: 422,817 ns/op
Iteration  78: 413,459 ns/op
Iteration  79: 411,438 ns/op
Iteration  80: 411,904 ns/op
Iteration  81: 411,754 ns/op
Iteration  82: 411,070 ns/op
Iteration  83: 410,324 ns/op
Iteration  84: 412,460 ns/op
Iteration  85: 420,931 ns/op
Iteration  86: 412,225 ns/op
Iteration  87: 423,236 ns/op
Iteration  88: 417,489 ns/op
Iteration  89: 411,198 ns/op
Iteration  90: 427,793 ns/op
Iteration  91: 416,533 ns/op
Iteration  92: 411,232 ns/op
Iteration  93: 417,674 ns/op
Iteration  94: 416,395 ns/op
Iteration  95: 411,824 ns/op
Iteration  96: 410,531 ns/op
Iteration  97: 416,303 ns/op
Iteration  98: 411,343 ns/op
Iteration  99: 410,790 ns/op
Iteration 100: 410,838 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  414,206 ±(99.9%) 1,439 ns/op [Average]
  (min, avg, max) = (409,492, 414,206, 427,793), stdev = 4,242
  CI (99.9%): [412,767, 415,644] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                     (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-2.json  avgt  100  414,206 ± 1,439  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
915,908 ns/op
# Warmup Iteration   2: 851,359 ns/op
# Warmup Iteration   3: 851,068 ns/op
Iteration   1: 866,165 ns/op
Iteration   2: 862,753 ns/op
Iteration   3: 882,965 ns/op
Iteration   4: 850,487 ns/op
Iteration   5: 852,496 ns/op
Iteration   6: 864,442 ns/op
Iteration   7: 857,412 ns/op
Iteration   8: 890,060 ns/op
Iteration   9: 849,104 ns/op
Iteration  10: 893,792 ns/op
Iteration  11: 865,804 ns/op
Iteration  12: 879,856 ns/op
Iteration  13: 889,760 ns/op
Iteration  14: 851,514 ns/op
Iteration  15: 850,237 ns/op
Iteration  16: 852,173 ns/op
Iteration  17: 849,459 ns/op
Iteration  18: 852,076 ns/op
Iteration  19: 871,286 ns/op
Iteration  20: 886,408 ns/op
Iteration  21: 862,452 ns/op
Iteration  22: 865,654 ns/op
Iteration  23: 859,367 ns/op
Iteration  24: 872,079 ns/op
Iteration  25: 855,449 ns/op
Iteration  26: 849,210 ns/op
Iteration  27: 855,964 ns/op
Iteration  28: 871,875 ns/op
Iteration  29: 853,585 ns/op
Iteration  30: 862,126 ns/op
Iteration  31: 849,383 ns/op
Iteration  32: 863,353 ns/op
Iteration  33: 856,298 ns/op
Iteration  34: 877,996 ns/op
Iteration  35: 862,797 ns/op
Iteration  36: 851,793 ns/op
Iteration  37: 848,719 ns/op
Iteration  38: 848,794 ns/op
Iteration  39: 850,726 ns/op
Iteration  40: 853,929 ns/op
Iteration  41: 852,497 ns/op
Iteration  42: 873,802 ns/op
Iteration  43: 851,050 ns/op
Iteration  44: 848,998 ns/op
Iteration  45: 850,886 ns/op
Iteration  46: 857,952 ns/op
Iteration  47: 850,364 ns/op
Iteration  48: 893,406 ns/op
Iteration  49: 865,879 ns/op
Iteration  50: 864,885 ns/op
Iteration  51: 848,960 ns/op
Iteration  52: 853,258 ns/op
Iteration  53: 862,855 ns/op
Iteration  54: 849,031 ns/op
Iteration  55: 852,766 ns/op
Iteration  56: 851,321 ns/op
Iteration  57: 850,460 ns/op
Iteration  58: 855,450 ns/op
Iteration  59: 853,133 ns/op
Iteration  60: 854,316 ns/op
Iteration  61: 849,864 ns/op
Iteration  62: 868,454 ns/op
Iteration  63: 867,609 ns/op
Iteration  64: 868,166 ns/op
Iteration  65: 848,744 ns/op
Iteration  66: 860,811 ns/op
Iteration  67: 849,488 ns/op
Iteration  68: 850,368 ns/op
Iteration  69: 856,915 ns/op
Iteration  70: 855,514 ns/op
Iteration  71: 852,396 ns/op
Iteration  72: 852,045 ns/op
Iteration  73: 855,155 ns/op
Iteration  74: 886,690 ns/op
Iteration  75: 873,412 ns/op
Iteration  76: 852,440 ns/op
Iteration  77: 854,321 ns/op
Iteration  78: 848,758 ns/op
Iteration  79: 853,072 ns/op
Iteration  80: 892,410 ns/op
Iteration  81: 852,537 ns/op
Iteration  82: 853,225 ns/op
Iteration  83: 850,606 ns/op
Iteration  84: 849,117 ns/op
Iteration  85: 874,181 ns/op
Iteration  86: 857,557 ns/op
Iteration  87: 863,756 ns/op
Iteration  88: 848,355 ns/op
Iteration  89: 867,450 ns/op
Iteration  90: 848,557 ns/op
Iteration  91: 849,522 ns/op
Iteration  92: 852,376 ns/op
Iteration  93: 850,459 ns/op
Iteration  94: 849,679 ns/op
Iteration  95: 849,300 ns/op
Iteration  96: 848,404 ns/op
Iteration  97: 860,860 ns/op
Iteration  98: 871,444 ns/op
Iteration  99: 850,073 ns/op
Iteration 100: 848,893 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  859,241 ±(99.9%) 4,044 ns/op [Average]
  (min, avg, max) = (848,355, 859,241, 893,792), stdev = 11,924
  CI (99.9%): [855,196, 863,285] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                     (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-6.json  avgt  100  859,241 ± 4,044  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1567,774 ns/op
# Warmup Iteration   2: 1500,019 ns/op
# Warmup Iteration   3: 1468,391 ns/op
Iteration   1: 1457,130 ns/op
Iteration   2: 1460,994 ns/op
Iteration   3: 1507,854 ns/op
Iteration   4: 1465,457 ns/op
Iteration   5: 1458,065 ns/op
Iteration   6: 1549,425 ns/op
Iteration   7: 1458,927 ns/op
Iteration   8: 1458,254 ns/op
Iteration   9: 1469,829 ns/op
Iteration  10: 1470,810 ns/op
Iteration  11: 1465,259 ns/op
Iteration  12: 1458,636 ns/op
Iteration  13: 1457,026 ns/op
Iteration  14: 1482,944 ns/op
Iteration  15: 1475,436 ns/op
Iteration  16: 1489,354 ns/op
Iteration  17: 1481,451 ns/op
Iteration  18: 1486,099 ns/op
Iteration  19: 1480,990 ns/op
Iteration  20: 1489,702 ns/op
Iteration  21: 1491,133 ns/op
Iteration  22: 1491,765 ns/op
Iteration  23: 1526,192 ns/op
Iteration  24: 1483,511 ns/op
Iteration  25: 1482,887 ns/op
Iteration  26: 1507,975 ns/op
Iteration  27: 1525,788 ns/op
Iteration  28: 1486,062 ns/op
Iteration  29: 1559,482 ns/op
Iteration  30: 1495,065 ns/op
Iteration  31: 1474,831 ns/op
Iteration  32: 1486,079 ns/op
Iteration  33: 1489,063 ns/op
Iteration  34: 1523,381 ns/op
Iteration  35: 1481,033 ns/op
Iteration  36: 1486,431 ns/op
Iteration  37: 1525,305 ns/op
Iteration  38: 1488,467 ns/op
Iteration  39: 1513,672 ns/op
Iteration  40: 1534,464 ns/op
Iteration  41: 1497,112 ns/op
Iteration  42: 1477,534 ns/op
Iteration  43: 1492,340 ns/op
Iteration  44: 1489,714 ns/op
Iteration  45: 1484,248 ns/op
Iteration  46: 1546,769 ns/op
Iteration  47: 1491,804 ns/op
Iteration  48: 1481,511 ns/op
Iteration  49: 1485,258 ns/op
Iteration  50: 1477,034 ns/op
Iteration  51: 1487,451 ns/op
Iteration  52: 1491,475 ns/op
Iteration  53: 1479,313 ns/op
Iteration  54: 1489,193 ns/op
Iteration  55: 1484,185 ns/op
Iteration  56: 1481,465 ns/op
Iteration  57: 1484,044 ns/op
Iteration  58: 1486,178 ns/op
Iteration  59: 1477,842 ns/op
Iteration  60: 1477,792 ns/op
Iteration  61: 1484,473 ns/op
Iteration  62: 1558,127 ns/op
Iteration  63: 1491,689 ns/op
Iteration  64: 1538,901 ns/op
Iteration  65: 1533,750 ns/op
Iteration  66: 1474,077 ns/op
Iteration  67: 1553,016 ns/op
Iteration  68: 1484,298 ns/op
Iteration  69: 1482,957 ns/op
Iteration  70: 1507,609 ns/op
Iteration  71: 1496,465 ns/op
Iteration  72: 1487,313 ns/op
Iteration  73: 1483,997 ns/op
Iteration  74: 1511,073 ns/op
Iteration  75: 1513,719 ns/op
Iteration  76: 1566,759 ns/op
Iteration  77: 1485,751 ns/op
Iteration  78: 1491,614 ns/op
Iteration  79: 1477,583 ns/op
Iteration  80: 1512,888 ns/op
Iteration  81: 1484,711 ns/op
Iteration  82: 1505,880 ns/op
Iteration  83: 1503,661 ns/op
Iteration  84: 1486,874 ns/op
Iteration  85: 1484,957 ns/op
Iteration  86: 1498,494 ns/op
Iteration  87: 1493,205 ns/op
Iteration  88: 1483,187 ns/op
Iteration  89: 1479,970 ns/op
Iteration  90: 1483,929 ns/op
Iteration  91: 1493,976 ns/op
Iteration  92: 1489,882 ns/op
Iteration  93: 1541,870 ns/op
Iteration  94: 1524,119 ns/op
Iteration  95: 1494,132 ns/op
Iteration  96: 1512,263 ns/op
Iteration  97: 1473,015 ns/op
Iteration  98: 1478,348 ns/op
Iteration  99: 1480,751 ns/op
Iteration 100: 1480,244 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  1493,480 ±(99.9%) 8,103 ns/op [Average]
  (min, avg, max) = (1457,026, 1493,480, 1566,759), stdev = 23,892
  CI (99.9%): [1485,377, 1501,583] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                      (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-10.json  avgt  100  1493,480 ± 8,103  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Primitives, fileName = /primitives/primitives-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3924,975 ns/op
# Warmup Iteration   2: 3659,199 ns/op
# Warmup Iteration   3: 3704,171 ns/op
Iteration   1: 3652,755 ns/op
Iteration   2: 3650,163 ns/op
Iteration   3: 3658,390 ns/op
Iteration   4: 3656,711 ns/op
Iteration   5: 3653,714 ns/op
Iteration   6: 3746,178 ns/op
Iteration   7: 3658,495 ns/op
Iteration   8: 3650,113 ns/op
Iteration   9: 3662,594 ns/op
Iteration  10: 3639,268 ns/op
Iteration  11: 3638,818 ns/op
Iteration  12: 3639,889 ns/op
Iteration  13: 3637,905 ns/op
Iteration  14: 3637,216 ns/op
Iteration  15: 3638,926 ns/op
Iteration  16: 3639,770 ns/op
Iteration  17: 3637,984 ns/op
Iteration  18: 3645,280 ns/op
Iteration  19: 3645,292 ns/op
Iteration  20: 3666,951 ns/op
Iteration  21: 3830,226 ns/op
Iteration  22: 3639,611 ns/op
Iteration  23: 3751,571 ns/op
Iteration  24: 3656,598 ns/op
Iteration  25: 3634,177 ns/op
Iteration  26: 3641,109 ns/op
Iteration  27: 3655,024 ns/op
Iteration  28: 3636,493 ns/op
Iteration  29: 3634,533 ns/op
Iteration  30: 3637,361 ns/op
Iteration  31: 3637,426 ns/op
Iteration  32: 3635,542 ns/op
Iteration  33: 3741,086 ns/op
Iteration  34: 3690,427 ns/op
Iteration  35: 3648,923 ns/op
Iteration  36: 3653,717 ns/op
Iteration  37: 3633,771 ns/op
Iteration  38: 3807,491 ns/op
Iteration  39: 3639,574 ns/op
Iteration  40: 3752,045 ns/op
Iteration  41: 3789,820 ns/op
Iteration  42: 3749,129 ns/op
Iteration  43: 3643,313 ns/op
Iteration  44: 3717,469 ns/op
Iteration  45: 3639,976 ns/op
Iteration  46: 3639,008 ns/op
Iteration  47: 3795,946 ns/op
Iteration  48: 3637,312 ns/op
Iteration  49: 3717,769 ns/op
Iteration  50: 3641,947 ns/op
Iteration  51: 3718,517 ns/op
Iteration  52: 3653,668 ns/op
Iteration  53: 3749,162 ns/op
Iteration  54: 3641,863 ns/op
Iteration  55: 3635,346 ns/op
Iteration  56: 3636,289 ns/op
Iteration  57: 3638,704 ns/op
Iteration  58: 3636,110 ns/op
Iteration  59: 3637,468 ns/op
Iteration  60: 3633,608 ns/op
Iteration  61: 3680,878 ns/op
Iteration  62: 3637,784 ns/op
Iteration  63: 3632,363 ns/op
Iteration  64: 3638,918 ns/op
Iteration  65: 3639,155 ns/op
Iteration  66: 3641,022 ns/op
Iteration  67: 3670,351 ns/op
Iteration  68: 3640,409 ns/op
Iteration  69: 3640,703 ns/op
Iteration  70: 3651,209 ns/op
Iteration  71: 3638,296 ns/op
Iteration  72: 3638,456 ns/op
Iteration  73: 3641,301 ns/op
Iteration  74: 3635,922 ns/op
Iteration  75: 3643,358 ns/op
Iteration  76: 3639,889 ns/op
Iteration  77: 3641,370 ns/op
Iteration  78: 3635,419 ns/op
Iteration  79: 3637,819 ns/op
Iteration  80: 3635,553 ns/op
Iteration  81: 3685,835 ns/op
Iteration  82: 3751,312 ns/op
Iteration  83: 3735,399 ns/op
Iteration  84: 3636,805 ns/op
Iteration  85: 3713,559 ns/op
Iteration  86: 3635,084 ns/op
Iteration  87: 3635,384 ns/op
Iteration  88: 3710,362 ns/op
Iteration  89: 3679,676 ns/op
Iteration  90: 3665,211 ns/op
Iteration  91: 3636,275 ns/op
Iteration  92: 3638,179 ns/op
Iteration  93: 3633,100 ns/op
Iteration  94: 3637,157 ns/op
Iteration  95: 3653,823 ns/op
Iteration  96: 3662,745 ns/op
Iteration  97: 3653,439 ns/op
Iteration  98: 3680,431 ns/op
Iteration  99: 3754,635 ns/op
Iteration 100: 3638,837 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  3664,630 ±(99.9%) 15,255 ns/op [Average]
  (min, avg, max) = (3632,363, 3664,630, 3830,226), stdev = 44,981
  CI (99.9%): [3649,374, 3679,885] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          (className)                      (fileName)  Mode  Cnt     Score    Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Primitives  /primitives/primitives-20.json  avgt  100  3664,630 ± 15,255  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
462,741 ns/op
# Warmup Iteration   2: 439,625 ns/op
# Warmup Iteration   3: 438,024 ns/op
Iteration   1: 440,529 ns/op
Iteration   2: 441,035 ns/op
Iteration   3: 440,389 ns/op
Iteration   4: 431,437 ns/op
Iteration   5: 431,393 ns/op
Iteration   6: 441,823 ns/op
Iteration   7: 451,584 ns/op
Iteration   8: 447,059 ns/op
Iteration   9: 438,083 ns/op
Iteration  10: 431,290 ns/op
Iteration  11: 446,600 ns/op
Iteration  12: 432,935 ns/op
Iteration  13: 436,196 ns/op
Iteration  14: 434,698 ns/op
Iteration  15: 436,371 ns/op
Iteration  16: 430,783 ns/op
Iteration  17: 439,361 ns/op
Iteration  18: 431,075 ns/op
Iteration  19: 436,773 ns/op
Iteration  20: 437,283 ns/op
Iteration  21: 438,824 ns/op
Iteration  22: 430,506 ns/op
Iteration  23: 430,591 ns/op
Iteration  24: 430,852 ns/op
Iteration  25: 431,286 ns/op
Iteration  26: 431,933 ns/op
Iteration  27: 431,385 ns/op
Iteration  28: 430,401 ns/op
Iteration  29: 430,379 ns/op
Iteration  30: 437,884 ns/op
Iteration  31: 440,441 ns/op
Iteration  32: 442,986 ns/op
Iteration  33: 431,926 ns/op
Iteration  34: 431,891 ns/op
Iteration  35: 448,149 ns/op
Iteration  36: 430,559 ns/op
Iteration  37: 430,926 ns/op
Iteration  38: 434,563 ns/op
Iteration  39: 431,964 ns/op
Iteration  40: 432,012 ns/op
Iteration  41: 430,519 ns/op
Iteration  42: 430,664 ns/op
Iteration  43: 432,006 ns/op
Iteration  44: 431,830 ns/op
Iteration  45: 434,743 ns/op
Iteration  46: 439,912 ns/op
Iteration  47: 434,910 ns/op
Iteration  48: 430,104 ns/op
Iteration  49: 436,236 ns/op
Iteration  50: 432,921 ns/op
Iteration  51: 435,198 ns/op
Iteration  52: 432,853 ns/op
Iteration  53: 430,551 ns/op
Iteration  54: 433,180 ns/op
Iteration  55: 437,937 ns/op
Iteration  56: 448,221 ns/op
Iteration  57: 439,683 ns/op
Iteration  58: 433,011 ns/op
Iteration  59: 440,702 ns/op
Iteration  60: 438,219 ns/op
Iteration  61: 430,747 ns/op
Iteration  62: 434,883 ns/op
Iteration  63: 443,796 ns/op
Iteration  64: 450,403 ns/op
Iteration  65: 434,750 ns/op
Iteration  66: 433,191 ns/op
Iteration  67: 434,505 ns/op
Iteration  68: 430,515 ns/op
Iteration  69: 430,391 ns/op
Iteration  70: 442,519 ns/op
Iteration  71: 443,274 ns/op
Iteration  72: 437,958 ns/op
Iteration  73: 430,986 ns/op
Iteration  74: 432,640 ns/op
Iteration  75: 435,351 ns/op
Iteration  76: 435,255 ns/op
Iteration  77: 433,074 ns/op
Iteration  78: 448,386 ns/op
Iteration  79: 430,484 ns/op
Iteration  80: 436,890 ns/op
Iteration  81: 442,633 ns/op
Iteration  82: 436,683 ns/op
Iteration  83: 429,987 ns/op
Iteration  84: 445,055 ns/op
Iteration  85: 434,376 ns/op
Iteration  86: 439,534 ns/op
Iteration  87: 431,215 ns/op
Iteration  88: 431,490 ns/op
Iteration  89: 429,887 ns/op
Iteration  90: 440,715 ns/op
Iteration  91: 439,599 ns/op
Iteration  92: 430,594 ns/op
Iteration  93: 430,236 ns/op
Iteration  94: 437,103 ns/op
Iteration  95: 433,928 ns/op
Iteration  96: 431,474 ns/op
Iteration  97: 430,679 ns/op
Iteration  98: 430,249 ns/op
Iteration  99: 430,643 ns/op
Iteration 100: 438,528 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  435,642 ±(99.9%) 1,820 ns/op [Average]
  (min, avg, max) = (429,887, 435,642, 451,584), stdev = 5,367
  CI (99.9%): [433,821, 437,462] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)               (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-2.json  avgt  100  435,642 ± 1,820  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1014,205 ns/op
# Warmup Iteration   2: 955,724 ns/op
# Warmup Iteration   3: 941,506 ns/op
Iteration   1: 939,901 ns/op
Iteration   2: 944,783 ns/op
Iteration   3: 959,403 ns/op
Iteration   4: 945,057 ns/op
Iteration   5: 960,162 ns/op
Iteration   6: 941,395 ns/op
Iteration   7: 942,826 ns/op
Iteration   8: 971,939 ns/op
Iteration   9: 954,666 ns/op
Iteration  10: 976,096 ns/op
Iteration  11: 942,154 ns/op
Iteration  12: 969,267 ns/op
Iteration  13: 960,347 ns/op
Iteration  14: 955,832 ns/op
Iteration  15: 953,379 ns/op
Iteration  16: 963,237 ns/op
Iteration  17: 943,913 ns/op
Iteration  18: 965,498 ns/op
Iteration  19: 941,340 ns/op
Iteration  20: 940,512 ns/op
Iteration  21: 941,741 ns/op
Iteration  22: 939,476 ns/op
Iteration  23: 941,130 ns/op
Iteration  24: 940,834 ns/op
Iteration  25: 940,038 ns/op
Iteration  26: 953,376 ns/op
Iteration  27: 953,162 ns/op
Iteration  28: 942,517 ns/op
Iteration  29: 941,638 ns/op
Iteration  30: 969,040 ns/op
Iteration  31: 948,039 ns/op
Iteration  32: 953,925 ns/op
Iteration  33: 946,379 ns/op
Iteration  34: 940,879 ns/op
Iteration  35: 945,792 ns/op
Iteration  36: 959,131 ns/op
Iteration  37: 967,533 ns/op
Iteration  38: 994,215 ns/op
Iteration  39: 987,115 ns/op
Iteration  40: 960,263 ns/op
Iteration  41: 943,269 ns/op
Iteration  42: 963,716 ns/op
Iteration  43: 954,054 ns/op
Iteration  44: 951,676 ns/op
Iteration  45: 955,350 ns/op
Iteration  46: 955,318 ns/op
Iteration  47: 989,929 ns/op
Iteration  48: 940,129 ns/op
Iteration  49: 989,994 ns/op
Iteration  50: 953,388 ns/op
Iteration  51: 945,101 ns/op
Iteration  52: 956,990 ns/op
Iteration  53: 941,490 ns/op
Iteration  54: 951,050 ns/op
Iteration  55: 946,609 ns/op
Iteration  56: 941,240 ns/op
Iteration  57: 941,969 ns/op
Iteration  58: 941,841 ns/op
Iteration  59: 942,091 ns/op
Iteration  60: 942,225 ns/op
Iteration  61: 976,845 ns/op
Iteration  62: 942,688 ns/op
Iteration  63: 941,308 ns/op
Iteration  64: 942,518 ns/op
Iteration  65: 951,462 ns/op
Iteration  66: 947,107 ns/op
Iteration  67: 942,715 ns/op
Iteration  68: 948,311 ns/op
Iteration  69: 981,429 ns/op
Iteration  70: 940,919 ns/op
Iteration  71: 943,132 ns/op
Iteration  72: 946,307 ns/op
Iteration  73: 945,639 ns/op
Iteration  74: 953,396 ns/op
Iteration  75: 973,353 ns/op
Iteration  76: 945,213 ns/op
Iteration  77: 951,044 ns/op
Iteration  78: 944,404 ns/op
Iteration  79: 942,004 ns/op
Iteration  80: 968,671 ns/op
Iteration  81: 939,900 ns/op
Iteration  82: 950,961 ns/op
Iteration  83: 982,655 ns/op
Iteration  84: 956,496 ns/op
Iteration  85: 942,426 ns/op
Iteration  86: 941,456 ns/op
Iteration  87: 961,249 ns/op
Iteration  88: 943,569 ns/op
Iteration  89: 973,793 ns/op
Iteration  90: 951,380 ns/op
Iteration  91: 941,169 ns/op
Iteration  92: 955,690 ns/op
Iteration  93: 946,268 ns/op
Iteration  94: 959,946 ns/op
Iteration  95: 953,177 ns/op
Iteration  96: 941,420 ns/op
Iteration  97: 941,206 ns/op
Iteration  98: 941,138 ns/op
Iteration  99: 943,450 ns/op
Iteration 100: 941,009 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  952,222 ±(99.9%) 4,469 ns/op [Average]
  (min, avg, max) = (939,476, 952,222, 994,215), stdev = 13,177
  CI (99.9%): [947,753, 956,691] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)               (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-6.json  avgt  100  952,222 ± 4,469  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1622,146 ns/op
# Warmup Iteration   2: 1519,411 ns/op
# Warmup Iteration   3: 1534,938 ns/op
Iteration   1: 1530,590 ns/op
Iteration   2: 1559,584 ns/op
Iteration   3: 1522,117 ns/op
Iteration   4: 1523,153 ns/op
Iteration   5: 1523,519 ns/op
Iteration   6: 1524,720 ns/op
Iteration   7: 1523,501 ns/op
Iteration   8: 1523,699 ns/op
Iteration   9: 1523,795 ns/op
Iteration  10: 1589,528 ns/op
Iteration  11: 1531,638 ns/op
Iteration  12: 1523,683 ns/op
Iteration  13: 1530,913 ns/op
Iteration  14: 1512,265 ns/op
Iteration  15: 1509,330 ns/op
Iteration  16: 1534,057 ns/op
Iteration  17: 1509,267 ns/op
Iteration  18: 1526,494 ns/op
Iteration  19: 1540,800 ns/op
Iteration  20: 1510,195 ns/op
Iteration  21: 1508,895 ns/op
Iteration  22: 1521,349 ns/op
Iteration  23: 1510,153 ns/op
Iteration  24: 1511,518 ns/op
Iteration  25: 1509,012 ns/op
Iteration  26: 1521,444 ns/op
Iteration  27: 1510,642 ns/op
Iteration  28: 1508,037 ns/op
Iteration  29: 1510,544 ns/op
Iteration  30: 1513,671 ns/op
Iteration  31: 1508,304 ns/op
Iteration  32: 1506,760 ns/op
Iteration  33: 1509,086 ns/op
Iteration  34: 1508,390 ns/op
Iteration  35: 1508,466 ns/op
Iteration  36: 1510,383 ns/op
Iteration  37: 1509,402 ns/op
Iteration  38: 1514,273 ns/op
Iteration  39: 1508,664 ns/op
Iteration  40: 1530,136 ns/op
Iteration  41: 1518,587 ns/op
Iteration  42: 1518,283 ns/op
Iteration  43: 1518,172 ns/op
Iteration  44: 1517,203 ns/op
Iteration  45: 1515,380 ns/op
Iteration  46: 1509,245 ns/op
Iteration  47: 1508,440 ns/op
Iteration  48: 1508,163 ns/op
Iteration  49: 1569,113 ns/op
Iteration  50: 1510,573 ns/op
Iteration  51: 1507,947 ns/op
Iteration  52: 1565,753 ns/op
Iteration  53: 1508,941 ns/op
Iteration  54: 1544,786 ns/op
Iteration  55: 1507,899 ns/op
Iteration  56: 1508,242 ns/op
Iteration  57: 1528,426 ns/op
Iteration  58: 1543,355 ns/op
Iteration  59: 1509,975 ns/op
Iteration  60: 1507,616 ns/op
Iteration  61: 1512,898 ns/op
Iteration  62: 1514,507 ns/op
Iteration  63: 1522,555 ns/op
Iteration  64: 1508,910 ns/op
Iteration  65: 1506,844 ns/op
Iteration  66: 1510,827 ns/op
Iteration  67: 1512,337 ns/op
Iteration  68: 1519,061 ns/op
Iteration  69: 1506,946 ns/op
Iteration  70: 1507,070 ns/op
Iteration  71: 1508,208 ns/op
Iteration  72: 1524,157 ns/op
Iteration  73: 1521,571 ns/op
Iteration  74: 1508,172 ns/op
Iteration  75: 1527,913 ns/op
Iteration  76: 1509,883 ns/op
Iteration  77: 1509,603 ns/op
Iteration  78: 1516,640 ns/op
Iteration  79: 1509,449 ns/op
Iteration  80: 1508,281 ns/op
Iteration  81: 1515,638 ns/op
Iteration  82: 1509,016 ns/op
Iteration  83: 1507,701 ns/op
Iteration  84: 1512,035 ns/op
Iteration  85: 1520,346 ns/op
Iteration  86: 1508,152 ns/op
Iteration  87: 1512,081 ns/op
Iteration  88: 1511,323 ns/op
Iteration  89: 1507,376 ns/op
Iteration  90: 1513,060 ns/op
Iteration  91: 1519,715 ns/op
Iteration  92: 1507,932 ns/op
Iteration  93: 1510,481 ns/op
Iteration  94: 1509,437 ns/op
Iteration  95: 1510,485 ns/op
Iteration  96: 1515,244 ns/op
Iteration  97: 1539,666 ns/op
Iteration  98: 1507,449 ns/op
Iteration  99: 1507,923 ns/op
Iteration 100: 1508,326 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  1517,573 ±(99.9%) 4,841 ns/op [Average]
  (min, avg, max) = (1506,760, 1517,573, 1589,528), stdev = 14,272
  CI (99.9%): [1512,732, 1522,413] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)                (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-10.json  avgt  100  1517,573 ± 4,841  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Objects, fileName = /objects/objects-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3388,058 ns/op
# Warmup Iteration   2: 3222,283 ns/op
# Warmup Iteration   3: 3242,470 ns/op
Iteration   1: 3185,281 ns/op
Iteration   2: 3193,680 ns/op
Iteration   3: 3202,198 ns/op
Iteration   4: 3186,839 ns/op
Iteration   5: 3235,718 ns/op
Iteration   6: 3193,969 ns/op
Iteration   7: 3272,035 ns/op
Iteration   8: 3198,777 ns/op
Iteration   9: 3186,642 ns/op
Iteration  10: 3186,942 ns/op
Iteration  11: 3194,948 ns/op
Iteration  12: 3290,113 ns/op
Iteration  13: 3192,473 ns/op
Iteration  14: 3196,253 ns/op
Iteration  15: 3235,829 ns/op
Iteration  16: 3255,019 ns/op
Iteration  17: 3196,223 ns/op
Iteration  18: 3359,526 ns/op
Iteration  19: 3302,182 ns/op
Iteration  20: 3199,955 ns/op
Iteration  21: 3307,617 ns/op
Iteration  22: 3230,217 ns/op
Iteration  23: 3201,546 ns/op
Iteration  24: 3196,663 ns/op
Iteration  25: 3258,524 ns/op
Iteration  26: 3200,757 ns/op
Iteration  27: 3277,636 ns/op
Iteration  28: 3193,753 ns/op
Iteration  29: 3280,905 ns/op
Iteration  30: 3202,724 ns/op
Iteration  31: 3211,732 ns/op
Iteration  32: 3213,871 ns/op
Iteration  33: 3206,751 ns/op
Iteration  34: 3252,483 ns/op
Iteration  35: 3303,428 ns/op
Iteration  36: 3222,214 ns/op
Iteration  37: 3199,121 ns/op
Iteration  38: 3220,437 ns/op
Iteration  39: 3217,055 ns/op
Iteration  40: 3200,105 ns/op
Iteration  41: 3200,021 ns/op
Iteration  42: 3198,173 ns/op
Iteration  43: 3302,590 ns/op
Iteration  44: 3197,170 ns/op
Iteration  45: 3344,956 ns/op
Iteration  46: 3254,444 ns/op
Iteration  47: 3328,952 ns/op
Iteration  48: 3205,388 ns/op
Iteration  49: 3215,298 ns/op
Iteration  50: 3211,491 ns/op
Iteration  51: 3193,780 ns/op
Iteration  52: 3209,882 ns/op
Iteration  53: 3201,686 ns/op
Iteration  54: 3199,631 ns/op
Iteration  55: 3220,610 ns/op
Iteration  56: 3211,618 ns/op
Iteration  57: 3201,187 ns/op
Iteration  58: 3201,951 ns/op
Iteration  59: 3195,765 ns/op
Iteration  60: 3196,647 ns/op
Iteration  61: 3197,354 ns/op
Iteration  62: 3198,300 ns/op
Iteration  63: 3278,845 ns/op
Iteration  64: 3212,580 ns/op
Iteration  65: 3267,451 ns/op
Iteration  66: 3279,043 ns/op
Iteration  67: 3217,705 ns/op
Iteration  68: 3192,512 ns/op
Iteration  69: 3197,353 ns/op
Iteration  70: 3303,923 ns/op
Iteration  71: 3195,551 ns/op
Iteration  72: 3208,237 ns/op
Iteration  73: 3239,208 ns/op
Iteration  74: 3196,253 ns/op
Iteration  75: 3204,382 ns/op
Iteration  76: 3196,452 ns/op
Iteration  77: 3200,195 ns/op
Iteration  78: 3196,164 ns/op
Iteration  79: 3196,291 ns/op
Iteration  80: 3199,323 ns/op
Iteration  81: 3275,099 ns/op
Iteration  82: 3202,166 ns/op
Iteration  83: 3422,320 ns/op
Iteration  84: 3202,801 ns/op
Iteration  85: 3196,740 ns/op
Iteration  86: 3235,935 ns/op
Iteration  87: 3287,488 ns/op
Iteration  88: 3307,466 ns/op
Iteration  89: 3239,420 ns/op
Iteration  90: 3204,707 ns/op
Iteration  91: 3196,422 ns/op
Iteration  92: 3196,245 ns/op
Iteration  93: 3192,950 ns/op
Iteration  94: 3195,357 ns/op
Iteration  95: 3207,545 ns/op
Iteration  96: 3194,779 ns/op
Iteration  97: 3194,778 ns/op
Iteration  98: 3198,773 ns/op
Iteration  99: 3198,932 ns/op
Iteration 100: 3350,346 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  3226,308 ±(99.9%) 15,709 ns/op [Average]
  (min, avg, max) = (3185,281, 3226,308, 3422,320), stdev = 46,319
  CI (99.9%): [3210,599, 3242,017] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (className)                (fileName)  Mode  Cnt     Score    Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Objects  /objects/objects-20.json  avgt  100  3226,308 ± 15,709  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-2.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
505,848 ns/op
# Warmup Iteration   2: 461,166 ns/op
# Warmup Iteration   3: 464,350 ns/op
Iteration   1: 466,269 ns/op
Iteration   2: 454,851 ns/op
Iteration   3: 467,250 ns/op
Iteration   4: 459,806 ns/op
Iteration   5: 467,780 ns/op
Iteration   6: 472,167 ns/op
Iteration   7: 461,342 ns/op
Iteration   8: 456,069 ns/op
Iteration   9: 461,234 ns/op
Iteration  10: 477,000 ns/op
Iteration  11: 454,914 ns/op
Iteration  12: 457,829 ns/op
Iteration  13: 454,275 ns/op
Iteration  14: 455,980 ns/op
Iteration  15: 469,347 ns/op
Iteration  16: 456,060 ns/op
Iteration  17: 457,098 ns/op
Iteration  18: 477,705 ns/op
Iteration  19: 457,892 ns/op
Iteration  20: 464,555 ns/op
Iteration  21: 461,639 ns/op
Iteration  22: 464,490 ns/op
Iteration  23: 464,134 ns/op
Iteration  24: 472,047 ns/op
Iteration  25: 455,195 ns/op
Iteration  26: 456,789 ns/op
Iteration  27: 456,435 ns/op
Iteration  28: 467,821 ns/op
Iteration  29: 468,557 ns/op
Iteration  30: 462,875 ns/op
Iteration  31: 472,592 ns/op
Iteration  32: 466,483 ns/op
Iteration  33: 476,073 ns/op
Iteration  34: 455,652 ns/op
Iteration  35: 462,847 ns/op
Iteration  36: 483,979 ns/op
Iteration  37: 465,593 ns/op
Iteration  38: 462,839 ns/op
Iteration  39: 456,538 ns/op
Iteration  40: 457,536 ns/op
Iteration  41: 458,702 ns/op
Iteration  42: 477,003 ns/op
Iteration  43: 465,071 ns/op
Iteration  44: 465,807 ns/op
Iteration  45: 466,939 ns/op
Iteration  46: 475,411 ns/op
Iteration  47: 457,364 ns/op
Iteration  48: 455,852 ns/op
Iteration  49: 456,740 ns/op
Iteration  50: 468,220 ns/op
Iteration  51: 457,235 ns/op
Iteration  52: 455,963 ns/op
Iteration  53: 456,258 ns/op
Iteration  54: 474,531 ns/op
Iteration  55: 459,917 ns/op
Iteration  56: 464,634 ns/op
Iteration  57: 455,635 ns/op
Iteration  58: 455,084 ns/op
Iteration  59: 455,807 ns/op
Iteration  60: 474,188 ns/op
Iteration  61: 457,979 ns/op
Iteration  62: 468,613 ns/op
Iteration  63: 467,515 ns/op
Iteration  64: 458,197 ns/op
Iteration  65: 459,254 ns/op
Iteration  66: 460,804 ns/op
Iteration  67: 459,087 ns/op
Iteration  68: 462,046 ns/op
Iteration  69: 456,724 ns/op
Iteration  70: 456,582 ns/op
Iteration  71: 456,194 ns/op
Iteration  72: 455,399 ns/op
Iteration  73: 455,296 ns/op
Iteration  74: 455,976 ns/op
Iteration  75: 455,730 ns/op
Iteration  76: 456,064 ns/op
Iteration  77: 466,790 ns/op
Iteration  78: 464,477 ns/op
Iteration  79: 462,069 ns/op
Iteration  80: 457,072 ns/op
Iteration  81: 464,754 ns/op
Iteration  82: 463,185 ns/op
Iteration  83: 466,298 ns/op
Iteration  84: 462,052 ns/op
Iteration  85: 456,250 ns/op
Iteration  86: 464,429 ns/op
Iteration  87: 462,420 ns/op
Iteration  88: 456,216 ns/op
Iteration  89: 467,682 ns/op
Iteration  90: 455,427 ns/op
Iteration  91: 468,716 ns/op
Iteration  92: 472,345 ns/op
Iteration  93: 464,088 ns/op
Iteration  94: 456,012 ns/op
Iteration  95: 456,016 ns/op
Iteration  96: 455,423 ns/op
Iteration  97: 455,407 ns/op
Iteration  98: 455,072 ns/op
Iteration  99: 457,089 ns/op
Iteration 100: 455,355 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  462,020 ±(99.9%) 2,275 ns/op [Average]
  (min, avg, max) = (454,275, 462,020, 483,979), stdev = 6,709
  CI (99.9%): [459,745, 464,295] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)           (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-2.json  avgt  100  462,020 ± 2,275  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-6.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1008,732 ns/op
# Warmup Iteration   2: 948,734 ns/op
# Warmup Iteration   3: 941,727 ns/op
Iteration   1: 934,440 ns/op
Iteration   2: 939,319 ns/op
Iteration   3: 936,171 ns/op
Iteration   4: 940,344 ns/op
Iteration   5: 937,327 ns/op
Iteration   6: 937,908 ns/op
Iteration   7: 938,494 ns/op
Iteration   8: 934,501 ns/op
Iteration   9: 958,274 ns/op
Iteration  10: 950,221 ns/op
Iteration  11: 935,501 ns/op
Iteration  12: 937,144 ns/op
Iteration  13: 975,559 ns/op
Iteration  14: 955,065 ns/op
Iteration  15: 934,703 ns/op
Iteration  16: 955,277 ns/op
Iteration  17: 934,676 ns/op
Iteration  18: 935,989 ns/op
Iteration  19: 937,776 ns/op
Iteration  20: 938,523 ns/op
Iteration  21: 945,036 ns/op
Iteration  22: 934,791 ns/op
Iteration  23: 935,756 ns/op
Iteration  24: 935,788 ns/op
Iteration  25: 935,539 ns/op
Iteration  26: 939,770 ns/op
Iteration  27: 943,272 ns/op
Iteration  28: 933,912 ns/op
Iteration  29: 934,424 ns/op
Iteration  30: 947,542 ns/op
Iteration  31: 935,269 ns/op
Iteration  32: 941,138 ns/op
Iteration  33: 935,916 ns/op
Iteration  34: 935,633 ns/op
Iteration  35: 940,430 ns/op
Iteration  36: 933,888 ns/op
Iteration  37: 955,321 ns/op
Iteration  38: 936,187 ns/op
Iteration  39: 944,132 ns/op
Iteration  40: 955,717 ns/op
Iteration  41: 937,555 ns/op
Iteration  42: 934,173 ns/op
Iteration  43: 934,797 ns/op
Iteration  44: 934,702 ns/op
Iteration  45: 935,536 ns/op
Iteration  46: 955,202 ns/op
Iteration  47: 954,867 ns/op
Iteration  48: 934,098 ns/op
Iteration  49: 935,759 ns/op
Iteration  50: 934,330 ns/op
Iteration  51: 935,770 ns/op
Iteration  52: 934,745 ns/op
Iteration  53: 966,359 ns/op
Iteration  54: 935,142 ns/op
Iteration  55: 953,850 ns/op
Iteration  56: 954,367 ns/op
Iteration  57: 935,282 ns/op
Iteration  58: 940,713 ns/op
Iteration  59: 935,556 ns/op
Iteration  60: 935,292 ns/op
Iteration  61: 958,740 ns/op
Iteration  62: 966,422 ns/op
Iteration  63: 935,491 ns/op
Iteration  64: 955,542 ns/op
Iteration  65: 937,034 ns/op
Iteration  66: 935,320 ns/op
Iteration  67: 936,305 ns/op
Iteration  68: 933,602 ns/op
Iteration  69: 934,901 ns/op
Iteration  70: 935,177 ns/op
Iteration  71: 941,444 ns/op
Iteration  72: 937,448 ns/op
Iteration  73: 938,089 ns/op
Iteration  74: 935,997 ns/op
Iteration  75: 937,411 ns/op
Iteration  76: 933,378 ns/op
Iteration  77: 935,978 ns/op
Iteration  78: 935,010 ns/op
Iteration  79: 935,623 ns/op
Iteration  80: 934,636 ns/op
Iteration  81: 934,816 ns/op
Iteration  82: 936,082 ns/op
Iteration  83: 936,578 ns/op
Iteration  84: 937,123 ns/op
Iteration  85: 949,356 ns/op
Iteration  86: 960,578 ns/op
Iteration  87: 942,203 ns/op
Iteration  88: 934,847 ns/op
Iteration  89: 935,195 ns/op
Iteration  90: 934,404 ns/op
Iteration  91: 935,081 ns/op
Iteration  92: 957,211 ns/op
Iteration  93: 937,487 ns/op
Iteration  94: 939,041 ns/op
Iteration  95: 939,555 ns/op
Iteration  96: 937,162 ns/op
Iteration  97: 934,767 ns/op
Iteration  98: 938,238 ns/op
Iteration  99: 937,798 ns/op
Iteration 100: 935,323 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  940,512 ±(99.9%) 2,998 ns/op [Average]
  (min, avg, max) = (933,378, 940,512, 975,559), stdev = 8,839
  CI (99.9%): [937,514, 943,509] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)           (fileName)  Mode  Cnt    Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-6.json  avgt  100  940,512 ± 2,998  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-10.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1715,367 ns/op
# Warmup Iteration   2: 1598,743 ns/op
# Warmup Iteration   3: 1606,126 ns/op
Iteration   1: 1640,037 ns/op
Iteration   2: 1593,698 ns/op
Iteration   3: 1590,724 ns/op
Iteration   4: 1636,383 ns/op
Iteration   5: 1590,073 ns/op
Iteration   6: 1598,236 ns/op
Iteration   7: 1596,074 ns/op
Iteration   8: 1673,106 ns/op
Iteration   9: 1631,651 ns/op
Iteration  10: 1637,497 ns/op
Iteration  11: 1609,982 ns/op
Iteration  12: 1589,856 ns/op
Iteration  13: 1589,858 ns/op
Iteration  14: 1585,973 ns/op
Iteration  15: 1583,797 ns/op
Iteration  16: 1593,958 ns/op
Iteration  17: 1587,194 ns/op
Iteration  18: 1585,662 ns/op
Iteration  19: 1590,265 ns/op
Iteration  20: 1585,696 ns/op
Iteration  21: 1618,171 ns/op
Iteration  22: 1600,086 ns/op
Iteration  23: 1672,953 ns/op
Iteration  24: 1585,606 ns/op
Iteration  25: 1584,974 ns/op
Iteration  26: 1584,904 ns/op
Iteration  27: 1619,641 ns/op
Iteration  28: 1582,281 ns/op
Iteration  29: 1625,159 ns/op
Iteration  30: 1583,199 ns/op
Iteration  31: 1584,256 ns/op
Iteration  32: 1643,699 ns/op
Iteration  33: 1590,879 ns/op
Iteration  34: 1584,252 ns/op
Iteration  35: 1593,350 ns/op
Iteration  36: 1598,858 ns/op
Iteration  37: 1585,469 ns/op
Iteration  38: 1583,276 ns/op
Iteration  39: 1583,798 ns/op
Iteration  40: 1587,884 ns/op
Iteration  41: 1643,704 ns/op
Iteration  42: 1589,372 ns/op
Iteration  43: 1583,349 ns/op
Iteration  44: 1586,457 ns/op
Iteration  45: 1585,444 ns/op
Iteration  46: 1586,302 ns/op
Iteration  47: 1603,307 ns/op
Iteration  48: 1619,700 ns/op
Iteration  49: 1602,081 ns/op
Iteration  50: 1587,052 ns/op
Iteration  51: 1623,246 ns/op
Iteration  52: 1606,394 ns/op
Iteration  53: 1587,420 ns/op
Iteration  54: 1625,183 ns/op
Iteration  55: 1613,142 ns/op
Iteration  56: 1582,851 ns/op
Iteration  57: 1584,460 ns/op
Iteration  58: 1583,052 ns/op
Iteration  59: 1584,423 ns/op
Iteration  60: 1585,103 ns/op
Iteration  61: 1624,433 ns/op
Iteration  62: 1584,546 ns/op
Iteration  63: 1582,924 ns/op
Iteration  64: 1583,370 ns/op
Iteration  65: 1585,221 ns/op
Iteration  66: 1616,560 ns/op
Iteration  67: 1586,521 ns/op
Iteration  68: 1582,660 ns/op
Iteration  69: 1590,189 ns/op
Iteration  70: 1639,043 ns/op
Iteration  71: 1606,579 ns/op
Iteration  72: 1586,662 ns/op
Iteration  73: 1604,932 ns/op
Iteration  74: 1586,780 ns/op
Iteration  75: 1608,054 ns/op
Iteration  76: 1583,415 ns/op
Iteration  77: 1588,734 ns/op
Iteration  78: 1582,214 ns/op
Iteration  79: 1609,988 ns/op
Iteration  80: 1584,456 ns/op
Iteration  81: 1622,571 ns/op
Iteration  82: 1584,617 ns/op
Iteration  83: 1587,192 ns/op
Iteration  84: 1584,901 ns/op
Iteration  85: 1649,853 ns/op
Iteration  86: 1583,740 ns/op
Iteration  87: 1624,508 ns/op
Iteration  88: 1582,294 ns/op
Iteration  89: 1624,618 ns/op
Iteration  90: 1586,525 ns/op
Iteration  91: 1584,542 ns/op
Iteration  92: 1582,092 ns/op
Iteration  93: 1583,244 ns/op
Iteration  94: 1588,190 ns/op
Iteration  95: 1615,916 ns/op
Iteration  96: 1586,807 ns/op
Iteration  97: 1583,506 ns/op
Iteration  98: 1588,098 ns/op
Iteration  99: 1583,464 ns/op
Iteration 100: 1584,778 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  1598,732 ±(99.9%) 7,096 ns/op [Average]
  (min, avg, max) = (1582,092, 1598,732, 1673,106), stdev = 20,924
  CI (99.9%): [1591,636, 1605,828] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)            (fileName)  Mode  Cnt     Score   Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-10.json  avgt  100  1598,732 ± 7,096  ns/op
# JMH version: 1.21
# VM version: JDK 11.0.5, OpenJDK 64-Bit Server VM, 11.0.5+10-LTS
# VM invoker: /home/gardziol/.sdkman/candidates/java/11.0.5-zulu/bin/java
# VM options: <none>
# Warmup: 3 iterations, 10 s each
# Measurement: 100 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark
# Parameters: (className = dev.jgardo.jackson.model.Mixed, fileName = /mixed/mixed-20.json)

# Run progress: 0,00% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils (file:/home/gardziol/repository/jackson-tests/jackson-with-lambda/target/jackson-with-lambda-1.0-jar-with-dependencies.jar) to field java.lang.invoke.MethodHandles$Lookup.IMPL_LOOKUP
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.databind.util.LambdaMetafactoryUtils
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3689,201 ns/op
# Warmup Iteration   2: 3468,261 ns/op
# Warmup Iteration   3: 3479,759 ns/op
Iteration   1: 3459,379 ns/op
Iteration   2: 3463,277 ns/op
Iteration   3: 3461,572 ns/op
Iteration   4: 3488,964 ns/op
Iteration   5: 3457,018 ns/op
Iteration   6: 3465,352 ns/op
Iteration   7: 3456,018 ns/op
Iteration   8: 3553,384 ns/op
Iteration   9: 3456,464 ns/op
Iteration  10: 3451,973 ns/op
Iteration  11: 3546,346 ns/op
Iteration  12: 3468,679 ns/op
Iteration  13: 3453,555 ns/op
Iteration  14: 3472,231 ns/op
Iteration  15: 3480,822 ns/op
Iteration  16: 3549,599 ns/op
Iteration  17: 3474,527 ns/op
Iteration  18: 3474,008 ns/op
Iteration  19: 3577,578 ns/op
Iteration  20: 3490,639 ns/op
Iteration  21: 3476,154 ns/op
Iteration  22: 3561,165 ns/op
Iteration  23: 3485,903 ns/op
Iteration  24: 3485,180 ns/op
Iteration  25: 3473,933 ns/op
Iteration  26: 3472,779 ns/op
Iteration  27: 3470,792 ns/op
Iteration  28: 3478,183 ns/op
Iteration  29: 3482,128 ns/op
Iteration  30: 3596,799 ns/op
Iteration  31: 3469,557 ns/op
Iteration  32: 3568,980 ns/op
Iteration  33: 3652,328 ns/op
Iteration  34: 3494,168 ns/op
Iteration  35: 3614,937 ns/op
Iteration  36: 3476,314 ns/op
Iteration  37: 3474,196 ns/op
Iteration  38: 3480,143 ns/op
Iteration  39: 3478,077 ns/op
Iteration  40: 3480,841 ns/op
Iteration  41: 3545,371 ns/op
Iteration  42: 3468,776 ns/op
Iteration  43: 3475,213 ns/op
Iteration  44: 3502,175 ns/op
Iteration  45: 3480,923 ns/op
Iteration  46: 3487,325 ns/op
Iteration  47: 3475,230 ns/op
Iteration  48: 3474,297 ns/op
Iteration  49: 3472,972 ns/op
Iteration  50: 3478,074 ns/op
Iteration  51: 3476,810 ns/op
Iteration  52: 3490,093 ns/op
Iteration  53: 3547,152 ns/op
Iteration  54: 3489,142 ns/op
Iteration  55: 3476,985 ns/op
Iteration  56: 3480,161 ns/op
Iteration  57: 3525,162 ns/op
Iteration  58: 3480,007 ns/op
Iteration  59: 3480,522 ns/op
Iteration  60: 3491,970 ns/op
Iteration  61: 3482,703 ns/op
Iteration  62: 3501,991 ns/op
Iteration  63: 3509,879 ns/op
Iteration  64: 3475,669 ns/op
Iteration  65: 3576,713 ns/op
Iteration  66: 3477,541 ns/op
Iteration  67: 3475,008 ns/op
Iteration  68: 3481,579 ns/op
Iteration  69: 3474,678 ns/op
Iteration  70: 3483,837 ns/op
Iteration  71: 3473,971 ns/op
Iteration  72: 3480,641 ns/op
Iteration  73: 3552,090 ns/op
Iteration  74: 3477,955 ns/op
Iteration  75: 3494,853 ns/op
Iteration  76: 3479,354 ns/op
Iteration  77: 3470,644 ns/op
Iteration  78: 3475,540 ns/op
Iteration  79: 3479,818 ns/op
Iteration  80: 3470,199 ns/op
Iteration  81: 3471,609 ns/op
Iteration  82: 3476,779 ns/op
Iteration  83: 3474,438 ns/op
Iteration  84: 3486,350 ns/op
Iteration  85: 3505,637 ns/op
Iteration  86: 3473,406 ns/op
Iteration  87: 3490,391 ns/op
Iteration  88: 3576,411 ns/op
Iteration  89: 3473,377 ns/op
Iteration  90: 3472,158 ns/op
Iteration  91: 3470,695 ns/op
Iteration  92: 3524,834 ns/op
Iteration  93: 3475,616 ns/op
Iteration  94: 3480,782 ns/op
Iteration  95: 3473,767 ns/op
Iteration  96: 3629,281 ns/op
Iteration  97: 3471,296 ns/op
Iteration  98: 3515,305 ns/op
Iteration  99: 3554,147 ns/op
Iteration 100: 3591,667 ns/op


Result "dev.jgardo.jackson.benchmark.LambdaBenchmark.benchmark":
  3495,549 ±(99.9%) 13,806 ns/op [Average]
  (min, avg, max) = (3451,973, 3495,549, 3652,328), stdev = 40,708
  CI (99.9%): [3481,743, 3509,355] (assumes normal distribution)


# Run complete. Total time: 00:02:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (className)            (fileName)  Mode  Cnt     Score    Error  Units
LambdaBenchmark.benchmark  dev.jgardo.jackson.model.Mixed  /mixed/mixed-20.json  avgt  100  3495,549 ± 13,806  ns/op
